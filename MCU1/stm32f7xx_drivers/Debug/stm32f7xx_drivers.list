
stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000674  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800086c  08000874  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800086c  0800086c  00001874  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800086c  0800086c  00001874  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800086c  08000874  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800086c  0800086c  0000186c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000870  08000870  00001870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001874  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000874  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000874  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY
 12 .debug_info   000008d2  00000000  00000000  000018a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002a2  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000072  00000000  00000000  000024c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001449  00000000  00000000  00002532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000deb  00000000  00000000  0000397b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000568e  00000000  00000000  00004766  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00009df4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  00009e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000854 	.word	0x08000854

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000854 	.word	0x08000854

08000238 <delay>:

#define HIGH 1
#define BTN_PRESSED HIGH

void delay(void)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i<500000/2 ; i++);
 800023e:	2300      	movs	r3, #0
 8000240:	607b      	str	r3, [r7, #4]
 8000242:	e002      	b.n	800024a <delay+0x12>
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	3301      	adds	r3, #1
 8000248:	607b      	str	r3, [r7, #4]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4a04      	ldr	r2, [pc, #16]	@ (8000260 <delay+0x28>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d9f8      	bls.n	8000244 <delay+0xc>
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	370c      	adds	r7, #12
 8000258:	46bd      	mov	sp, r7
 800025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025e:	4770      	bx	lr
 8000260:	0003d08f 	.word	0x0003d08f

08000264 <main>:

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b086      	sub	sp, #24
 8000268:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GPIO_Handle_t GPIO_Btn;

	/* LED2 on PB7 */
	GpioLed.pGPIOx = GPIOB;
 800026a:	4b1a      	ldr	r3, [pc, #104]	@ (80002d4 <main+0x70>)
 800026c:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800026e:	2307      	movs	r3, #7
 8000270:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000272:	2301      	movs	r3, #1
 8000274:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000276:	2302      	movs	r3, #2
 8000278:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; // push pull mode
 800027a:	2300      	movs	r3, #0
 800027c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800027e:	2300      	movs	r3, #0
 8000280:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 8000282:	2101      	movs	r1, #1
 8000284:	4813      	ldr	r0, [pc, #76]	@ (80002d4 <main+0x70>)
 8000286:	f000 f853 	bl	8000330 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f966 	bl	8000560 <GPIO_Init>

	/* USER button on PC13, Pressed -> HIGH */
	/* don't need to care out type cause Button is input */
	GPIO_Btn.pGPIOx = GPIOC;
 8000294:	4b10      	ldr	r3, [pc, #64]	@ (80002d8 <main+0x74>)
 8000296:	603b      	str	r3, [r7, #0]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000298:	230d      	movs	r3, #13
 800029a:	713b      	strb	r3, [r7, #4]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800029c:	2300      	movs	r3, #0
 800029e:	717b      	strb	r3, [r7, #5]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a0:	2302      	movs	r3, #2
 80002a2:	71bb      	strb	r3, [r7, #6]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; //btn has external pull down, don't care internal
 80002a4:	2300      	movs	r3, #0
 80002a6:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOC, ENABLE);
 80002a8:	2101      	movs	r1, #1
 80002aa:	480b      	ldr	r0, [pc, #44]	@ (80002d8 <main+0x74>)
 80002ac:	f000 f840 	bl	8000330 <GPIO_PeriClockControl>
	GPIO_Init(&GPIO_Btn);
 80002b0:	463b      	mov	r3, r7
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f954 	bl	8000560 <GPIO_Init>

	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_PRESSED)
 80002b8:	210d      	movs	r1, #13
 80002ba:	4807      	ldr	r0, [pc, #28]	@ (80002d8 <main+0x74>)
 80002bc:	f000 fa7a 	bl	80007b4 <GPIO_ReadFromInputPin>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d1f8      	bne.n	80002b8 <main+0x54>
		{
			delay();
 80002c6:	f7ff ffb7 	bl	8000238 <delay>
			GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_7);
 80002ca:	2107      	movs	r1, #7
 80002cc:	4801      	ldr	r0, [pc, #4]	@ (80002d4 <main+0x70>)
 80002ce:	f000 fa87 	bl	80007e0 <GPIO_ToggleOutputPin>
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_PRESSED)
 80002d2:	e7f1      	b.n	80002b8 <main+0x54>
 80002d4:	40020400 	.word	0x40020400
 80002d8:	40020800 	.word	0x40020800

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	@ (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	@ (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	@ (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 fa7f 	bl	800080c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffa9 	bl	8000264 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000874 	.word	0x08000874
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>
	...

08000330 <GPIO_PeriClockControl>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	460b      	mov	r3, r1
 800033a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800033c:	78fb      	ldrb	r3, [r7, #3]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d178      	bne.n	8000434 <GPIO_PeriClockControl+0x104>
	{
		if(pGPIOx == GPIOA)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a7a      	ldr	r2, [pc, #488]	@ (8000530 <GPIO_PeriClockControl+0x200>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800034a:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034e:	4a79      	ldr	r2, [pc, #484]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6313      	str	r3, [r2, #48]	@ 0x30
		{
			GPIOK_PCLK_DI();
		}

	}
}
 8000356:	e0e5      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a77      	ldr	r2, [pc, #476]	@ (8000538 <GPIO_PeriClockControl+0x208>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a73      	ldr	r2, [pc, #460]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000366:	f043 0302 	orr.w	r3, r3, #2
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036c:	e0da      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a72      	ldr	r2, [pc, #456]	@ (800053c <GPIO_PeriClockControl+0x20c>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000376:	4b6f      	ldr	r3, [pc, #444]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a6e      	ldr	r2, [pc, #440]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800037c:	f043 0304 	orr.w	r3, r3, #4
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000382:	e0cf      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a6e      	ldr	r2, [pc, #440]	@ (8000540 <GPIO_PeriClockControl+0x210>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800038c:	4b69      	ldr	r3, [pc, #420]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000390:	4a68      	ldr	r2, [pc, #416]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000392:	f043 0308 	orr.w	r3, r3, #8
 8000396:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000398:	e0c4      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a69      	ldr	r2, [pc, #420]	@ (8000544 <GPIO_PeriClockControl+0x214>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d106      	bne.n	80003b0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003a2:	4b64      	ldr	r3, [pc, #400]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a63      	ldr	r2, [pc, #396]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003a8:	f043 0310 	orr.w	r3, r3, #16
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ae:	e0b9      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a65      	ldr	r2, [pc, #404]	@ (8000548 <GPIO_PeriClockControl+0x218>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003b8:	4b5e      	ldr	r3, [pc, #376]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003bc:	4a5d      	ldr	r2, [pc, #372]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003be:	f043 0320 	orr.w	r3, r3, #32
 80003c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c4:	e0ae      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a60      	ldr	r2, [pc, #384]	@ (800054c <GPIO_PeriClockControl+0x21c>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ce:	4b59      	ldr	r3, [pc, #356]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d2:	4a58      	ldr	r2, [pc, #352]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003da:	e0a3      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a5c      	ldr	r2, [pc, #368]	@ (8000550 <GPIO_PeriClockControl+0x220>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003e4:	4b53      	ldr	r3, [pc, #332]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a52      	ldr	r2, [pc, #328]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	e098      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a57      	ldr	r2, [pc, #348]	@ (8000554 <GPIO_PeriClockControl+0x224>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 80003fa:	4b4e      	ldr	r3, [pc, #312]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fe:	4a4d      	ldr	r2, [pc, #308]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000404:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000406:	e08d      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a53      	ldr	r2, [pc, #332]	@ (8000558 <GPIO_PeriClockControl+0x228>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000410:	4b48      	ldr	r3, [pc, #288]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000414:	4a47      	ldr	r2, [pc, #284]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000416:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800041a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800041c:	e082      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a4e      	ldr	r2, [pc, #312]	@ (800055c <GPIO_PeriClockControl+0x22c>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d17e      	bne.n	8000524 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 8000426:	4b43      	ldr	r3, [pc, #268]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042a:	4a42      	ldr	r2, [pc, #264]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800042c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000430:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000432:	e077      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a3e      	ldr	r2, [pc, #248]	@ (8000530 <GPIO_PeriClockControl+0x200>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d106      	bne.n	800044a <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 800043c:	4b3d      	ldr	r3, [pc, #244]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000440:	4a3c      	ldr	r2, [pc, #240]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000442:	f023 0301 	bic.w	r3, r3, #1
 8000446:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000448:	e06c      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4a3a      	ldr	r2, [pc, #232]	@ (8000538 <GPIO_PeriClockControl+0x208>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d106      	bne.n	8000460 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 8000452:	4b38      	ldr	r3, [pc, #224]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000456:	4a37      	ldr	r2, [pc, #220]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000458:	f023 0302 	bic.w	r3, r3, #2
 800045c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045e:	e061      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	4a36      	ldr	r2, [pc, #216]	@ (800053c <GPIO_PeriClockControl+0x20c>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d106      	bne.n	8000476 <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 8000468:	4b32      	ldr	r3, [pc, #200]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a31      	ldr	r2, [pc, #196]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800046e:	f023 0304 	bic.w	r3, r3, #4
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000474:	e056      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	4a31      	ldr	r2, [pc, #196]	@ (8000540 <GPIO_PeriClockControl+0x210>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 800047e:	4b2d      	ldr	r3, [pc, #180]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000482:	4a2c      	ldr	r2, [pc, #176]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000484:	f023 0308 	bic.w	r3, r3, #8
 8000488:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048a:	e04b      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4a2d      	ldr	r2, [pc, #180]	@ (8000544 <GPIO_PeriClockControl+0x214>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d106      	bne.n	80004a2 <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 8000494:	4b27      	ldr	r3, [pc, #156]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000498:	4a26      	ldr	r2, [pc, #152]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a0:	e040      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4a28      	ldr	r2, [pc, #160]	@ (8000548 <GPIO_PeriClockControl+0x218>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d106      	bne.n	80004b8 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 80004aa:	4b22      	ldr	r3, [pc, #136]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ae:	4a21      	ldr	r2, [pc, #132]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004b0:	f023 0320 	bic.w	r3, r3, #32
 80004b4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b6:	e035      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a24      	ldr	r2, [pc, #144]	@ (800054c <GPIO_PeriClockControl+0x21c>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d106      	bne.n	80004ce <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 80004c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	e02a      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000550 <GPIO_PeriClockControl+0x220>)
 80004d2:	4293      	cmp	r3, r2
 80004d4:	d106      	bne.n	80004e4 <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 80004d6:	4b17      	ldr	r3, [pc, #92]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004da:	4a16      	ldr	r2, [pc, #88]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004e0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e2:	e01f      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000554 <GPIO_PeriClockControl+0x224>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d106      	bne.n	80004fa <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 80004ec:	4b11      	ldr	r3, [pc, #68]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f0:	4a10      	ldr	r2, [pc, #64]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 80004f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004f6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f8:	e014      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4a16      	ldr	r2, [pc, #88]	@ (8000558 <GPIO_PeriClockControl+0x228>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d106      	bne.n	8000510 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000506:	4a0b      	ldr	r2, [pc, #44]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 8000508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800050c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050e:	e009      	b.n	8000524 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	4a12      	ldr	r2, [pc, #72]	@ (800055c <GPIO_PeriClockControl+0x22c>)
 8000514:	4293      	cmp	r3, r2
 8000516:	d105      	bne.n	8000524 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800051a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051c:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <GPIO_PeriClockControl+0x204>)
 800051e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000522:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	40020000 	.word	0x40020000
 8000534:	40023800 	.word	0x40023800
 8000538:	40020400 	.word	0x40020400
 800053c:	40020800 	.word	0x40020800
 8000540:	40020c00 	.word	0x40020c00
 8000544:	40021000 	.word	0x40021000
 8000548:	40021400 	.word	0x40021400
 800054c:	40021800 	.word	0x40021800
 8000550:	40021c00 	.word	0x40021c00
 8000554:	40022000 	.word	0x40022000
 8000558:	40022400 	.word	0x40022400
 800055c:	40022800 	.word	0x40022800

08000560 <GPIO_Init>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	/* 1. configure the mode of the gpio pin */
	uint32_t temp = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 	GPIO_MODE_ANALOG){
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d81f      	bhi.n	80005b4 <GPIO_Init+0x54>
		// non-interrupt mode
		// each pin takes 2 bit fields, so we multiply the pin number to 2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	2303      	movs	r3, #3
 8000594:	408b      	lsls	r3, r1
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	68fa      	ldr	r2, [r7, #12]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	e05c      	b.n	800066e <GPIO_Init+0x10e>
	}
	else{
		//this part for interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d117      	bne.n	80005ec <GPIO_Init+0x8c>
		{
			// 1. configure the falling trigger selection register (FTSR) (a register of EXTI)
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b7c      	ldr	r3, [pc, #496]	@ (80007b0 <GPIO_Init+0x250>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a78      	ldr	r2, [pc, #480]	@ (80007b0 <GPIO_Init+0x250>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]
			// c;ear the corresponding RTSR bit
			EXTI->RTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	4b77      	ldr	r3, [pc, #476]	@ (80007b0 <GPIO_Init+0x250>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	4611      	mov	r1, r2
 80005dc:	2201      	movs	r2, #1
 80005de:	408a      	lsls	r2, r1
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a72      	ldr	r2, [pc, #456]	@ (80007b0 <GPIO_Init+0x250>)
 80005e6:	400b      	ands	r3, r1
 80005e8:	6093      	str	r3, [r2, #8]
 80005ea:	e035      	b.n	8000658 <GPIO_Init+0xf8>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	795b      	ldrb	r3, [r3, #5]
 80005f0:	2b05      	cmp	r3, #5
 80005f2:	d117      	bne.n	8000624 <GPIO_Init+0xc4>
		{
			// 1. configure the rising trigger selection register (RTSR)
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f4:	4b6e      	ldr	r3, [pc, #440]	@ (80007b0 <GPIO_Init+0x250>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7912      	ldrb	r2, [r2, #4]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	4611      	mov	r1, r2
 8000604:	4a6a      	ldr	r2, [pc, #424]	@ (80007b0 <GPIO_Init+0x250>)
 8000606:	430b      	orrs	r3, r1
 8000608:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060a:	4b69      	ldr	r3, [pc, #420]	@ (80007b0 <GPIO_Init+0x250>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7912      	ldrb	r2, [r2, #4]
 8000612:	4611      	mov	r1, r2
 8000614:	2201      	movs	r2, #1
 8000616:	408a      	lsls	r2, r1
 8000618:	43d2      	mvns	r2, r2
 800061a:	4611      	mov	r1, r2
 800061c:	4a64      	ldr	r2, [pc, #400]	@ (80007b0 <GPIO_Init+0x250>)
 800061e:	400b      	ands	r3, r1
 8000620:	60d3      	str	r3, [r2, #12]
 8000622:	e019      	b.n	8000658 <GPIO_Init+0xf8>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	2b06      	cmp	r3, #6
 800062a:	d115      	bne.n	8000658 <GPIO_Init+0xf8>
		{
			// 1. configure both the RTSR and FTSR
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b60      	ldr	r3, [pc, #384]	@ (80007b0 <GPIO_Init+0x250>)
 800062e:	689b      	ldr	r3, [r3, #8]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a5c      	ldr	r2, [pc, #368]	@ (80007b0 <GPIO_Init+0x250>)
 800063e:	430b      	orrs	r3, r1
 8000640:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000642:	4b5b      	ldr	r3, [pc, #364]	@ (80007b0 <GPIO_Init+0x250>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7912      	ldrb	r2, [r2, #4]
 800064a:	4611      	mov	r1, r2
 800064c:	2201      	movs	r2, #1
 800064e:	408a      	lsls	r2, r1
 8000650:	4611      	mov	r1, r2
 8000652:	4a57      	ldr	r2, [pc, #348]	@ (80007b0 <GPIO_Init+0x250>)
 8000654:	430b      	orrs	r3, r1
 8000656:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTI
		// 3. enable the exti interrupt delivery using Interrupt Mask Register (IMR)
		EXTI->IMR |= 1<< 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000658:	4b55      	ldr	r3, [pc, #340]	@ (80007b0 <GPIO_Init+0x250>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	7912      	ldrb	r2, [r2, #4]
 8000660:	4611      	mov	r1, r2
 8000662:	2202      	movs	r2, #2
 8000664:	408a      	lsls	r2, r1
 8000666:	4611      	mov	r1, r2
 8000668:	4a51      	ldr	r2, [pc, #324]	@ (80007b0 <GPIO_Init+0x250>)
 800066a:	430b      	orrs	r3, r1
 800066c:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	60fb      	str	r3, [r7, #12]

	/* 2. configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	799b      	ldrb	r3, [r3, #6]
 8000676:	461a      	mov	r2, r3
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	fa02 f303 	lsl.w	r3, r2, r3
 8000682:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	4619      	mov	r1, r3
 8000690:	2303      	movs	r3, #3
 8000692:	408b      	lsls	r3, r1
 8000694:	43db      	mvns	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	400a      	ands	r2, r1
 800069e:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	6899      	ldr	r1, [r3, #8]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	430a      	orrs	r2, r1
 80006ae:	609a      	str	r2, [r3, #8]
	temp = 0;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60fb      	str	r3, [r7, #12]

	/* 3. configure pull-up/pull-down settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	79db      	ldrb	r3, [r3, #7]
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	fa02 f303 	lsl.w	r3, r2, r3
 80006c4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2303      	movs	r3, #3
 80006d4:	408b      	lsls	r3, r1
 80006d6:	43db      	mvns	r3, r3
 80006d8:	4619      	mov	r1, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	400a      	ands	r2, r1
 80006e0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	68d9      	ldr	r1, [r3, #12]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]

	/* 4. configure the output type */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	7a1b      	ldrb	r3, [r3, #8]
 80006fa:	461a      	mov	r2, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	685a      	ldr	r2, [r3, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	4619      	mov	r1, r3
 8000712:	2301      	movs	r3, #1
 8000714:	408b      	lsls	r3, r1
 8000716:	43db      	mvns	r3, r3
 8000718:	4619      	mov	r1, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	400a      	ands	r2, r1
 8000720:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	6859      	ldr	r1, [r3, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	430a      	orrs	r2, r1
 8000730:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]

	/* 5. configure the alternate functionality */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	795b      	ldrb	r3, [r3, #5]
 800073a:	2b02      	cmp	r3, #2
 800073c:	d131      	bne.n	80007a2 <GPIO_Init+0x242>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	791b      	ldrb	r3, [r3, #4]
 8000742:	08db      	lsrs	r3, r3, #3
 8000744:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	791b      	ldrb	r3, [r3, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	7afa      	ldrb	r2, [r7, #11]
 8000756:	3208      	adds	r2, #8
 8000758:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800075c:	7abb      	ldrb	r3, [r7, #10]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	220f      	movs	r2, #15
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43db      	mvns	r3, r3
 8000768:	4618      	mov	r0, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	7afa      	ldrb	r2, [r7, #11]
 8000770:	4001      	ands	r1, r0
 8000772:	3208      	adds	r2, #8
 8000774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	7afa      	ldrb	r2, [r7, #11]
 800077e:	3208      	adds	r2, #8
 8000780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7a5b      	ldrb	r3, [r3, #9]
 8000788:	461a      	mov	r2, r3
 800078a:	7abb      	ldrb	r3, [r7, #10]
 800078c:	009b      	lsls	r3, r3, #2
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	4618      	mov	r0, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	7afa      	ldrb	r2, [r7, #11]
 800079a:	4301      	orrs	r1, r0
 800079c:	3208      	adds	r2, #8
 800079e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40013c00 	.word	0x40013c00

080007b4 <GPIO_ReadFromInputPin>:
}

/*
 * Data read/write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	70fb      	strb	r3, [r7, #3]
	//return 0/1, so use uint8_t
	uint8_t value;

	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001); // shift the bit to LSB and mask + read it
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	691a      	ldr	r2, [r3, #16]
 80007c4:	78fb      	ldrb	r3, [r7, #3]
 80007c6:	fa22 f303 	lsr.w	r3, r2, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]

	return value;
 80007d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007de:	4770      	bx	lr

080007e0 <GPIO_ToggleOutputPin>:
}
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx->ODR = Value; // writing into the whole port
}
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	460b      	mov	r3, r1
 80007ea:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR = pGPIOx->ODR ^ (1 << PinNumber);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	78fa      	ldrb	r2, [r7, #3]
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	405a      	eors	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	615a      	str	r2, [r3, #20]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <__libc_init_array>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	4d0d      	ldr	r5, [pc, #52]	@ (8000844 <__libc_init_array+0x38>)
 8000810:	4c0d      	ldr	r4, [pc, #52]	@ (8000848 <__libc_init_array+0x3c>)
 8000812:	1b64      	subs	r4, r4, r5
 8000814:	10a4      	asrs	r4, r4, #2
 8000816:	2600      	movs	r6, #0
 8000818:	42a6      	cmp	r6, r4
 800081a:	d109      	bne.n	8000830 <__libc_init_array+0x24>
 800081c:	4d0b      	ldr	r5, [pc, #44]	@ (800084c <__libc_init_array+0x40>)
 800081e:	4c0c      	ldr	r4, [pc, #48]	@ (8000850 <__libc_init_array+0x44>)
 8000820:	f000 f818 	bl	8000854 <_init>
 8000824:	1b64      	subs	r4, r4, r5
 8000826:	10a4      	asrs	r4, r4, #2
 8000828:	2600      	movs	r6, #0
 800082a:	42a6      	cmp	r6, r4
 800082c:	d105      	bne.n	800083a <__libc_init_array+0x2e>
 800082e:	bd70      	pop	{r4, r5, r6, pc}
 8000830:	f855 3b04 	ldr.w	r3, [r5], #4
 8000834:	4798      	blx	r3
 8000836:	3601      	adds	r6, #1
 8000838:	e7ee      	b.n	8000818 <__libc_init_array+0xc>
 800083a:	f855 3b04 	ldr.w	r3, [r5], #4
 800083e:	4798      	blx	r3
 8000840:	3601      	adds	r6, #1
 8000842:	e7f2      	b.n	800082a <__libc_init_array+0x1e>
 8000844:	0800086c 	.word	0x0800086c
 8000848:	0800086c 	.word	0x0800086c
 800084c:	0800086c 	.word	0x0800086c
 8000850:	08000870 	.word	0x08000870

08000854 <_init>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	bf00      	nop
 8000858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085a:	bc08      	pop	{r3}
 800085c:	469e      	mov	lr, r3
 800085e:	4770      	bx	lr

08000860 <_fini>:
 8000860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000862:	bf00      	nop
 8000864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000866:	bc08      	pop	{r3}
 8000868:	469e      	mov	lr, r3
 800086a:	4770      	bx	lr


stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009d0  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000bc8  08000bc8  00001bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bd4  08000bd4  00001be4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000bd4  08000bd4  00001bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000bdc  08000be4  00001be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bdc  08000bdc  00001bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000be0  08000be0  00001be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001be4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000be4  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000be4  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00001be4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001084  00000000  00000000  00001c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003ee  00000000  00000000  00002c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000108  00000000  00000000  00003088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b9  00000000  00000000  00003190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002361  00000000  00000000  00003249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001824  00000000  00000000  000055aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009b27  00000000  00000000  00006dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000108f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000033c  00000000  00000000  00010938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00010c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000bb0 	.word	0x08000bb0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000bb0 	.word	0x08000bb0

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * PB13 --> SPI2_SCK
 * PB14 --> SPI2_MISO
 * PB15 --> SPI2_MOSI
 */
void SPI2_GPIOInits(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <SPI2_GPIOInits+0x40>)
 8000250:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000252:	2302      	movs	r3, #2
 8000254:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000256:	2305      	movs	r3, #5
 8000258:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800025e:	2300      	movs	r3, #0
 8000260:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000262:	2302      	movs	r3, #2
 8000264:	72bb      	strb	r3, [r7, #10]

	/* SCLK */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000266:	230d      	movs	r3, #13
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f989 	bl	8000584 <GPIO_Init>

	/* MOSI */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000272:	230f      	movs	r3, #15
 8000274:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f983 	bl	8000584 <GPIO_Init>
	//GPIO_Init(&SPIPins);

	/* NSS  */
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);
}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40020400 	.word	0x40020400

0800028c <SPI2_Inits>:

void SPI2_Inits(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000292:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <SPI2_Inits+0x38>)
 8000294:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD; //FULL-duplex
 8000296:	2301      	movs	r3, #1
 8000298:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800029a:	2301      	movs	r3, #1
 800029c:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2; // Serial clock of 8M Hz
 800029e:	2300      	movs	r3, #0
 80002a0:	72bb      	strb	r3, [r7, #10]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002a2:	2300      	movs	r3, #0
 80002a4:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002a6:	2300      	movs	r3, #0
 80002a8:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enable for NSS pin
 80002ae:	2301      	movs	r3, #1
 80002b0:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2Handle);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 fbb5 	bl	8000a24 <SPI_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40003800 	.word	0x40003800

080002c8 <main>:

int main(void){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b084      	sub	sp, #16
 80002cc:	af00      	add	r7, sp, #0

	char user_data[] = "Hello world";
 80002ce:	4a0a      	ldr	r2, [pc, #40]	@ (80002f8 <main+0x30>)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// this function is used to initialize the GPIO pins to behave like SPI2 pins (alternate functions)
	SPI2_GPIOInits();
 80002d8:	f7ff ffb6 	bl	8000248 <SPI2_GPIOInits>

	SPI2_Inits();
 80002dc:	f7ff ffd6 	bl	800028c <SPI2_Inits>

	SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ffa8 	bl	8000238 <strlen>
 80002e8:	4602      	mov	r2, r0
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4803      	ldr	r0, [pc, #12]	@ (80002fc <main+0x34>)
 80002f0:	f000 fc02 	bl	8000af8 <SPI_SendData>

	while(1);
 80002f4:	bf00      	nop
 80002f6:	e7fd      	b.n	80002f4 <main+0x2c>
 80002f8:	08000bc8 	.word	0x08000bc8
 80002fc:	40003800 	.word	0x40003800

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	@ (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	@ (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	@ (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	@ (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	@ (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	@ (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 fc1b 	bl	8000b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ffc9 	bl	80002c8 <main>

08000336 <LoopForever>:

LoopForever:
  b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000344:	08000be4 	.word	0x08000be4
  ldr r2, =_sbss
 8000348:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800034c:	2000001c 	.word	0x2000001c

08000350 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_IRQHandler>
	...

08000354 <GPIO_PeriClockControl>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	460b      	mov	r3, r1
 800035e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000360:	78fb      	ldrb	r3, [r7, #3]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d178      	bne.n	8000458 <GPIO_PeriClockControl+0x104>
	{
		if(pGPIOx == GPIOA)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4a7a      	ldr	r2, [pc, #488]	@ (8000554 <GPIO_PeriClockControl+0x200>)
 800036a:	4293      	cmp	r3, r2
 800036c:	d106      	bne.n	800037c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800036e:	4b7a      	ldr	r3, [pc, #488]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000372:	4a79      	ldr	r2, [pc, #484]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6313      	str	r3, [r2, #48]	@ 0x30
		{
			GPIOK_PCLK_DI();
		}

	}
}
 800037a:	e0e5      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	4a77      	ldr	r2, [pc, #476]	@ (800055c <GPIO_PeriClockControl+0x208>)
 8000380:	4293      	cmp	r3, r2
 8000382:	d106      	bne.n	8000392 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000384:	4b74      	ldr	r3, [pc, #464]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a73      	ldr	r2, [pc, #460]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800038a:	f043 0302 	orr.w	r3, r3, #2
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000390:	e0da      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a72      	ldr	r2, [pc, #456]	@ (8000560 <GPIO_PeriClockControl+0x20c>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d106      	bne.n	80003a8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800039a:	4b6f      	ldr	r3, [pc, #444]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800039c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039e:	4a6e      	ldr	r2, [pc, #440]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a6:	e0cf      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	4a6e      	ldr	r2, [pc, #440]	@ (8000564 <GPIO_PeriClockControl+0x210>)
 80003ac:	4293      	cmp	r3, r2
 80003ae:	d106      	bne.n	80003be <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003b0:	4b69      	ldr	r3, [pc, #420]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b4:	4a68      	ldr	r2, [pc, #416]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003b6:	f043 0308 	orr.w	r3, r3, #8
 80003ba:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003bc:	e0c4      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a69      	ldr	r2, [pc, #420]	@ (8000568 <GPIO_PeriClockControl+0x214>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003c6:	4b64      	ldr	r3, [pc, #400]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ca:	4a63      	ldr	r2, [pc, #396]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d2:	e0b9      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a65      	ldr	r2, [pc, #404]	@ (800056c <GPIO_PeriClockControl+0x218>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e0:	4a5d      	ldr	r2, [pc, #372]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003e2:	f043 0320 	orr.w	r3, r3, #32
 80003e6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e8:	e0ae      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a60      	ldr	r2, [pc, #384]	@ (8000570 <GPIO_PeriClockControl+0x21c>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003f2:	4b59      	ldr	r3, [pc, #356]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f6:	4a58      	ldr	r2, [pc, #352]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80003f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003fc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fe:	e0a3      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a5c      	ldr	r2, [pc, #368]	@ (8000574 <GPIO_PeriClockControl+0x220>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000408:	4b53      	ldr	r3, [pc, #332]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a52      	ldr	r2, [pc, #328]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800040e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000414:	e098      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a57      	ldr	r2, [pc, #348]	@ (8000578 <GPIO_PeriClockControl+0x224>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 800041e:	4b4e      	ldr	r3, [pc, #312]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a4d      	ldr	r2, [pc, #308]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042a:	e08d      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a53      	ldr	r2, [pc, #332]	@ (800057c <GPIO_PeriClockControl+0x228>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000434:	4b48      	ldr	r3, [pc, #288]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000438:	4a47      	ldr	r2, [pc, #284]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800043a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800043e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000440:	e082      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a4e      	ldr	r2, [pc, #312]	@ (8000580 <GPIO_PeriClockControl+0x22c>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d17e      	bne.n	8000548 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 800044a:	4b43      	ldr	r3, [pc, #268]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044e:	4a42      	ldr	r2, [pc, #264]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000450:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000454:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000456:	e077      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a3e      	ldr	r2, [pc, #248]	@ (8000554 <GPIO_PeriClockControl+0x200>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d106      	bne.n	800046e <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 8000460:	4b3d      	ldr	r3, [pc, #244]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	4a3c      	ldr	r2, [pc, #240]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000466:	f023 0301 	bic.w	r3, r3, #1
 800046a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046c:	e06c      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a3a      	ldr	r2, [pc, #232]	@ (800055c <GPIO_PeriClockControl+0x208>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 8000476:	4b38      	ldr	r3, [pc, #224]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047a:	4a37      	ldr	r2, [pc, #220]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800047c:	f023 0302 	bic.w	r3, r3, #2
 8000480:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000482:	e061      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a36      	ldr	r2, [pc, #216]	@ (8000560 <GPIO_PeriClockControl+0x20c>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 800048c:	4b32      	ldr	r3, [pc, #200]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000490:	4a31      	ldr	r2, [pc, #196]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000492:	f023 0304 	bic.w	r3, r3, #4
 8000496:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000498:	e056      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a31      	ldr	r2, [pc, #196]	@ (8000564 <GPIO_PeriClockControl+0x210>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 80004a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a6:	4a2c      	ldr	r2, [pc, #176]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004a8:	f023 0308 	bic.w	r3, r3, #8
 80004ac:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ae:	e04b      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000568 <GPIO_PeriClockControl+0x214>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 80004b8:	4b27      	ldr	r3, [pc, #156]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a26      	ldr	r2, [pc, #152]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004be:	f023 0310 	bic.w	r3, r3, #16
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c4:	e040      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a28      	ldr	r2, [pc, #160]	@ (800056c <GPIO_PeriClockControl+0x218>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 80004ce:	4b22      	ldr	r3, [pc, #136]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a21      	ldr	r2, [pc, #132]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004d4:	f023 0320 	bic.w	r3, r3, #32
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004da:	e035      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a24      	ldr	r2, [pc, #144]	@ (8000570 <GPIO_PeriClockControl+0x21c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 80004e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f0:	e02a      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a1f      	ldr	r2, [pc, #124]	@ (8000574 <GPIO_PeriClockControl+0x220>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 80004fa:	4b17      	ldr	r3, [pc, #92]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	4a16      	ldr	r2, [pc, #88]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000500:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000504:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000506:	e01f      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a1b      	ldr	r2, [pc, #108]	@ (8000578 <GPIO_PeriClockControl+0x224>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000514:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000516:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800051a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800051c:	e014      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a16      	ldr	r2, [pc, #88]	@ (800057c <GPIO_PeriClockControl+0x228>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a0b      	ldr	r2, [pc, #44]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800052c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000532:	e009      	b.n	8000548 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a12      	ldr	r2, [pc, #72]	@ (8000580 <GPIO_PeriClockControl+0x22c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d105      	bne.n	8000548 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000540:	4a05      	ldr	r2, [pc, #20]	@ (8000558 <GPIO_PeriClockControl+0x204>)
 8000542:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000546:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40020000 	.word	0x40020000
 8000558:	40023800 	.word	0x40023800
 800055c:	40020400 	.word	0x40020400
 8000560:	40020800 	.word	0x40020800
 8000564:	40020c00 	.word	0x40020c00
 8000568:	40021000 	.word	0x40021000
 800056c:	40021400 	.word	0x40021400
 8000570:	40021800 	.word	0x40021800
 8000574:	40021c00 	.word	0x40021c00
 8000578:	40022000 	.word	0x40022000
 800057c:	40022400 	.word	0x40022400
 8000580:	40022800 	.word	0x40022800

08000584 <GPIO_Init>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	/* 1. configure the mode of the gpio pin */
	uint32_t temp = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock for GPIOx
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2101      	movs	r1, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fedc 	bl	8000354 <GPIO_PeriClockControl>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 	GPIO_MODE_ANALOG){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b03      	cmp	r3, #3
 80005a2:	d81f      	bhi.n	80005e4 <GPIO_Init+0x60>
		// non-interrupt mode
		// each pin takes 2 bit fields, so we multiply the pin number to 2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	461a      	mov	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	fa02 f303 	lsl.w	r3, r2, r3
 80005b4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	4619      	mov	r1, r3
 80005c2:	2303      	movs	r3, #3
 80005c4:	408b      	lsls	r3, r1
 80005c6:	43db      	mvns	r3, r3
 80005c8:	4619      	mov	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	400a      	ands	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6819      	ldr	r1, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	697a      	ldr	r2, [r7, #20]
 80005de:	430a      	orrs	r2, r1
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	e0da      	b.n	800079a <GPIO_Init+0x216>
	}
	else{
		//this part for interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	795b      	ldrb	r3, [r3, #5]
 80005e8:	2b04      	cmp	r3, #4
 80005ea:	d117      	bne.n	800061c <GPIO_Init+0x98>
		{
			// 1. configure the falling trigger selection register (FTSR) (a register of EXTI)
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ec:	4b51      	ldr	r3, [pc, #324]	@ (8000734 <GPIO_Init+0x1b0>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a4d      	ldr	r2, [pc, #308]	@ (8000734 <GPIO_Init+0x1b0>)
 80005fe:	430b      	orrs	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
			// c;ear the corresponding RTSR bit
			EXTI->RTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000602:	4b4c      	ldr	r3, [pc, #304]	@ (8000734 <GPIO_Init+0x1b0>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	7912      	ldrb	r2, [r2, #4]
 800060a:	4611      	mov	r1, r2
 800060c:	2201      	movs	r2, #1
 800060e:	408a      	lsls	r2, r1
 8000610:	43d2      	mvns	r2, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a47      	ldr	r2, [pc, #284]	@ (8000734 <GPIO_Init+0x1b0>)
 8000616:	400b      	ands	r3, r1
 8000618:	6093      	str	r3, [r2, #8]
 800061a:	e035      	b.n	8000688 <GPIO_Init+0x104>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	795b      	ldrb	r3, [r3, #5]
 8000620:	2b05      	cmp	r3, #5
 8000622:	d117      	bne.n	8000654 <GPIO_Init+0xd0>
		{
			// 1. configure the rising trigger selection register (RTSR)
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <GPIO_Init+0x1b0>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	4611      	mov	r1, r2
 8000634:	4a3f      	ldr	r2, [pc, #252]	@ (8000734 <GPIO_Init+0x1b0>)
 8000636:	430b      	orrs	r3, r1
 8000638:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063a:	4b3e      	ldr	r3, [pc, #248]	@ (8000734 <GPIO_Init+0x1b0>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	43d2      	mvns	r2, r2
 800064a:	4611      	mov	r1, r2
 800064c:	4a39      	ldr	r2, [pc, #228]	@ (8000734 <GPIO_Init+0x1b0>)
 800064e:	400b      	ands	r3, r1
 8000650:	60d3      	str	r3, [r2, #12]
 8000652:	e019      	b.n	8000688 <GPIO_Init+0x104>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	795b      	ldrb	r3, [r3, #5]
 8000658:	2b06      	cmp	r3, #6
 800065a:	d115      	bne.n	8000688 <GPIO_Init+0x104>
		{
			// 1. configure both the RTSR and FTSR
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800065c:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <GPIO_Init+0x1b0>)
 800065e:	689b      	ldr	r3, [r3, #8]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	7912      	ldrb	r2, [r2, #4]
 8000664:	4611      	mov	r1, r2
 8000666:	2201      	movs	r2, #1
 8000668:	408a      	lsls	r2, r1
 800066a:	4611      	mov	r1, r2
 800066c:	4a31      	ldr	r2, [pc, #196]	@ (8000734 <GPIO_Init+0x1b0>)
 800066e:	430b      	orrs	r3, r1
 8000670:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000672:	4b30      	ldr	r3, [pc, #192]	@ (8000734 <GPIO_Init+0x1b0>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	4611      	mov	r1, r2
 800067c:	2201      	movs	r2, #1
 800067e:	408a      	lsls	r2, r1
 8000680:	4611      	mov	r1, r2
 8000682:	4a2c      	ldr	r2, [pc, #176]	@ (8000734 <GPIO_Init+0x1b0>)
 8000684:	430b      	orrs	r3, r1
 8000686:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTI
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	791b      	ldrb	r3, [r3, #4]
 800068c:	089b      	lsrs	r3, r3, #2
 800068e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	791b      	ldrb	r3, [r3, #4]
 8000694:	f003 0303 	and.w	r3, r3, #3
 8000698:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a26      	ldr	r2, [pc, #152]	@ (8000738 <GPIO_Init+0x1b4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d05d      	beq.n	8000760 <GPIO_Init+0x1dc>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a24      	ldr	r2, [pc, #144]	@ (800073c <GPIO_Init+0x1b8>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d040      	beq.n	8000730 <GPIO_Init+0x1ac>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a23      	ldr	r2, [pc, #140]	@ (8000740 <GPIO_Init+0x1bc>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d039      	beq.n	800072c <GPIO_Init+0x1a8>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a21      	ldr	r2, [pc, #132]	@ (8000744 <GPIO_Init+0x1c0>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d032      	beq.n	8000728 <GPIO_Init+0x1a4>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a20      	ldr	r2, [pc, #128]	@ (8000748 <GPIO_Init+0x1c4>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d02b      	beq.n	8000724 <GPIO_Init+0x1a0>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <GPIO_Init+0x1c8>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d024      	beq.n	8000720 <GPIO_Init+0x19c>
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a1d      	ldr	r2, [pc, #116]	@ (8000750 <GPIO_Init+0x1cc>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d01d      	beq.n	800071c <GPIO_Init+0x198>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <GPIO_Init+0x1d0>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d016      	beq.n	8000718 <GPIO_Init+0x194>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000758 <GPIO_Init+0x1d4>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d00f      	beq.n	8000714 <GPIO_Init+0x190>
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a14      	ldr	r2, [pc, #80]	@ (800074c <GPIO_Init+0x1c8>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d008      	beq.n	8000710 <GPIO_Init+0x18c>
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a16      	ldr	r2, [pc, #88]	@ (800075c <GPIO_Init+0x1d8>)
 8000704:	4293      	cmp	r3, r2
 8000706:	d101      	bne.n	800070c <GPIO_Init+0x188>
 8000708:	230a      	movs	r3, #10
 800070a:	e02a      	b.n	8000762 <GPIO_Init+0x1de>
 800070c:	2300      	movs	r3, #0
 800070e:	e028      	b.n	8000762 <GPIO_Init+0x1de>
 8000710:	2309      	movs	r3, #9
 8000712:	e026      	b.n	8000762 <GPIO_Init+0x1de>
 8000714:	2308      	movs	r3, #8
 8000716:	e024      	b.n	8000762 <GPIO_Init+0x1de>
 8000718:	2307      	movs	r3, #7
 800071a:	e022      	b.n	8000762 <GPIO_Init+0x1de>
 800071c:	2306      	movs	r3, #6
 800071e:	e020      	b.n	8000762 <GPIO_Init+0x1de>
 8000720:	2305      	movs	r3, #5
 8000722:	e01e      	b.n	8000762 <GPIO_Init+0x1de>
 8000724:	2304      	movs	r3, #4
 8000726:	e01c      	b.n	8000762 <GPIO_Init+0x1de>
 8000728:	2303      	movs	r3, #3
 800072a:	e01a      	b.n	8000762 <GPIO_Init+0x1de>
 800072c:	2302      	movs	r3, #2
 800072e:	e018      	b.n	8000762 <GPIO_Init+0x1de>
 8000730:	2301      	movs	r3, #1
 8000732:	e016      	b.n	8000762 <GPIO_Init+0x1de>
 8000734:	40013c00 	.word	0x40013c00
 8000738:	40020000 	.word	0x40020000
 800073c:	40020400 	.word	0x40020400
 8000740:	40020800 	.word	0x40020800
 8000744:	40020c00 	.word	0x40020c00
 8000748:	40021000 	.word	0x40021000
 800074c:	40021400 	.word	0x40021400
 8000750:	40021800 	.word	0x40021800
 8000754:	40021c00 	.word	0x40021c00
 8000758:	40022000 	.word	0x40022000
 800075c:	40022800 	.word	0x40022800
 8000760:	2300      	movs	r3, #0
 8000762:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000764:	4b5c      	ldr	r3, [pc, #368]	@ (80008d8 <GPIO_Init+0x354>)
 8000766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000768:	4a5b      	ldr	r2, [pc, #364]	@ (80008d8 <GPIO_Init+0x354>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2*4);
 8000770:	7c7a      	ldrb	r2, [r7, #17]
 8000772:	7cbb      	ldrb	r3, [r7, #18]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	fa02 f103 	lsl.w	r1, r2, r3
 800077a:	4a58      	ldr	r2, [pc, #352]	@ (80008dc <GPIO_Init+0x358>)
 800077c:	7cfb      	ldrb	r3, [r7, #19]
 800077e:	3302      	adds	r3, #2
 8000780:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. enable the EXTI interrupt delivery using Interrupt Mask Register (IMR)
		EXTI->IMR |= 1<< 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000784:	4b56      	ldr	r3, [pc, #344]	@ (80008e0 <GPIO_Init+0x35c>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	687a      	ldr	r2, [r7, #4]
 800078a:	7912      	ldrb	r2, [r2, #4]
 800078c:	4611      	mov	r1, r2
 800078e:	2202      	movs	r2, #2
 8000790:	408a      	lsls	r2, r1
 8000792:	4611      	mov	r1, r2
 8000794:	4a52      	ldr	r2, [pc, #328]	@ (80008e0 <GPIO_Init+0x35c>)
 8000796:	430b      	orrs	r3, r1
 8000798:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]

	/* 2. configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	799b      	ldrb	r3, [r3, #6]
 80007a2:	461a      	mov	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	791b      	ldrb	r3, [r3, #4]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	689a      	ldr	r2, [r3, #8]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	4619      	mov	r1, r3
 80007bc:	2303      	movs	r3, #3
 80007be:	408b      	lsls	r3, r1
 80007c0:	43db      	mvns	r3, r3
 80007c2:	4619      	mov	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	400a      	ands	r2, r1
 80007ca:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6899      	ldr	r1, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	430a      	orrs	r2, r1
 80007da:	609a      	str	r2, [r3, #8]
	temp = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

	/* 3. configure pull-up/pull-down settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	79db      	ldrb	r3, [r3, #7]
 80007e4:	461a      	mov	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	791b      	ldrb	r3, [r3, #4]
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68da      	ldr	r2, [r3, #12]
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	791b      	ldrb	r3, [r3, #4]
 80007fc:	4619      	mov	r1, r3
 80007fe:	2303      	movs	r3, #3
 8000800:	408b      	lsls	r3, r1
 8000802:	43db      	mvns	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	400a      	ands	r2, r1
 800080c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	68d9      	ldr	r1, [r3, #12]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	430a      	orrs	r2, r1
 800081c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]

	/* 4. configure the output type */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	7a1b      	ldrb	r3, [r3, #8]
 8000826:	461a      	mov	r2, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	791b      	ldrb	r3, [r3, #4]
 800082c:	fa02 f303 	lsl.w	r3, r2, r3
 8000830:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	685a      	ldr	r2, [r3, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	4619      	mov	r1, r3
 800083e:	2301      	movs	r3, #1
 8000840:	408b      	lsls	r3, r1
 8000842:	43db      	mvns	r3, r3
 8000844:	4619      	mov	r1, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	400a      	ands	r2, r1
 800084c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6859      	ldr	r1, [r3, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	430a      	orrs	r2, r1
 800085c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

	/* 5. configure the alternate functionality */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	795b      	ldrb	r3, [r3, #5]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d131      	bne.n	80008ce <GPIO_Init+0x34a>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	08db      	lsrs	r3, r3, #3
 8000870:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	7c3a      	ldrb	r2, [r7, #16]
 8000882:	3208      	adds	r2, #8
 8000884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	220f      	movs	r2, #15
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43db      	mvns	r3, r3
 8000894:	4618      	mov	r0, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	7c3a      	ldrb	r2, [r7, #16]
 800089c:	4001      	ands	r1, r0
 800089e:	3208      	adds	r2, #8
 80008a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	7c3a      	ldrb	r2, [r7, #16]
 80008aa:	3208      	adds	r2, #8
 80008ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7a5b      	ldrb	r3, [r3, #9]
 80008b4:	461a      	mov	r2, r3
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	7c3a      	ldrb	r2, [r7, #16]
 80008c6:	4301      	orrs	r1, r0
 80008c8:	3208      	adds	r2, #8
 80008ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80008ce:	bf00      	nop
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40013800 	.word	0x40013800
 80008e0:	40013c00 	.word	0x40013c00

080008e4 <SPI_PeriClockControl>:

#include "stm32f767xx.h"
#include "stm32f767xx_spi_driver.h"

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80008f0:	78fb      	ldrb	r3, [r7, #3]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d141      	bne.n	800097a <SPI_PeriClockControl+0x96>
	{
		if(pSPIx == SPI1)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a43      	ldr	r2, [pc, #268]	@ (8000a08 <SPI_PeriClockControl+0x124>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d106      	bne.n	800090c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 80008fe:	4b43      	ldr	r3, [pc, #268]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	4a42      	ldr	r2, [pc, #264]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000908:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI6_PCLK_DI();
		}

	}

}
 800090a:	e077      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI2)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a40      	ldr	r2, [pc, #256]	@ (8000a10 <SPI_PeriClockControl+0x12c>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d106      	bne.n	8000922 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000914:	4b3d      	ldr	r3, [pc, #244]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a3c      	ldr	r2, [pc, #240]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 800091a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000920:	e06c      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4a3b      	ldr	r2, [pc, #236]	@ (8000a14 <SPI_PeriClockControl+0x130>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d106      	bne.n	8000938 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092e:	4a37      	ldr	r2, [pc, #220]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000934:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000936:	e061      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI4)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a37      	ldr	r2, [pc, #220]	@ (8000a18 <SPI_PeriClockControl+0x134>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d106      	bne.n	800094e <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 8000940:	4b32      	ldr	r3, [pc, #200]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000944:	4a31      	ldr	r2, [pc, #196]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000946:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800094a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800094c:	e056      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI5)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a32      	ldr	r2, [pc, #200]	@ (8000a1c <SPI_PeriClockControl+0x138>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <SPI_PeriClockControl+0x80>
			SPI5_PCLK_EN();
 8000956:	4b2d      	ldr	r3, [pc, #180]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	4a2c      	ldr	r2, [pc, #176]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 800095c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000960:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000962:	e04b      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI6)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a2e      	ldr	r2, [pc, #184]	@ (8000a20 <SPI_PeriClockControl+0x13c>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d147      	bne.n	80009fc <SPI_PeriClockControl+0x118>
			SPI6_PCLK_EN();
 800096c:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 800096e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000970:	4a26      	ldr	r2, [pc, #152]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000972:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000976:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000978:	e040      	b.n	80009fc <SPI_PeriClockControl+0x118>
		if(pSPIx == SPI1)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a22      	ldr	r2, [pc, #136]	@ (8000a08 <SPI_PeriClockControl+0x124>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <SPI_PeriClockControl+0xac>
			SPI1_PCLK_DI();
 8000982:	4b22      	ldr	r3, [pc, #136]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a21      	ldr	r2, [pc, #132]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 8000988:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800098e:	e035      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	4a1f      	ldr	r2, [pc, #124]	@ (8000a10 <SPI_PeriClockControl+0x12c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d106      	bne.n	80009a6 <SPI_PeriClockControl+0xc2>
			SPI2_PCLK_DI();
 8000998:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 800099e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80009a2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009a4:	e02a      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI3)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000a14 <SPI_PeriClockControl+0x130>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d106      	bne.n	80009bc <SPI_PeriClockControl+0xd8>
			SPI3_PCLK_DI();
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a16      	ldr	r2, [pc, #88]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009ba:	e01f      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI4)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <SPI_PeriClockControl+0x134>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d106      	bne.n	80009d2 <SPI_PeriClockControl+0xee>
			SPI4_PCLK_DI();
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c8:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80009ce:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009d0:	e014      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI5)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <SPI_PeriClockControl+0x138>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d106      	bne.n	80009e8 <SPI_PeriClockControl+0x104>
			SPI5_PCLK_DI();
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	4a0b      	ldr	r2, [pc, #44]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80009e4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009e6:	e009      	b.n	80009fc <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI6)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <SPI_PeriClockControl+0x13c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d105      	bne.n	80009fc <SPI_PeriClockControl+0x118>
			SPI6_PCLK_DI();
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f4:	4a05      	ldr	r2, [pc, #20]	@ (8000a0c <SPI_PeriClockControl+0x128>)
 80009f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80009fa:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40013000 	.word	0x40013000
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40003800 	.word	0x40003800
 8000a14:	40003c00 	.word	0x40003c00
 8000a18:	40013400 	.word	0x40013400
 8000a1c:	40015000 	.word	0x40015000
 8000a20:	40015400 	.word	0x40015400

08000a24 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff56 	bl	80008e4 <SPI_PeriClockControl>

	// First, configure SPI_CR1 register (configure "TempReg" as "CR1")
	uint32_t tempreg = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]

	/* 1. configure the device mode (MSTR bit), initializing to 0 (slave configuration) */
	tempreg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	791b      	ldrb	r3, [r3, #4]
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	68fa      	ldr	r2, [r7, #12]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60fb      	str	r3, [r7, #12]

	/* 2. configure the BusConfig */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) //full-duplex
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	795b      	ldrb	r3, [r3, #5]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d104      	bne.n	8000a5a <SPI_Init+0x36>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	e014      	b.n	8000a84 <SPI_Init+0x60>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) //half-duplex
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	795b      	ldrb	r3, [r3, #5]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d104      	bne.n	8000a6c <SPI_Init+0x48>
	{
		//BIDI mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e00b      	b.n	8000a84 <SPI_Init+0x60>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) //Simplex, Rx-Only
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	795b      	ldrb	r3, [r3, #5]
 8000a70:	2b03      	cmp	r3, #3
 8000a72:	d107      	bne.n	8000a84 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000a7a:	60fb      	str	r3, [r7, #12]
		//Rx-Only bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a82:	60fb      	str	r3, [r7, #12]
	}

	/* 3. configure the SclkSpeed (BAUD RATE) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	799b      	ldrb	r3, [r3, #6]
 8000a88:	00db      	lsls	r3, r3, #3
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	60fb      	str	r3, [r7, #12]


	/* 4. configure the SPI_DFF (SPI_CRCL in f767xx) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	79db      	ldrb	r3, [r3, #7]
 8000a94:	02db      	lsls	r3, r3, #11
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]

	/* 5. configure the SPI_CPOL */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7a1b      	ldrb	r3, [r3, #8]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

	/* 6. configure the SPI_CPHA */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7a5b      	ldrb	r3, [r3, #9]
 8000aac:	461a      	mov	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]

	/* 7. configure the SPI_SSM */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_SSM);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	79db      	ldrb	r3, [r3, #7]
 8000ab8:	025b      	lsls	r3, r3, #9
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	601a      	str	r2, [r3, #0]

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <SPI_GetFlagStatus>:
		SPI6_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
 	if(pSPIx->SR & FlagName) // flag name actually gives masking info, see spi_driver.h @SPI_FLAG
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689a      	ldr	r2, [r3, #8]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET; // reset = 0
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	//SendData is a blocking call, only return when finished
	while(Len > 0)
 8000b04:	e027      	b.n	8000b56 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set (Transmit buffer is empty)
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 8000b06:	bf00      	nop
 8000b08:	2102      	movs	r1, #2
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff ffe0 	bl	8000ad0 <SPI_GetFlagStatus>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f8      	beq.n	8000b08 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1 (DFF in f407 = CRCL in f767)
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d00e      	beq.n	8000b40 <SPI_SendData+0x48>
		{
			// 16-bit CRC length

			// 2-1 load the data into DR
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	60da      	str	r2, [r3, #12]

			// 2-2 sending 2 bytes of data, length - 2
			Len--;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	607b      	str	r3, [r7, #4]
			Len--;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	607b      	str	r3, [r7, #4]

			// 2-3 buffer should increase by 2
			(uint16_t*) pTxBuffer++;
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	e00a      	b.n	8000b56 <SPI_SendData+0x5e>
		}
		else
		{
			// 8-bit CRC length
			pSPIx->DR = *pTxBuffer; //didn't need type casting
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	60da      	str	r2, [r3, #12]
			Len--;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
			pTxBuffer++; //increase by 1
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	3301      	adds	r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1d4      	bne.n	8000b06 <SPI_SendData+0xe>
		}
	}

}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <__libc_init_array>:
 8000b68:	b570      	push	{r4, r5, r6, lr}
 8000b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8000ba0 <__libc_init_array+0x38>)
 8000b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8000ba4 <__libc_init_array+0x3c>)
 8000b6e:	1b64      	subs	r4, r4, r5
 8000b70:	10a4      	asrs	r4, r4, #2
 8000b72:	2600      	movs	r6, #0
 8000b74:	42a6      	cmp	r6, r4
 8000b76:	d109      	bne.n	8000b8c <__libc_init_array+0x24>
 8000b78:	4d0b      	ldr	r5, [pc, #44]	@ (8000ba8 <__libc_init_array+0x40>)
 8000b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8000bac <__libc_init_array+0x44>)
 8000b7c:	f000 f818 	bl	8000bb0 <_init>
 8000b80:	1b64      	subs	r4, r4, r5
 8000b82:	10a4      	asrs	r4, r4, #2
 8000b84:	2600      	movs	r6, #0
 8000b86:	42a6      	cmp	r6, r4
 8000b88:	d105      	bne.n	8000b96 <__libc_init_array+0x2e>
 8000b8a:	bd70      	pop	{r4, r5, r6, pc}
 8000b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b90:	4798      	blx	r3
 8000b92:	3601      	adds	r6, #1
 8000b94:	e7ee      	b.n	8000b74 <__libc_init_array+0xc>
 8000b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b9a:	4798      	blx	r3
 8000b9c:	3601      	adds	r6, #1
 8000b9e:	e7f2      	b.n	8000b86 <__libc_init_array+0x1e>
 8000ba0:	08000bdc 	.word	0x08000bdc
 8000ba4:	08000bdc 	.word	0x08000bdc
 8000ba8:	08000bdc 	.word	0x08000bdc
 8000bac:	08000be0 	.word	0x08000be0

08000bb0 <_init>:
 8000bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bb2:	bf00      	nop
 8000bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bb6:	bc08      	pop	{r3}
 8000bb8:	469e      	mov	lr, r3
 8000bba:	4770      	bx	lr

08000bbc <_fini>:
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bbe:	bf00      	nop
 8000bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bc2:	bc08      	pop	{r3}
 8000bc4:	469e      	mov	lr, r3
 8000bc6:	4770      	bx	lr

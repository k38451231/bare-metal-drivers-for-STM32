
stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002424  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08002624  08002624  00003624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800274c  0800274c  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800274c  0800274c  0000374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002754  08002754  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002754  08002754  00003754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002758  08002758  00003758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800275c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000068  080027c4  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080027c4  00004280  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016b7  00000000  00000000  00004092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000055a  00000000  00000000  00005749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00005ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000130  00000000  00000000  00005e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000028a0  00000000  00000000  00005f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e95  00000000  00000000  00008818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000aab4  00000000  00000000  0000a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00015161  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000011a0  00000000  00000000  000151a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00016344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000068 	.word	0x20000068
 800021c:	00000000 	.word	0x00000000
 8000220:	0800260c 	.word	0x0800260c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000006c 	.word	0x2000006c
 800023c:	0800260c 	.word	0x0800260c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <SPI1_GPIOInits>:
 * PA4 --> SPI1_NSS
 * PB3 --> SPI1_SCK
 * PB4 --> SPI1_MISO
 * PB5 --> SPI1_MOSI
 */
void SPI1_GPIOInits(void){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80002f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000360 <SPI1_GPIOInits+0x70>)
 80002f8:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80002fa:	2302      	movs	r3, #2
 80002fc:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80002fe:	2305      	movs	r3, #5
 8000300:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000302:	2300      	movs	r3, #0
 8000304:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000306:	2300      	movs	r3, #0
 8000308:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800030a:	2302      	movs	r3, #2
 800030c:	72bb      	strb	r3, [r7, #10]

	/* SCLK */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800030e:	2303      	movs	r3, #3
 8000310:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fbbf 	bl	8000a98 <GPIO_Init>

	/* MOSI */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 800031a:	2305      	movs	r3, #5
 800031c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	4618      	mov	r0, r3
 8000322:	f000 fbb9 	bl	8000a98 <GPIO_Init>

	/* MISO */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000326:	2304      	movs	r3, #4
 8000328:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4618      	mov	r0, r3
 800032e:	f000 fbb3 	bl	8000a98 <GPIO_Init>

	/* NSS  */
	SPIPins.pGPIOx = GPIOA;
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <SPI1_GPIOInits+0x74>)
 8000334:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000336:	2302      	movs	r3, #2
 8000338:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800033a:	2305      	movs	r3, #5
 800033c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800033e:	2300      	movs	r3, #0
 8000340:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000342:	2300      	movs	r3, #0
 8000344:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000346:	2302      	movs	r3, #2
 8000348:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 800034a:	2304      	movs	r3, #4
 800034c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	4618      	mov	r0, r3
 8000352:	f000 fba1 	bl	8000a98 <GPIO_Init>

}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40020400 	.word	0x40020400
 8000364:	40020000 	.word	0x40020000

08000368 <SPI1_Inits>:



void SPI1_Inits(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1Handle;

	SPI1Handle.pSPIx = SPI1;
 800036e:	4b0c      	ldr	r3, [pc, #48]	@ (80003a0 <SPI1_Inits+0x38>)
 8000370:	603b      	str	r3, [r7, #0]
	SPI1Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD; //FULL-duplex
 8000372:	2301      	movs	r3, #1
 8000374:	717b      	strb	r3, [r7, #5]
	SPI1Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000376:	2301      	movs	r3, #1
 8000378:	713b      	strb	r3, [r7, #4]
	SPI1Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // Serial clock of 2M Hz
 800037a:	2302      	movs	r3, #2
 800037c:	71bb      	strb	r3, [r7, #6]
	SPI1Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800037e:	2300      	movs	r3, #0
 8000380:	71fb      	strb	r3, [r7, #7]
	SPI1Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000382:	2300      	movs	r3, #0
 8000384:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000386:	2300      	movs	r3, #0
 8000388:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //using hardware slave management
 800038a:	2300      	movs	r3, #0
 800038c:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1Handle);
 800038e:	463b      	mov	r3, r7
 8000390:	4618      	mov	r0, r3
 8000392:	f000 fde7 	bl	8000f64 <SPI_Init>
}
 8000396:	bf00      	nop
 8000398:	3720      	adds	r7, #32
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40013000 	.word	0x40013000

080003a4 <GPIOButtonInit>:

void GPIOButtonInit(){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b084      	sub	sp, #16
 80003a8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Btn;
	/* USER button on PC13, Pressed -> HIGH */
	/* don't need to care out type cause Button is input */
	GPIO_Btn.pGPIOx = GPIOC;
 80003aa:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <GPIOButtonInit+0x2c>)
 80003ac:	607b      	str	r3, [r7, #4]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80003ae:	230d      	movs	r3, #13
 80003b0:	723b      	strb	r3, [r7, #8]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80003b2:	2300      	movs	r3, #0
 80003b4:	727b      	strb	r3, [r7, #9]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80003b6:	2302      	movs	r3, #2
 80003b8:	72bb      	strb	r3, [r7, #10]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; //btn has external pull down, don't care internal
 80003ba:	2300      	movs	r3, #0
 80003bc:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Btn);
 80003be:	1d3b      	adds	r3, r7, #4
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fb69 	bl	8000a98 <GPIO_Init>
}
 80003c6:	bf00      	nop
 80003c8:	3710      	adds	r7, #16
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40020800 	.word	0x40020800

080003d4 <delay>:

void delay(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i<500000/2 ; i++);
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	e002      	b.n	80003e6 <delay+0x12>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	3301      	adds	r3, #1
 80003e4:	607b      	str	r3, [r7, #4]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a04      	ldr	r2, [pc, #16]	@ (80003fc <delay+0x28>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d9f8      	bls.n	80003e0 <delay+0xc>
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	0003d08f 	.word	0x0003d08f

08000400 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	4603      	mov	r3, r0
 8000408:	71fb      	strb	r3, [r7, #7]
	if (ackbyte == 0xF5)
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	2bf5      	cmp	r3, #245	@ 0xf5
 800040e:	d101      	bne.n	8000414 <SPI_VerifyResponse+0x14>
	{
		return 1;  //ack
 8000410:	2301      	movs	r3, #1
 8000412:	e000      	b.n	8000416 <SPI_VerifyResponse+0x16>
	}
		return 0;  //nack
 8000414:	2300      	movs	r3, #0
}
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr

08000420 <main>:

int main(void){
 8000420:	b5b0      	push	{r4, r5, r7, lr}
 8000422:	b08e      	sub	sp, #56	@ 0x38
 8000424:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000426:	f002 f86d 	bl	8002504 <initialise_monitor_handles>
	printf("application is running\n");
 800042a:	48ae      	ldr	r0, [pc, #696]	@ (80006e4 <main+0x2c4>)
 800042c:	f000 ffd2 	bl	80013d4 <puts>

	//char user_data[] = "Hello world";
	uint8_t dummy_write = 0xff;
 8000430:	23ff      	movs	r3, #255	@ 0xff
 8000432:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t dummy_read;

	GPIOButtonInit();
 8000436:	f7ff ffb5 	bl	80003a4 <GPIOButtonInit>
	// this function is used to initialize the GPIO pins to behave like SPI2 pins (alternate functions)
	SPI1_GPIOInits();
 800043a:	f7ff ff59 	bl	80002f0 <SPI1_GPIOInits>
	SPI1_Inits();
 800043e:	f7ff ff93 	bl	8000368 <SPI1_Inits>
	printf("SPI 1 initialized\n");
 8000442:	48a9      	ldr	r0, [pc, #676]	@ (80006e8 <main+0x2c8>)
 8000444:	f000 ffc6 	bl	80013d4 <puts>
	 * enable SSOE=1 make NSS output enable
	 * the NSS pin is automatically managed by the hardware
	 * i.e when SPE=1, NSS will be pulled to low
	 * when SPE=0, NSS will be pulled to high
	 */
	SPI_SSOEConfig(SPI1, ENABLE);
 8000448:	2101      	movs	r1, #1
 800044a:	48a8      	ldr	r0, [pc, #672]	@ (80006ec <main+0x2cc>)
 800044c:	f000 fe45 	bl	80010da <SPI_SSOEConfig>

	while(1)
	{
		while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000450:	bf00      	nop
 8000452:	210d      	movs	r1, #13
 8000454:	48a6      	ldr	r0, [pc, #664]	@ (80006f0 <main+0x2d0>)
 8000456:	f000 fccf 	bl	8000df8 <GPIO_ReadFromInputPin>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d0f8      	beq.n	8000452 <main+0x32>
		delay();
 8000460:	f7ff ffb8 	bl	80003d4 <delay>

		// Enable the SPI2 peripheral (SPE bit in SPI_CR1 register)
		SPI_PeripheralControl(SPI1, ENABLE);
 8000464:	2101      	movs	r1, #1
 8000466:	48a1      	ldr	r0, [pc, #644]	@ (80006ec <main+0x2cc>)
 8000468:	f000 fe1c 	bl	80010a4 <SPI_PeripheralControl>

		/****************************************************
		 * 1. CMD_LED_CTRL <pin no(1)> <value(1)>
		 ***************************************************/
		uint8_t commandcode = COMMAND_LED_CTRL;
 800046c:	2350      	movs	r3, #80	@ 0x50
 800046e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		uint8_t ackbyte;
		uint8_t args[2]; //store pin no. and value

		//send command
		SPI_SendData(SPI1, &commandcode, 1);
 8000472:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000476:	2201      	movs	r2, #1
 8000478:	4619      	mov	r1, r3
 800047a:	489c      	ldr	r0, [pc, #624]	@ (80006ec <main+0x2cc>)
 800047c:	f000 fddb 	bl	8001036 <SPI_SendData>
		//when you send 1 byte, you also receive 1 byte
		//do dummy read to clear RXNE flag
		SPI_ReceiveData(SPI1, &dummy_read, 1);
 8000480:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000484:	2201      	movs	r2, #1
 8000486:	4619      	mov	r1, r3
 8000488:	4898      	ldr	r0, [pc, #608]	@ (80006ec <main+0x2cc>)
 800048a:	f000 fe41 	bl	8001110 <SPI_ReceiveData>

		//send dummy bits (1byte) to fetch the response (ACK/NACK) from the slave
		SPI_SendData(SPI1, &dummy_write, 1);
 800048e:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000492:	2201      	movs	r2, #1
 8000494:	4619      	mov	r1, r3
 8000496:	4895      	ldr	r0, [pc, #596]	@ (80006ec <main+0x2cc>)
 8000498:	f000 fdcd 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &ackbyte, 1);
 800049c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004a0:	2201      	movs	r2, #1
 80004a2:	4619      	mov	r1, r3
 80004a4:	4891      	ldr	r0, [pc, #580]	@ (80006ec <main+0x2cc>)
 80004a6:	f000 fe33 	bl	8001110 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 80004aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ffa6 	bl	8000400 <SPI_VerifyResponse>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d00f      	beq.n	80004da <main+0xba>
		{
			//send arguments
			args[0] = LED_PIN;
 80004ba:	2309      	movs	r3, #9
 80004bc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			args[1] = LED_ON;
 80004c0:	2301      	movs	r3, #1
 80004c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			SPI_SendData(SPI1, args, 2);
 80004c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ca:	2202      	movs	r2, #2
 80004cc:	4619      	mov	r1, r3
 80004ce:	4887      	ldr	r0, [pc, #540]	@ (80006ec <main+0x2cc>)
 80004d0:	f000 fdb1 	bl	8001036 <SPI_SendData>
			printf("COMMAND_LED_CTRL executed\n");
 80004d4:	4887      	ldr	r0, [pc, #540]	@ (80006f4 <main+0x2d4>)
 80004d6:	f000 ff7d 	bl	80013d4 <puts>
		}

		/****************************************************
		 * 2. CMD_SENSOR_READ < analog pin number(1) >
		 ***************************************************/
		while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 80004da:	bf00      	nop
 80004dc:	210d      	movs	r1, #13
 80004de:	4884      	ldr	r0, [pc, #528]	@ (80006f0 <main+0x2d0>)
 80004e0:	f000 fc8a 	bl	8000df8 <GPIO_ReadFromInputPin>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0f8      	beq.n	80004dc <main+0xbc>
		delay();
 80004ea:	f7ff ff73 	bl	80003d4 <delay>

		commandcode = COMMAND_SENSOR_READ;
 80004ee:	2351      	movs	r3, #81	@ 0x51
 80004f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		SPI_SendData(SPI1, &commandcode, 1);   // send command
 80004f4:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	487b      	ldr	r0, [pc, #492]	@ (80006ec <main+0x2cc>)
 80004fe:	f000 fd9a 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &dummy_read, 1); // clear RXNE
 8000502:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	4878      	ldr	r0, [pc, #480]	@ (80006ec <main+0x2cc>)
 800050c:	f000 fe00 	bl	8001110 <SPI_ReceiveData>

		SPI_SendData(SPI1, &dummy_write, 1);   //send dummy bits
 8000510:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000514:	2201      	movs	r2, #1
 8000516:	4619      	mov	r1, r3
 8000518:	4874      	ldr	r0, [pc, #464]	@ (80006ec <main+0x2cc>)
 800051a:	f000 fd8c 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &ackbyte, 1);    //fetch the  (ACK/NACK)
 800051e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	4871      	ldr	r0, [pc, #452]	@ (80006ec <main+0x2cc>)
 8000528:	f000 fdf2 	bl	8001110 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 800052c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff ff65 	bl	8000400 <SPI_VerifyResponse>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d024      	beq.n	8000586 <main+0x166>
		{
			//send arguments
			args[0] = ANALOG_PIN0;
 800053c:	2300      	movs	r3, #0
 800053e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			SPI_SendData(SPI1, args, 1);
 8000542:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000546:	2201      	movs	r2, #1
 8000548:	4619      	mov	r1, r3
 800054a:	4868      	ldr	r0, [pc, #416]	@ (80006ec <main+0x2cc>)
 800054c:	f000 fd73 	bl	8001036 <SPI_SendData>

			SPI_ReceiveData(SPI1, &dummy_read, 1); // clear RXNE
 8000550:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	4864      	ldr	r0, [pc, #400]	@ (80006ec <main+0x2cc>)
 800055a:	f000 fdd9 	bl	8001110 <SPI_ReceiveData>

			//insert delay so slave can ready with the data (slave does ADC conversion)
			delay();
 800055e:	f7ff ff39 	bl	80003d4 <delay>

			SPI_SendData(SPI1, &dummy_write, 1);   //send dummy
 8000562:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	4860      	ldr	r0, [pc, #384]	@ (80006ec <main+0x2cc>)
 800056c:	f000 fd63 	bl	8001036 <SPI_SendData>
			uint8_t analog_read;
			SPI_ReceiveData(SPI1, &analog_read, 1);    //fetch the analog_read
 8000570:	1cfb      	adds	r3, r7, #3
 8000572:	2201      	movs	r2, #1
 8000574:	4619      	mov	r1, r3
 8000576:	485d      	ldr	r0, [pc, #372]	@ (80006ec <main+0x2cc>)
 8000578:	f000 fdca 	bl	8001110 <SPI_ReceiveData>
			printf("COMMAND_SENSOR_READ : %d\n", analog_read);
 800057c:	78fb      	ldrb	r3, [r7, #3]
 800057e:	4619      	mov	r1, r3
 8000580:	485d      	ldr	r0, [pc, #372]	@ (80006f8 <main+0x2d8>)
 8000582:	f000 febf 	bl	8001304 <iprintf>
		}

		/****************************************************
		 * 3. CMD_LED_READ < pin number(1) >
		 ***************************************************/
		while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000586:	bf00      	nop
 8000588:	210d      	movs	r1, #13
 800058a:	4859      	ldr	r0, [pc, #356]	@ (80006f0 <main+0x2d0>)
 800058c:	f000 fc34 	bl	8000df8 <GPIO_ReadFromInputPin>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f8      	beq.n	8000588 <main+0x168>
		delay();
 8000596:	f7ff ff1d 	bl	80003d4 <delay>

		commandcode = COMMAND_LED_READ;
 800059a:	2352      	movs	r3, #82	@ 0x52
 800059c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		SPI_SendData(SPI1, &commandcode, 1);   // send command
 80005a0:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 80005a4:	2201      	movs	r2, #1
 80005a6:	4619      	mov	r1, r3
 80005a8:	4850      	ldr	r0, [pc, #320]	@ (80006ec <main+0x2cc>)
 80005aa:	f000 fd44 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &dummy_read, 1); // clear RXNE
 80005ae:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80005b2:	2201      	movs	r2, #1
 80005b4:	4619      	mov	r1, r3
 80005b6:	484d      	ldr	r0, [pc, #308]	@ (80006ec <main+0x2cc>)
 80005b8:	f000 fdaa 	bl	8001110 <SPI_ReceiveData>

		SPI_SendData(SPI1, &dummy_write, 1);   //send dummy bits
 80005bc:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80005c0:	2201      	movs	r2, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	4849      	ldr	r0, [pc, #292]	@ (80006ec <main+0x2cc>)
 80005c6:	f000 fd36 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &ackbyte, 1);    //fetch the  (ACK/NACK)
 80005ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005ce:	2201      	movs	r2, #1
 80005d0:	4619      	mov	r1, r3
 80005d2:	4846      	ldr	r0, [pc, #280]	@ (80006ec <main+0x2cc>)
 80005d4:	f000 fd9c 	bl	8001110 <SPI_ReceiveData>

		if(SPI_VerifyResponse(ackbyte))
 80005d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff0f 	bl	8000400 <SPI_VerifyResponse>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d024      	beq.n	8000632 <main+0x212>
		{
			//send arguments
			args[0] = LED_PIN;
 80005e8:	2309      	movs	r3, #9
 80005ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			SPI_SendData(SPI1, args, 1);
 80005ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005f2:	2201      	movs	r2, #1
 80005f4:	4619      	mov	r1, r3
 80005f6:	483d      	ldr	r0, [pc, #244]	@ (80006ec <main+0x2cc>)
 80005f8:	f000 fd1d 	bl	8001036 <SPI_SendData>

			SPI_ReceiveData(SPI1, &dummy_read, 1); // clear RXNE
 80005fc:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000600:	2201      	movs	r2, #1
 8000602:	4619      	mov	r1, r3
 8000604:	4839      	ldr	r0, [pc, #228]	@ (80006ec <main+0x2cc>)
 8000606:	f000 fd83 	bl	8001110 <SPI_ReceiveData>

			//insert delay so slave can ready with the data (slave does ADC conversion)
			delay();
 800060a:	f7ff fee3 	bl	80003d4 <delay>

			SPI_SendData(SPI1, &dummy_write, 1);   //send dummy
 800060e:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	4835      	ldr	r0, [pc, #212]	@ (80006ec <main+0x2cc>)
 8000618:	f000 fd0d 	bl	8001036 <SPI_SendData>
			uint8_t led_status;
			SPI_ReceiveData(SPI1, &led_status, 1);    //fetch the analog_read
 800061c:	1cbb      	adds	r3, r7, #2
 800061e:	2201      	movs	r2, #1
 8000620:	4619      	mov	r1, r3
 8000622:	4832      	ldr	r0, [pc, #200]	@ (80006ec <main+0x2cc>)
 8000624:	f000 fd74 	bl	8001110 <SPI_ReceiveData>
			printf("COMMAND_LED_READ %d\n", led_status);
 8000628:	78bb      	ldrb	r3, [r7, #2]
 800062a:	4619      	mov	r1, r3
 800062c:	4833      	ldr	r0, [pc, #204]	@ (80006fc <main+0x2dc>)
 800062e:	f000 fe69 	bl	8001304 <iprintf>


		/****************************************************
		 * 4. CMD_PRINT <Len(2)> < message >
		 ***************************************************/
		while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000632:	bf00      	nop
 8000634:	210d      	movs	r1, #13
 8000636:	482e      	ldr	r0, [pc, #184]	@ (80006f0 <main+0x2d0>)
 8000638:	f000 fbde 	bl	8000df8 <GPIO_ReadFromInputPin>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f8      	beq.n	8000634 <main+0x214>
		delay();
 8000642:	f7ff fec7 	bl	80003d4 <delay>

		commandcode = COMMAND_PRINT;
 8000646:	2353      	movs	r3, #83	@ 0x53
 8000648:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		SPI_SendData(SPI1, &commandcode, 1);   // send command
 800064c:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8000650:	2201      	movs	r2, #1
 8000652:	4619      	mov	r1, r3
 8000654:	4825      	ldr	r0, [pc, #148]	@ (80006ec <main+0x2cc>)
 8000656:	f000 fcee 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &dummy_read, 1); // clear RXNE
 800065a:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800065e:	2201      	movs	r2, #1
 8000660:	4619      	mov	r1, r3
 8000662:	4822      	ldr	r0, [pc, #136]	@ (80006ec <main+0x2cc>)
 8000664:	f000 fd54 	bl	8001110 <SPI_ReceiveData>

		SPI_SendData(SPI1, &dummy_write, 1);   //send dummy bits
 8000668:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800066c:	2201      	movs	r2, #1
 800066e:	4619      	mov	r1, r3
 8000670:	481e      	ldr	r0, [pc, #120]	@ (80006ec <main+0x2cc>)
 8000672:	f000 fce0 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &ackbyte, 1);    //fetch the  (ACK/NACK)
 8000676:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800067a:	2201      	movs	r2, #1
 800067c:	4619      	mov	r1, r3
 800067e:	481b      	ldr	r0, [pc, #108]	@ (80006ec <main+0x2cc>)
 8000680:	f000 fd46 	bl	8001110 <SPI_ReceiveData>

		uint8_t message[] = "Hello how are you ??";
 8000684:	4b1e      	ldr	r3, [pc, #120]	@ (8000700 <main+0x2e0>)
 8000686:	f107 0410 	add.w	r4, r7, #16
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000694:	6020      	str	r0, [r4, #0]
 8000696:	3404      	adds	r4, #4
 8000698:	7021      	strb	r1, [r4, #0]
		if(SPI_VerifyResponse(ackbyte))
 800069a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff feae 	bl	8000400 <SPI_VerifyResponse>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d048      	beq.n	800073c <main+0x31c>
		{
			//send arguments
			args[0] = strlen((char*)message);
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fdc6 	bl	8000240 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			SPI_SendData(SPI1, args, 1); // first, sending the length
 80006bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006c0:	2201      	movs	r2, #1
 80006c2:	4619      	mov	r1, r3
 80006c4:	4809      	ldr	r0, [pc, #36]	@ (80006ec <main+0x2cc>)
 80006c6:	f000 fcb6 	bl	8001036 <SPI_SendData>
			SPI_ReceiveData(SPI1, &dummy_read, 1); // clear RXNE
 80006ca:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80006ce:	2201      	movs	r2, #1
 80006d0:	4619      	mov	r1, r3
 80006d2:	4806      	ldr	r0, [pc, #24]	@ (80006ec <main+0x2cc>)
 80006d4:	f000 fd1c 	bl	8001110 <SPI_ReceiveData>

			//insert delay so slave can ready with the data (slave does ADC conversion)
			delay();
 80006d8:	f7ff fe7c 	bl	80003d4 <delay>

			for (int i = 0; i < args[0]; i++){
 80006dc:	2300      	movs	r3, #0
 80006de:	637b      	str	r3, [r7, #52]	@ 0x34
 80006e0:	e023      	b.n	800072a <main+0x30a>
 80006e2:	bf00      	nop
 80006e4:	08002624 	.word	0x08002624
 80006e8:	0800263c 	.word	0x0800263c
 80006ec:	40013000 	.word	0x40013000
 80006f0:	40020800 	.word	0x40020800
 80006f4:	08002650 	.word	0x08002650
 80006f8:	0800266c 	.word	0x0800266c
 80006fc:	08002688 	.word	0x08002688
 8000700:	080026e8 	.word	0x080026e8
				SPI_SendData(SPI1, &message[i], 1);
 8000704:	f107 0210 	add.w	r2, r7, #16
 8000708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800070a:	4413      	add	r3, r2
 800070c:	2201      	movs	r2, #1
 800070e:	4619      	mov	r1, r3
 8000710:	483b      	ldr	r0, [pc, #236]	@ (8000800 <main+0x3e0>)
 8000712:	f000 fc90 	bl	8001036 <SPI_SendData>
				SPI_ReceiveData(SPI1, &dummy_read, 1);
 8000716:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	4838      	ldr	r0, [pc, #224]	@ (8000800 <main+0x3e0>)
 8000720:	f000 fcf6 	bl	8001110 <SPI_ReceiveData>
			for (int i = 0; i < args[0]; i++){
 8000724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000726:	3301      	adds	r3, #1
 8000728:	637b      	str	r3, [r7, #52]	@ 0x34
 800072a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800072e:	461a      	mov	r2, r3
 8000730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000732:	4293      	cmp	r3, r2
 8000734:	dbe6      	blt.n	8000704 <main+0x2e4>
			}

			printf("COMMAND_PRINT Executed \n");
 8000736:	4833      	ldr	r0, [pc, #204]	@ (8000804 <main+0x3e4>)
 8000738:	f000 fe4c 	bl	80013d4 <puts>


		/****************************************************
		 * 5. CMD_ID_READ
		 ***************************************************/
		while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 800073c:	bf00      	nop
 800073e:	210d      	movs	r1, #13
 8000740:	4831      	ldr	r0, [pc, #196]	@ (8000808 <main+0x3e8>)
 8000742:	f000 fb59 	bl	8000df8 <GPIO_ReadFromInputPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d0f8      	beq.n	800073e <main+0x31e>
		delay();
 800074c:	f7ff fe42 	bl	80003d4 <delay>

		commandcode = COMMAND_ID_READ;
 8000750:	2354      	movs	r3, #84	@ 0x54
 8000752:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

		SPI_SendData(SPI1, &commandcode, 1);   // send command
 8000756:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 800075a:	2201      	movs	r2, #1
 800075c:	4619      	mov	r1, r3
 800075e:	4828      	ldr	r0, [pc, #160]	@ (8000800 <main+0x3e0>)
 8000760:	f000 fc69 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &dummy_read, 1); // clear RXNE
 8000764:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	4824      	ldr	r0, [pc, #144]	@ (8000800 <main+0x3e0>)
 800076e:	f000 fccf 	bl	8001110 <SPI_ReceiveData>

		SPI_SendData(SPI1, &dummy_write, 1);   //send dummy bits
 8000772:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	4821      	ldr	r0, [pc, #132]	@ (8000800 <main+0x3e0>)
 800077c:	f000 fc5b 	bl	8001036 <SPI_SendData>
		SPI_ReceiveData(SPI1, &ackbyte, 1);    //fetch the  (ACK/NACK)
 8000780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	481d      	ldr	r0, [pc, #116]	@ (8000800 <main+0x3e0>)
 800078a:	f000 fcc1 	bl	8001110 <SPI_ReceiveData>

		uint8_t id[11];
		uint32_t i=0;
 800078e:	2300      	movs	r3, #0
 8000790:	633b      	str	r3, [r7, #48]	@ 0x30

		if(SPI_VerifyResponse(ackbyte))
 8000792:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe32 	bl	8000400 <SPI_VerifyResponse>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d01e      	beq.n	80007e0 <main+0x3c0>
		{
			//read 10 bytes id from the slave
			for(  i = 0 ; i < 10 ; i++)
 80007a2:	2300      	movs	r3, #0
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80007a6:	e011      	b.n	80007cc <main+0x3ac>
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI1, &dummy_write, 1);
 80007a8:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80007ac:	2201      	movs	r2, #1
 80007ae:	4619      	mov	r1, r3
 80007b0:	4813      	ldr	r0, [pc, #76]	@ (8000800 <main+0x3e0>)
 80007b2:	f000 fc40 	bl	8001036 <SPI_SendData>
				SPI_ReceiveData(SPI1, &id[i], 1);
 80007b6:	1d3a      	adds	r2, r7, #4
 80007b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ba:	4413      	add	r3, r2
 80007bc:	2201      	movs	r2, #1
 80007be:	4619      	mov	r1, r3
 80007c0:	480f      	ldr	r0, [pc, #60]	@ (8000800 <main+0x3e0>)
 80007c2:	f000 fca5 	bl	8001110 <SPI_ReceiveData>
			for(  i = 0 ; i < 10 ; i++)
 80007c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007c8:	3301      	adds	r3, #1
 80007ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80007cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80007ce:	2b09      	cmp	r3, #9
 80007d0:	d9ea      	bls.n	80007a8 <main+0x388>
			}

			id[10] = '\0';
 80007d2:	2300      	movs	r3, #0
 80007d4:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <main+0x3ec>)
 80007dc:	f000 fd92 	bl	8001304 <iprintf>

		/*
		 * before closing, first confirm that SPI is not busy
		 * check SPI_SR, busy flag
		 */
		while(SPI_GetFlagStatus(SPI1, SPI_BSY_FLAG));
 80007e0:	bf00      	nop
 80007e2:	2180      	movs	r1, #128	@ 0x80
 80007e4:	4806      	ldr	r0, [pc, #24]	@ (8000800 <main+0x3e0>)
 80007e6:	f000 fc13 	bl	8001010 <SPI_GetFlagStatus>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f8      	bne.n	80007e2 <main+0x3c2>
		SPI_PeripheralControl(SPI1, DISABLE);
 80007f0:	2100      	movs	r1, #0
 80007f2:	4803      	ldr	r0, [pc, #12]	@ (8000800 <main+0x3e0>)
 80007f4:	f000 fc56 	bl	80010a4 <SPI_PeripheralControl>

		printf("SPI Communication Closed\n");
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <main+0x3f0>)
 80007fa:	f000 fdeb 	bl	80013d4 <puts>
	{
 80007fe:	e627      	b.n	8000450 <main+0x30>
 8000800:	40013000 	.word	0x40013000
 8000804:	080026a0 	.word	0x080026a0
 8000808:	40020800 	.word	0x40020800
 800080c:	080026b8 	.word	0x080026b8
 8000810:	080026cc 	.word	0x080026cc

08000814 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000814:	480d      	ldr	r0, [pc, #52]	@ (800084c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000816:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000818:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480c      	ldr	r0, [pc, #48]	@ (8000850 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490d      	ldr	r1, [pc, #52]	@ (8000854 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0d      	ldr	r2, [pc, #52]	@ (8000858 <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0a      	ldr	r2, [pc, #40]	@ (800085c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0a      	ldr	r4, [pc, #40]	@ (8000860 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000842:	f000 fef5 	bl	8001630 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fdeb 	bl	8000420 <main>

0800084a <LoopForever>:

LoopForever:
  b LoopForever
 800084a:	e7fe      	b.n	800084a <LoopForever>
  ldr   r0, =_estack
 800084c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000854:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000858:	0800275c 	.word	0x0800275c
  ldr r2, =_sbss
 800085c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000860:	20000280 	.word	0x20000280

08000864 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000864:	e7fe      	b.n	8000864 <ADC_IRQHandler>
	...

08000868 <GPIO_PeriClockControl>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	2b01      	cmp	r3, #1
 8000878:	d178      	bne.n	800096c <GPIO_PeriClockControl+0x104>
	{
		if(pGPIOx == GPIOA)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a7a      	ldr	r2, [pc, #488]	@ (8000a68 <GPIO_PeriClockControl+0x200>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000882:	4b7a      	ldr	r3, [pc, #488]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a79      	ldr	r2, [pc, #484]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
		{
			GPIOK_PCLK_DI();
		}

	}
}
 800088e:	e0e5      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a77      	ldr	r2, [pc, #476]	@ (8000a70 <GPIO_PeriClockControl+0x208>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d106      	bne.n	80008a6 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000898:	4b74      	ldr	r3, [pc, #464]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	4a73      	ldr	r2, [pc, #460]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008a4:	e0da      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4a72      	ldr	r2, [pc, #456]	@ (8000a74 <GPIO_PeriClockControl+0x20c>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80008ae:	4b6f      	ldr	r3, [pc, #444]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a6e      	ldr	r2, [pc, #440]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008ba:	e0cf      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a6e      	ldr	r2, [pc, #440]	@ (8000a78 <GPIO_PeriClockControl+0x210>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d106      	bne.n	80008d2 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80008c4:	4b69      	ldr	r3, [pc, #420]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c8:	4a68      	ldr	r2, [pc, #416]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008ca:	f043 0308 	orr.w	r3, r3, #8
 80008ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008d0:	e0c4      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4a69      	ldr	r2, [pc, #420]	@ (8000a7c <GPIO_PeriClockControl+0x214>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d106      	bne.n	80008e8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80008da:	4b64      	ldr	r3, [pc, #400]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a63      	ldr	r2, [pc, #396]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008e0:	f043 0310 	orr.w	r3, r3, #16
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008e6:	e0b9      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a65      	ldr	r2, [pc, #404]	@ (8000a80 <GPIO_PeriClockControl+0x218>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d106      	bne.n	80008fe <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80008f0:	4b5e      	ldr	r3, [pc, #376]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f4:	4a5d      	ldr	r2, [pc, #372]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80008f6:	f043 0320 	orr.w	r3, r3, #32
 80008fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80008fc:	e0ae      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a60      	ldr	r2, [pc, #384]	@ (8000a84 <GPIO_PeriClockControl+0x21c>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d106      	bne.n	8000914 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000906:	4b59      	ldr	r3, [pc, #356]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a58      	ldr	r2, [pc, #352]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800090c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000912:	e0a3      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a5c      	ldr	r2, [pc, #368]	@ (8000a88 <GPIO_PeriClockControl+0x220>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d106      	bne.n	800092a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800091c:	4b53      	ldr	r3, [pc, #332]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800091e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000920:	4a52      	ldr	r2, [pc, #328]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000926:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000928:	e098      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a57      	ldr	r2, [pc, #348]	@ (8000a8c <GPIO_PeriClockControl+0x224>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 8000932:	4b4e      	ldr	r3, [pc, #312]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	4a4d      	ldr	r2, [pc, #308]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800093e:	e08d      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a53      	ldr	r2, [pc, #332]	@ (8000a90 <GPIO_PeriClockControl+0x228>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000948:	4b48      	ldr	r3, [pc, #288]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800094a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094c:	4a47      	ldr	r2, [pc, #284]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800094e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000952:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000954:	e082      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a4e      	ldr	r2, [pc, #312]	@ (8000a94 <GPIO_PeriClockControl+0x22c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d17e      	bne.n	8000a5c <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 800095e:	4b43      	ldr	r3, [pc, #268]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a42      	ldr	r2, [pc, #264]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000964:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800096a:	e077      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a3e      	ldr	r2, [pc, #248]	@ (8000a68 <GPIO_PeriClockControl+0x200>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d106      	bne.n	8000982 <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 8000974:	4b3d      	ldr	r3, [pc, #244]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000978:	4a3c      	ldr	r2, [pc, #240]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800097a:	f023 0301 	bic.w	r3, r3, #1
 800097e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000980:	e06c      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a3a      	ldr	r2, [pc, #232]	@ (8000a70 <GPIO_PeriClockControl+0x208>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d106      	bne.n	8000998 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 800098a:	4b38      	ldr	r3, [pc, #224]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a37      	ldr	r2, [pc, #220]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000990:	f023 0302 	bic.w	r3, r3, #2
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000996:	e061      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a36      	ldr	r2, [pc, #216]	@ (8000a74 <GPIO_PeriClockControl+0x20c>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d106      	bne.n	80009ae <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 80009a0:	4b32      	ldr	r3, [pc, #200]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a4:	4a31      	ldr	r2, [pc, #196]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009a6:	f023 0304 	bic.w	r3, r3, #4
 80009aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009ac:	e056      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a31      	ldr	r2, [pc, #196]	@ (8000a78 <GPIO_PeriClockControl+0x210>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d106      	bne.n	80009c4 <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 80009b6:	4b2d      	ldr	r3, [pc, #180]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	4a2c      	ldr	r2, [pc, #176]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009bc:	f023 0308 	bic.w	r3, r3, #8
 80009c0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009c2:	e04b      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a7c <GPIO_PeriClockControl+0x214>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d106      	bne.n	80009da <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 80009cc:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d0:	4a26      	ldr	r2, [pc, #152]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009d2:	f023 0310 	bic.w	r3, r3, #16
 80009d6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009d8:	e040      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <GPIO_PeriClockControl+0x218>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d106      	bne.n	80009f0 <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a21      	ldr	r2, [pc, #132]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009e8:	f023 0320 	bic.w	r3, r3, #32
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80009ee:	e035      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a24      	ldr	r2, [pc, #144]	@ (8000a84 <GPIO_PeriClockControl+0x21c>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d106      	bne.n	8000a06 <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 80009fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000a02:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a04:	e02a      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a1f      	ldr	r2, [pc, #124]	@ (8000a88 <GPIO_PeriClockControl+0x220>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d106      	bne.n	8000a1c <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 8000a0e:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a1a:	e01f      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <GPIO_PeriClockControl+0x224>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d106      	bne.n	8000a32 <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a28:	4a10      	ldr	r2, [pc, #64]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000a2e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a30:	e014      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a16      	ldr	r2, [pc, #88]	@ (8000a90 <GPIO_PeriClockControl+0x228>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000a44:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a46:	e009      	b.n	8000a5c <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <GPIO_PeriClockControl+0x22c>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d105      	bne.n	8000a5c <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a54:	4a05      	ldr	r2, [pc, #20]	@ (8000a6c <GPIO_PeriClockControl+0x204>)
 8000a56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000a5a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40020000 	.word	0x40020000
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020400 	.word	0x40020400
 8000a74:	40020800 	.word	0x40020800
 8000a78:	40020c00 	.word	0x40020c00
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40021400 	.word	0x40021400
 8000a84:	40021800 	.word	0x40021800
 8000a88:	40021c00 	.word	0x40021c00
 8000a8c:	40022000 	.word	0x40022000
 8000a90:	40022400 	.word	0x40022400
 8000a94:	40022800 	.word	0x40022800

08000a98 <GPIO_Init>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	/* 1. configure the mode of the gpio pin */
	uint32_t temp = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock for GPIOx
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fedc 	bl	8000868 <GPIO_PeriClockControl>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 	GPIO_MODE_ANALOG){
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	795b      	ldrb	r3, [r3, #5]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d81f      	bhi.n	8000af8 <GPIO_Init+0x60>
		// non-interrupt mode
		// each pin takes 2 bit fields, so we multiply the pin number to 2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	795b      	ldrb	r3, [r3, #5]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	791b      	ldrb	r3, [r3, #4]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	791b      	ldrb	r3, [r3, #4]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	408b      	lsls	r3, r1
 8000ada:	43db      	mvns	r3, r3
 8000adc:	4619      	mov	r1, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6819      	ldr	r1, [r3, #0]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e0da      	b.n	8000cae <GPIO_Init+0x216>
	}
	else{
		//this part for interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	2b04      	cmp	r3, #4
 8000afe:	d117      	bne.n	8000b30 <GPIO_Init+0x98>
		{
			// 1. configure the falling trigger selection register (FTSR) (a register of EXTI)
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b00:	4b51      	ldr	r3, [pc, #324]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	7912      	ldrb	r2, [r2, #4]
 8000b08:	4611      	mov	r1, r2
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	408a      	lsls	r2, r1
 8000b0e:	4611      	mov	r1, r2
 8000b10:	4a4d      	ldr	r2, [pc, #308]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b12:	430b      	orrs	r3, r1
 8000b14:	60d3      	str	r3, [r2, #12]
			// c;ear the corresponding RTSR bit
			EXTI->RTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b16:	4b4c      	ldr	r3, [pc, #304]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	7912      	ldrb	r2, [r2, #4]
 8000b1e:	4611      	mov	r1, r2
 8000b20:	2201      	movs	r2, #1
 8000b22:	408a      	lsls	r2, r1
 8000b24:	43d2      	mvns	r2, r2
 8000b26:	4611      	mov	r1, r2
 8000b28:	4a47      	ldr	r2, [pc, #284]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b2a:	400b      	ands	r3, r1
 8000b2c:	6093      	str	r3, [r2, #8]
 8000b2e:	e035      	b.n	8000b9c <GPIO_Init+0x104>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	795b      	ldrb	r3, [r3, #5]
 8000b34:	2b05      	cmp	r3, #5
 8000b36:	d117      	bne.n	8000b68 <GPIO_Init+0xd0>
		{
			// 1. configure the rising trigger selection register (RTSR)
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b38:	4b43      	ldr	r3, [pc, #268]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	7912      	ldrb	r2, [r2, #4]
 8000b40:	4611      	mov	r1, r2
 8000b42:	2201      	movs	r2, #1
 8000b44:	408a      	lsls	r2, r1
 8000b46:	4611      	mov	r1, r2
 8000b48:	4a3f      	ldr	r2, [pc, #252]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b4a:	430b      	orrs	r3, r1
 8000b4c:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	7912      	ldrb	r2, [r2, #4]
 8000b56:	4611      	mov	r1, r2
 8000b58:	2201      	movs	r2, #1
 8000b5a:	408a      	lsls	r2, r1
 8000b5c:	43d2      	mvns	r2, r2
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4a39      	ldr	r2, [pc, #228]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b62:	400b      	ands	r3, r1
 8000b64:	60d3      	str	r3, [r2, #12]
 8000b66:	e019      	b.n	8000b9c <GPIO_Init+0x104>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	795b      	ldrb	r3, [r3, #5]
 8000b6c:	2b06      	cmp	r3, #6
 8000b6e:	d115      	bne.n	8000b9c <GPIO_Init+0x104>
		{
			// 1. configure both the RTSR and FTSR
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b70:	4b35      	ldr	r3, [pc, #212]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	7912      	ldrb	r2, [r2, #4]
 8000b78:	4611      	mov	r1, r2
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	408a      	lsls	r2, r1
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4a31      	ldr	r2, [pc, #196]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b82:	430b      	orrs	r3, r1
 8000b84:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000b86:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	7912      	ldrb	r2, [r2, #4]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	2201      	movs	r2, #1
 8000b92:	408a      	lsls	r2, r1
 8000b94:	4611      	mov	r1, r2
 8000b96:	4a2c      	ldr	r2, [pc, #176]	@ (8000c48 <GPIO_Init+0x1b0>)
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTI
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	791b      	ldrb	r3, [r3, #4]
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	791b      	ldrb	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a26      	ldr	r2, [pc, #152]	@ (8000c4c <GPIO_Init+0x1b4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d05d      	beq.n	8000c74 <GPIO_Init+0x1dc>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a24      	ldr	r2, [pc, #144]	@ (8000c50 <GPIO_Init+0x1b8>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d040      	beq.n	8000c44 <GPIO_Init+0x1ac>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <GPIO_Init+0x1bc>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d039      	beq.n	8000c40 <GPIO_Init+0x1a8>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a21      	ldr	r2, [pc, #132]	@ (8000c58 <GPIO_Init+0x1c0>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d032      	beq.n	8000c3c <GPIO_Init+0x1a4>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a20      	ldr	r2, [pc, #128]	@ (8000c5c <GPIO_Init+0x1c4>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d02b      	beq.n	8000c38 <GPIO_Init+0x1a0>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a1e      	ldr	r2, [pc, #120]	@ (8000c60 <GPIO_Init+0x1c8>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d024      	beq.n	8000c34 <GPIO_Init+0x19c>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4a1d      	ldr	r2, [pc, #116]	@ (8000c64 <GPIO_Init+0x1cc>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d01d      	beq.n	8000c30 <GPIO_Init+0x198>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c68 <GPIO_Init+0x1d0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d016      	beq.n	8000c2c <GPIO_Init+0x194>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a1a      	ldr	r2, [pc, #104]	@ (8000c6c <GPIO_Init+0x1d4>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d00f      	beq.n	8000c28 <GPIO_Init+0x190>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <GPIO_Init+0x1c8>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d008      	beq.n	8000c24 <GPIO_Init+0x18c>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a16      	ldr	r2, [pc, #88]	@ (8000c70 <GPIO_Init+0x1d8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d101      	bne.n	8000c20 <GPIO_Init+0x188>
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	e02a      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c20:	2300      	movs	r3, #0
 8000c22:	e028      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c24:	2309      	movs	r3, #9
 8000c26:	e026      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c28:	2308      	movs	r3, #8
 8000c2a:	e024      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c2c:	2307      	movs	r3, #7
 8000c2e:	e022      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c30:	2306      	movs	r3, #6
 8000c32:	e020      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c34:	2305      	movs	r3, #5
 8000c36:	e01e      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c38:	2304      	movs	r3, #4
 8000c3a:	e01c      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	e01a      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e018      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e016      	b.n	8000c76 <GPIO_Init+0x1de>
 8000c48:	40013c00 	.word	0x40013c00
 8000c4c:	40020000 	.word	0x40020000
 8000c50:	40020400 	.word	0x40020400
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020c00 	.word	0x40020c00
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40021400 	.word	0x40021400
 8000c64:	40021800 	.word	0x40021800
 8000c68:	40021c00 	.word	0x40021c00
 8000c6c:	40022000 	.word	0x40022000
 8000c70:	40022800 	.word	0x40022800
 8000c74:	2300      	movs	r3, #0
 8000c76:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000c78:	4b5c      	ldr	r3, [pc, #368]	@ (8000dec <GPIO_Init+0x354>)
 8000c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7c:	4a5b      	ldr	r2, [pc, #364]	@ (8000dec <GPIO_Init+0x354>)
 8000c7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c82:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2*4);
 8000c84:	7c7a      	ldrb	r2, [r7, #17]
 8000c86:	7cbb      	ldrb	r3, [r7, #18]
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	fa02 f103 	lsl.w	r1, r2, r3
 8000c8e:	4a58      	ldr	r2, [pc, #352]	@ (8000df0 <GPIO_Init+0x358>)
 8000c90:	7cfb      	ldrb	r3, [r7, #19]
 8000c92:	3302      	adds	r3, #2
 8000c94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. enable the EXTI interrupt delivery using Interrupt Mask Register (IMR)
		EXTI->IMR |= 1<< 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000c98:	4b56      	ldr	r3, [pc, #344]	@ (8000df4 <GPIO_Init+0x35c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	7912      	ldrb	r2, [r2, #4]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	408a      	lsls	r2, r1
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a52      	ldr	r2, [pc, #328]	@ (8000df4 <GPIO_Init+0x35c>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]

	/* 2. configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	799b      	ldrb	r3, [r3, #6]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	791b      	ldrb	r3, [r3, #4]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	791b      	ldrb	r3, [r3, #4]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	408b      	lsls	r3, r1
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	400a      	ands	r2, r1
 8000cde:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6899      	ldr	r1, [r3, #8]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	430a      	orrs	r2, r1
 8000cee:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

	/* 3. configure pull-up/pull-down settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	79db      	ldrb	r3, [r3, #7]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	791b      	ldrb	r3, [r3, #4]
 8000d10:	4619      	mov	r1, r3
 8000d12:	2303      	movs	r3, #3
 8000d14:	408b      	lsls	r3, r1
 8000d16:	43db      	mvns	r3, r3
 8000d18:	4619      	mov	r1, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	400a      	ands	r2, r1
 8000d20:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68d9      	ldr	r1, [r3, #12]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]

	/* 4. configure the output type */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7a1b      	ldrb	r3, [r3, #8]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	791b      	ldrb	r3, [r3, #4]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	791b      	ldrb	r3, [r3, #4]
 8000d50:	4619      	mov	r1, r3
 8000d52:	2301      	movs	r3, #1
 8000d54:	408b      	lsls	r3, r1
 8000d56:	43db      	mvns	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	400a      	ands	r2, r1
 8000d60:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6859      	ldr	r1, [r3, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]

	/* 5. configure the alternate functionality */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	795b      	ldrb	r3, [r3, #5]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d131      	bne.n	8000de2 <GPIO_Init+0x34a>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	791b      	ldrb	r3, [r3, #4]
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	791b      	ldrb	r3, [r3, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	7c3a      	ldrb	r2, [r7, #16]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	4618      	mov	r0, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	7c3a      	ldrb	r2, [r7, #16]
 8000db0:	4001      	ands	r1, r0
 8000db2:	3208      	adds	r2, #8
 8000db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	7c3a      	ldrb	r2, [r7, #16]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7a5b      	ldrb	r3, [r3, #9]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	7c3a      	ldrb	r2, [r7, #16]
 8000dda:	4301      	orrs	r1, r0
 8000ddc:	3208      	adds	r2, #8
 8000dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40013800 	.word	0x40013800
 8000df4:	40013c00 	.word	0x40013c00

08000df8 <GPIO_ReadFromInputPin>:
}

/*
 * Data read/write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
	//return 0/1, so use uint8_t
	uint8_t value;

	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001); // shift the bit to LSB and mask + read it
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	73fb      	strb	r3, [r7, #15]

	return value;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
	...

08000e24 <SPI_PeriClockControl>:
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000e30:	78fb      	ldrb	r3, [r7, #3]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d141      	bne.n	8000eba <SPI_PeriClockControl+0x96>
	{
		if(pSPIx == SPI1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a43      	ldr	r2, [pc, #268]	@ (8000f48 <SPI_PeriClockControl+0x124>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d106      	bne.n	8000e4c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000e3e:	4b43      	ldr	r3, [pc, #268]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a42      	ldr	r2, [pc, #264]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI6_PCLK_DI();
		}

	}

}
 8000e4a:	e077      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <SPI_PeriClockControl+0x12c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d106      	bne.n	8000e62 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000e54:	4b3d      	ldr	r3, [pc, #244]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e58:	4a3c      	ldr	r2, [pc, #240]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e60:	e06c      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI3)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a3b      	ldr	r2, [pc, #236]	@ (8000f54 <SPI_PeriClockControl+0x130>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d106      	bne.n	8000e78 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000e6a:	4b38      	ldr	r3, [pc, #224]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6e:	4a37      	ldr	r2, [pc, #220]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e74:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e76:	e061      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI4)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a37      	ldr	r2, [pc, #220]	@ (8000f58 <SPI_PeriClockControl+0x134>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 8000e80:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e84:	4a31      	ldr	r2, [pc, #196]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e8a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000e8c:	e056      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI5)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a32      	ldr	r2, [pc, #200]	@ (8000f5c <SPI_PeriClockControl+0x138>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d106      	bne.n	8000ea4 <SPI_PeriClockControl+0x80>
			SPI5_PCLK_EN();
 8000e96:	4b2d      	ldr	r3, [pc, #180]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	4a2c      	ldr	r2, [pc, #176]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000e9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ea0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ea2:	e04b      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI6)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a2e      	ldr	r2, [pc, #184]	@ (8000f60 <SPI_PeriClockControl+0x13c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d147      	bne.n	8000f3c <SPI_PeriClockControl+0x118>
			SPI6_PCLK_EN();
 8000eac:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000eae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb0:	4a26      	ldr	r2, [pc, #152]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000eb2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eb6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000eb8:	e040      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		if(pSPIx == SPI1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a22      	ldr	r2, [pc, #136]	@ (8000f48 <SPI_PeriClockControl+0x124>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <SPI_PeriClockControl+0xac>
			SPI1_PCLK_DI();
 8000ec2:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	4a21      	ldr	r2, [pc, #132]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ecc:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ece:	e035      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f50 <SPI_PeriClockControl+0x12c>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d106      	bne.n	8000ee6 <SPI_PeriClockControl+0xc2>
			SPI2_PCLK_DI();
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000ede:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ee2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ee4:	e02a      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI3)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	@ (8000f54 <SPI_PeriClockControl+0x130>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d106      	bne.n	8000efc <SPI_PeriClockControl+0xd8>
			SPI3_PCLK_DI();
 8000eee:	4b17      	ldr	r3, [pc, #92]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef2:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000ef4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ef8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000efa:	e01f      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI4)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a16      	ldr	r2, [pc, #88]	@ (8000f58 <SPI_PeriClockControl+0x134>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d106      	bne.n	8000f12 <SPI_PeriClockControl+0xee>
			SPI4_PCLK_DI();
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f08:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000f0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f0e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f10:	e014      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI5)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a11      	ldr	r2, [pc, #68]	@ (8000f5c <SPI_PeriClockControl+0x138>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d106      	bne.n	8000f28 <SPI_PeriClockControl+0x104>
			SPI5_PCLK_DI();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000f20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000f24:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f26:	e009      	b.n	8000f3c <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI6)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <SPI_PeriClockControl+0x13c>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d105      	bne.n	8000f3c <SPI_PeriClockControl+0x118>
			SPI6_PCLK_DI();
 8000f30:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f34:	4a05      	ldr	r2, [pc, #20]	@ (8000f4c <SPI_PeriClockControl+0x128>)
 8000f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000f3a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40013000 	.word	0x40013000
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40003800 	.word	0x40003800
 8000f54:	40003c00 	.word	0x40003c00
 8000f58:	40013400 	.word	0x40013400
 8000f5c:	40015000 	.word	0x40015000
 8000f60:	40015400 	.word	0x40015400

08000f64 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff56 	bl	8000e24 <SPI_PeriClockControl>

	// First, configure SPI_CR1 register (configure "TempReg" as "CR1")
	uint32_t tempreg = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]

	/* 1. configure the device mode (MSTR bit), initializing to 0 (slave configuration) */
	tempreg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	791b      	ldrb	r3, [r3, #4]
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	68fa      	ldr	r2, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

	/* 2. configure the BusConfig */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) //full-duplex
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	795b      	ldrb	r3, [r3, #5]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d104      	bne.n	8000f9a <SPI_Init+0x36>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e014      	b.n	8000fc4 <SPI_Init+0x60>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) //half-duplex
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	795b      	ldrb	r3, [r3, #5]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d104      	bne.n	8000fac <SPI_Init+0x48>
	{
		//BIDI mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	e00b      	b.n	8000fc4 <SPI_Init+0x60>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) //Simplex, Rx-Only
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	795b      	ldrb	r3, [r3, #5]
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d107      	bne.n	8000fc4 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000fba:	60fb      	str	r3, [r7, #12]
		//Rx-Only bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc2:	60fb      	str	r3, [r7, #12]
	}

	/* 3. configure the SclkSpeed (BAUD RATE) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	799b      	ldrb	r3, [r3, #6]
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	60fb      	str	r3, [r7, #12]


	/* 4. configure the SPI_DFF (SPI_CRCL in f767xx) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	79db      	ldrb	r3, [r3, #7]
 8000fd4:	02db      	lsls	r3, r3, #11
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	60fb      	str	r3, [r7, #12]

	/* 5. configure the SPI_CPOL */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	7a1b      	ldrb	r3, [r3, #8]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	60fb      	str	r3, [r7, #12]

	/* 6. configure the SPI_CPHA */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a5b      	ldrb	r3, [r3, #9]
 8000fec:	461a      	mov	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	60fb      	str	r3, [r7, #12]

	/* 7. configure the SPI_SSM */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7a9b      	ldrb	r3, [r3, #10]
 8000ff8:	025b      	lsls	r3, r3, #9
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	601a      	str	r2, [r3, #0]

}
 8001008:	bf00      	nop
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <SPI_GetFlagStatus>:
		SPI6_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
 	if(pSPIx->SR & FlagName) // flag name actually gives masking info, see spi_driver.h @SPI_FLAG
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001026:	2301      	movs	r3, #1
 8001028:	e000      	b.n	800102c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET; // reset = 0
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
	//SendData is a blocking call, only return when finished
	while(Len > 0)
 8001042:	e027      	b.n	8001094 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set (Transmit buffer is empty)
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 8001044:	bf00      	nop
 8001046:	2102      	movs	r1, #2
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff ffe1 	bl	8001010 <SPI_GetFlagStatus>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f8      	beq.n	8001046 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1 (DFF in f407 = CRCL in f767)
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00e      	beq.n	800107e <SPI_SendData+0x48>
		{
			// 16-bit CRC length

			// 2-1 load the data into DR
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	60da      	str	r2, [r3, #12]

			// 2-2 sending 2 bytes of data, length - 2
			Len--;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3b01      	subs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
			Len--;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]

			// 2-3 buffer should increase by 2
			(uint16_t*) pTxBuffer++;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	e00a      	b.n	8001094 <SPI_SendData+0x5e>
		}
		else
		{
			// 8-bit CRC length
			pSPIx->DR = *pTxBuffer; //didn't need type casting
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	60da      	str	r2, [r3, #12]
			Len--;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	607b      	str	r3, [r7, #4]
			pTxBuffer++; //increase by 1
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1d4      	bne.n	8001044 <SPI_SendData+0xe>
		}
	}

}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	460b      	mov	r3, r1
 80010ae:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d106      	bne.n	80010c4 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE); //enable SPI
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); //disable SPI
	}
}
 80010c2:	e005      	b.n	80010d0 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); //disable SPI
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <SPI_SSOEConfig>:

/*
 * when using hardware slave management, you have to configure SSOE (for single master)
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80010e6:	78fb      	ldrb	r3, [r7, #3]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d106      	bne.n	80010fa <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE); //enable SPOE (for single master)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f043 0204 	orr.w	r2, r3, #4
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); //disable SPOE (for multi-master)
	}
}
 80010f8:	e005      	b.n	8001106 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); //disable SPOE (for multi-master)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f023 0204 	bic.w	r2, r3, #4
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	605a      	str	r2, [r3, #4]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SPI_ReceiveData>:


void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	//SendData is a blocking call, only return when finished
	while(Len > 0)
 800111c:	e027      	b.n	800116e <SPI_ReceiveData+0x5e>
	{
		//1. wait until RXNE is set (RX buffer is NOT empty)
		while( SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET );
 800111e:	bf00      	nop
 8001120:	2101      	movs	r1, #1
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f7ff ff74 	bl	8001010 <SPI_GetFlagStatus>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f8      	beq.n	8001120 <SPI_ReceiveData+0x10>

		//2. check the DFF bit in CR1 (DFF in f407 = CRCL in f767)
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00e      	beq.n	8001158 <SPI_ReceiveData+0x48>
		{
			// 16-bit CRC length

			// 2-1 load the data "from" DR
			*((uint16_t*) pRxBuffer) = pSPIx->DR ;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	b29a      	uxth	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	801a      	strh	r2, [r3, #0]

			// 2-2 sending 2 bytes of data, length - 2
			Len--;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	607b      	str	r3, [r7, #4]
			Len--;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3b01      	subs	r3, #1
 800114e:	607b      	str	r3, [r7, #4]

			// 2-3 buffer should increase by 2
			(uint16_t*) pRxBuffer++;
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	3301      	adds	r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	e00a      	b.n	800116e <SPI_ReceiveData+0x5e>
		}
		else
		{
			// 8-bit CRC length
			*pRxBuffer = pSPIx->DR ; //didn't need type casting
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	701a      	strb	r2, [r3, #0]
			Len--;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3b01      	subs	r3, #1
 8001166:	607b      	str	r3, [r7, #4]
			pRxBuffer++; //increase by 1
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3301      	adds	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1d4      	bne.n	800111e <SPI_ReceiveData+0xe>
		}
	}

}
 8001174:	bf00      	nop
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <std>:
 8001180:	2300      	movs	r3, #0
 8001182:	b510      	push	{r4, lr}
 8001184:	4604      	mov	r4, r0
 8001186:	e9c0 3300 	strd	r3, r3, [r0]
 800118a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800118e:	6083      	str	r3, [r0, #8]
 8001190:	8181      	strh	r1, [r0, #12]
 8001192:	6643      	str	r3, [r0, #100]	@ 0x64
 8001194:	81c2      	strh	r2, [r0, #14]
 8001196:	6183      	str	r3, [r0, #24]
 8001198:	4619      	mov	r1, r3
 800119a:	2208      	movs	r2, #8
 800119c:	305c      	adds	r0, #92	@ 0x5c
 800119e:	f000 f9f9 	bl	8001594 <memset>
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <std+0x58>)
 80011a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <std+0x5c>)
 80011a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80011aa:	4b0d      	ldr	r3, [pc, #52]	@ (80011e0 <std+0x60>)
 80011ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80011ae:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <std+0x64>)
 80011b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <std+0x68>)
 80011b4:	6224      	str	r4, [r4, #32]
 80011b6:	429c      	cmp	r4, r3
 80011b8:	d006      	beq.n	80011c8 <std+0x48>
 80011ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80011be:	4294      	cmp	r4, r2
 80011c0:	d002      	beq.n	80011c8 <std+0x48>
 80011c2:	33d0      	adds	r3, #208	@ 0xd0
 80011c4:	429c      	cmp	r4, r3
 80011c6:	d105      	bne.n	80011d4 <std+0x54>
 80011c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80011cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011d0:	f000 ba52 	b.w	8001678 <__retarget_lock_init_recursive>
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	bf00      	nop
 80011d8:	080013e5 	.word	0x080013e5
 80011dc:	08001407 	.word	0x08001407
 80011e0:	0800143f 	.word	0x0800143f
 80011e4:	08001463 	.word	0x08001463
 80011e8:	20000084 	.word	0x20000084

080011ec <stdio_exit_handler>:
 80011ec:	4a02      	ldr	r2, [pc, #8]	@ (80011f8 <stdio_exit_handler+0xc>)
 80011ee:	4903      	ldr	r1, [pc, #12]	@ (80011fc <stdio_exit_handler+0x10>)
 80011f0:	4803      	ldr	r0, [pc, #12]	@ (8001200 <stdio_exit_handler+0x14>)
 80011f2:	f000 b869 	b.w	80012c8 <_fwalk_sglue>
 80011f6:	bf00      	nop
 80011f8:	20000000 	.word	0x20000000
 80011fc:	08001f09 	.word	0x08001f09
 8001200:	20000010 	.word	0x20000010

08001204 <cleanup_stdio>:
 8001204:	6841      	ldr	r1, [r0, #4]
 8001206:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <cleanup_stdio+0x34>)
 8001208:	4299      	cmp	r1, r3
 800120a:	b510      	push	{r4, lr}
 800120c:	4604      	mov	r4, r0
 800120e:	d001      	beq.n	8001214 <cleanup_stdio+0x10>
 8001210:	f000 fe7a 	bl	8001f08 <_fflush_r>
 8001214:	68a1      	ldr	r1, [r4, #8]
 8001216:	4b09      	ldr	r3, [pc, #36]	@ (800123c <cleanup_stdio+0x38>)
 8001218:	4299      	cmp	r1, r3
 800121a:	d002      	beq.n	8001222 <cleanup_stdio+0x1e>
 800121c:	4620      	mov	r0, r4
 800121e:	f000 fe73 	bl	8001f08 <_fflush_r>
 8001222:	68e1      	ldr	r1, [r4, #12]
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <cleanup_stdio+0x3c>)
 8001226:	4299      	cmp	r1, r3
 8001228:	d004      	beq.n	8001234 <cleanup_stdio+0x30>
 800122a:	4620      	mov	r0, r4
 800122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001230:	f000 be6a 	b.w	8001f08 <_fflush_r>
 8001234:	bd10      	pop	{r4, pc}
 8001236:	bf00      	nop
 8001238:	20000084 	.word	0x20000084
 800123c:	200000ec 	.word	0x200000ec
 8001240:	20000154 	.word	0x20000154

08001244 <global_stdio_init.part.0>:
 8001244:	b510      	push	{r4, lr}
 8001246:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <global_stdio_init.part.0+0x30>)
 8001248:	4c0b      	ldr	r4, [pc, #44]	@ (8001278 <global_stdio_init.part.0+0x34>)
 800124a:	4a0c      	ldr	r2, [pc, #48]	@ (800127c <global_stdio_init.part.0+0x38>)
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	4620      	mov	r0, r4
 8001250:	2200      	movs	r2, #0
 8001252:	2104      	movs	r1, #4
 8001254:	f7ff ff94 	bl	8001180 <std>
 8001258:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800125c:	2201      	movs	r2, #1
 800125e:	2109      	movs	r1, #9
 8001260:	f7ff ff8e 	bl	8001180 <std>
 8001264:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001268:	2202      	movs	r2, #2
 800126a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800126e:	2112      	movs	r1, #18
 8001270:	f7ff bf86 	b.w	8001180 <std>
 8001274:	200001bc 	.word	0x200001bc
 8001278:	20000084 	.word	0x20000084
 800127c:	080011ed 	.word	0x080011ed

08001280 <__sfp_lock_acquire>:
 8001280:	4801      	ldr	r0, [pc, #4]	@ (8001288 <__sfp_lock_acquire+0x8>)
 8001282:	f000 b9fa 	b.w	800167a <__retarget_lock_acquire_recursive>
 8001286:	bf00      	nop
 8001288:	200001c5 	.word	0x200001c5

0800128c <__sfp_lock_release>:
 800128c:	4801      	ldr	r0, [pc, #4]	@ (8001294 <__sfp_lock_release+0x8>)
 800128e:	f000 b9f5 	b.w	800167c <__retarget_lock_release_recursive>
 8001292:	bf00      	nop
 8001294:	200001c5 	.word	0x200001c5

08001298 <__sinit>:
 8001298:	b510      	push	{r4, lr}
 800129a:	4604      	mov	r4, r0
 800129c:	f7ff fff0 	bl	8001280 <__sfp_lock_acquire>
 80012a0:	6a23      	ldr	r3, [r4, #32]
 80012a2:	b11b      	cbz	r3, 80012ac <__sinit+0x14>
 80012a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012a8:	f7ff bff0 	b.w	800128c <__sfp_lock_release>
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__sinit+0x28>)
 80012ae:	6223      	str	r3, [r4, #32]
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <__sinit+0x2c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f5      	bne.n	80012a4 <__sinit+0xc>
 80012b8:	f7ff ffc4 	bl	8001244 <global_stdio_init.part.0>
 80012bc:	e7f2      	b.n	80012a4 <__sinit+0xc>
 80012be:	bf00      	nop
 80012c0:	08001205 	.word	0x08001205
 80012c4:	200001bc 	.word	0x200001bc

080012c8 <_fwalk_sglue>:
 80012c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012cc:	4607      	mov	r7, r0
 80012ce:	4688      	mov	r8, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	2600      	movs	r6, #0
 80012d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80012d8:	f1b9 0901 	subs.w	r9, r9, #1
 80012dc:	d505      	bpl.n	80012ea <_fwalk_sglue+0x22>
 80012de:	6824      	ldr	r4, [r4, #0]
 80012e0:	2c00      	cmp	r4, #0
 80012e2:	d1f7      	bne.n	80012d4 <_fwalk_sglue+0xc>
 80012e4:	4630      	mov	r0, r6
 80012e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ea:	89ab      	ldrh	r3, [r5, #12]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d907      	bls.n	8001300 <_fwalk_sglue+0x38>
 80012f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012f4:	3301      	adds	r3, #1
 80012f6:	d003      	beq.n	8001300 <_fwalk_sglue+0x38>
 80012f8:	4629      	mov	r1, r5
 80012fa:	4638      	mov	r0, r7
 80012fc:	47c0      	blx	r8
 80012fe:	4306      	orrs	r6, r0
 8001300:	3568      	adds	r5, #104	@ 0x68
 8001302:	e7e9      	b.n	80012d8 <_fwalk_sglue+0x10>

08001304 <iprintf>:
 8001304:	b40f      	push	{r0, r1, r2, r3}
 8001306:	b507      	push	{r0, r1, r2, lr}
 8001308:	4906      	ldr	r1, [pc, #24]	@ (8001324 <iprintf+0x20>)
 800130a:	ab04      	add	r3, sp, #16
 800130c:	6808      	ldr	r0, [r1, #0]
 800130e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001312:	6881      	ldr	r1, [r0, #8]
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f000 fad3 	bl	80018c0 <_vfiprintf_r>
 800131a:	b003      	add	sp, #12
 800131c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001320:	b004      	add	sp, #16
 8001322:	4770      	bx	lr
 8001324:	2000000c 	.word	0x2000000c

08001328 <_puts_r>:
 8001328:	6a03      	ldr	r3, [r0, #32]
 800132a:	b570      	push	{r4, r5, r6, lr}
 800132c:	6884      	ldr	r4, [r0, #8]
 800132e:	4605      	mov	r5, r0
 8001330:	460e      	mov	r6, r1
 8001332:	b90b      	cbnz	r3, 8001338 <_puts_r+0x10>
 8001334:	f7ff ffb0 	bl	8001298 <__sinit>
 8001338:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800133a:	07db      	lsls	r3, r3, #31
 800133c:	d405      	bmi.n	800134a <_puts_r+0x22>
 800133e:	89a3      	ldrh	r3, [r4, #12]
 8001340:	0598      	lsls	r0, r3, #22
 8001342:	d402      	bmi.n	800134a <_puts_r+0x22>
 8001344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001346:	f000 f998 	bl	800167a <__retarget_lock_acquire_recursive>
 800134a:	89a3      	ldrh	r3, [r4, #12]
 800134c:	0719      	lsls	r1, r3, #28
 800134e:	d502      	bpl.n	8001356 <_puts_r+0x2e>
 8001350:	6923      	ldr	r3, [r4, #16]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d135      	bne.n	80013c2 <_puts_r+0x9a>
 8001356:	4621      	mov	r1, r4
 8001358:	4628      	mov	r0, r5
 800135a:	f000 f8c5 	bl	80014e8 <__swsetup_r>
 800135e:	b380      	cbz	r0, 80013c2 <_puts_r+0x9a>
 8001360:	f04f 35ff 	mov.w	r5, #4294967295
 8001364:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001366:	07da      	lsls	r2, r3, #31
 8001368:	d405      	bmi.n	8001376 <_puts_r+0x4e>
 800136a:	89a3      	ldrh	r3, [r4, #12]
 800136c:	059b      	lsls	r3, r3, #22
 800136e:	d402      	bmi.n	8001376 <_puts_r+0x4e>
 8001370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001372:	f000 f983 	bl	800167c <__retarget_lock_release_recursive>
 8001376:	4628      	mov	r0, r5
 8001378:	bd70      	pop	{r4, r5, r6, pc}
 800137a:	2b00      	cmp	r3, #0
 800137c:	da04      	bge.n	8001388 <_puts_r+0x60>
 800137e:	69a2      	ldr	r2, [r4, #24]
 8001380:	429a      	cmp	r2, r3
 8001382:	dc17      	bgt.n	80013b4 <_puts_r+0x8c>
 8001384:	290a      	cmp	r1, #10
 8001386:	d015      	beq.n	80013b4 <_puts_r+0x8c>
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	6022      	str	r2, [r4, #0]
 800138e:	7019      	strb	r1, [r3, #0]
 8001390:	68a3      	ldr	r3, [r4, #8]
 8001392:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001396:	3b01      	subs	r3, #1
 8001398:	60a3      	str	r3, [r4, #8]
 800139a:	2900      	cmp	r1, #0
 800139c:	d1ed      	bne.n	800137a <_puts_r+0x52>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	da11      	bge.n	80013c6 <_puts_r+0x9e>
 80013a2:	4622      	mov	r2, r4
 80013a4:	210a      	movs	r1, #10
 80013a6:	4628      	mov	r0, r5
 80013a8:	f000 f85f 	bl	800146a <__swbuf_r>
 80013ac:	3001      	adds	r0, #1
 80013ae:	d0d7      	beq.n	8001360 <_puts_r+0x38>
 80013b0:	250a      	movs	r5, #10
 80013b2:	e7d7      	b.n	8001364 <_puts_r+0x3c>
 80013b4:	4622      	mov	r2, r4
 80013b6:	4628      	mov	r0, r5
 80013b8:	f000 f857 	bl	800146a <__swbuf_r>
 80013bc:	3001      	adds	r0, #1
 80013be:	d1e7      	bne.n	8001390 <_puts_r+0x68>
 80013c0:	e7ce      	b.n	8001360 <_puts_r+0x38>
 80013c2:	3e01      	subs	r6, #1
 80013c4:	e7e4      	b.n	8001390 <_puts_r+0x68>
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	1c5a      	adds	r2, r3, #1
 80013ca:	6022      	str	r2, [r4, #0]
 80013cc:	220a      	movs	r2, #10
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e7ee      	b.n	80013b0 <_puts_r+0x88>
	...

080013d4 <puts>:
 80013d4:	4b02      	ldr	r3, [pc, #8]	@ (80013e0 <puts+0xc>)
 80013d6:	4601      	mov	r1, r0
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	f7ff bfa5 	b.w	8001328 <_puts_r>
 80013de:	bf00      	nop
 80013e0:	2000000c 	.word	0x2000000c

080013e4 <__sread>:
 80013e4:	b510      	push	{r4, lr}
 80013e6:	460c      	mov	r4, r1
 80013e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ec:	f000 f8fc 	bl	80015e8 <_read_r>
 80013f0:	2800      	cmp	r0, #0
 80013f2:	bfab      	itete	ge
 80013f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80013f6:	89a3      	ldrhlt	r3, [r4, #12]
 80013f8:	181b      	addge	r3, r3, r0
 80013fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80013fe:	bfac      	ite	ge
 8001400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001402:	81a3      	strhlt	r3, [r4, #12]
 8001404:	bd10      	pop	{r4, pc}

08001406 <__swrite>:
 8001406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800140a:	461f      	mov	r7, r3
 800140c:	898b      	ldrh	r3, [r1, #12]
 800140e:	05db      	lsls	r3, r3, #23
 8001410:	4605      	mov	r5, r0
 8001412:	460c      	mov	r4, r1
 8001414:	4616      	mov	r6, r2
 8001416:	d505      	bpl.n	8001424 <__swrite+0x1e>
 8001418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800141c:	2302      	movs	r3, #2
 800141e:	2200      	movs	r2, #0
 8001420:	f000 f8d0 	bl	80015c4 <_lseek_r>
 8001424:	89a3      	ldrh	r3, [r4, #12]
 8001426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800142a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800142e:	81a3      	strh	r3, [r4, #12]
 8001430:	4632      	mov	r2, r6
 8001432:	463b      	mov	r3, r7
 8001434:	4628      	mov	r0, r5
 8001436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800143a:	f000 b8e7 	b.w	800160c <_write_r>

0800143e <__sseek>:
 800143e:	b510      	push	{r4, lr}
 8001440:	460c      	mov	r4, r1
 8001442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001446:	f000 f8bd 	bl	80015c4 <_lseek_r>
 800144a:	1c43      	adds	r3, r0, #1
 800144c:	89a3      	ldrh	r3, [r4, #12]
 800144e:	bf15      	itete	ne
 8001450:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800145a:	81a3      	strheq	r3, [r4, #12]
 800145c:	bf18      	it	ne
 800145e:	81a3      	strhne	r3, [r4, #12]
 8001460:	bd10      	pop	{r4, pc}

08001462 <__sclose>:
 8001462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001466:	f000 b89d 	b.w	80015a4 <_close_r>

0800146a <__swbuf_r>:
 800146a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146c:	460e      	mov	r6, r1
 800146e:	4614      	mov	r4, r2
 8001470:	4605      	mov	r5, r0
 8001472:	b118      	cbz	r0, 800147c <__swbuf_r+0x12>
 8001474:	6a03      	ldr	r3, [r0, #32]
 8001476:	b90b      	cbnz	r3, 800147c <__swbuf_r+0x12>
 8001478:	f7ff ff0e 	bl	8001298 <__sinit>
 800147c:	69a3      	ldr	r3, [r4, #24]
 800147e:	60a3      	str	r3, [r4, #8]
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	071a      	lsls	r2, r3, #28
 8001484:	d501      	bpl.n	800148a <__swbuf_r+0x20>
 8001486:	6923      	ldr	r3, [r4, #16]
 8001488:	b943      	cbnz	r3, 800149c <__swbuf_r+0x32>
 800148a:	4621      	mov	r1, r4
 800148c:	4628      	mov	r0, r5
 800148e:	f000 f82b 	bl	80014e8 <__swsetup_r>
 8001492:	b118      	cbz	r0, 800149c <__swbuf_r+0x32>
 8001494:	f04f 37ff 	mov.w	r7, #4294967295
 8001498:	4638      	mov	r0, r7
 800149a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	6922      	ldr	r2, [r4, #16]
 80014a0:	1a98      	subs	r0, r3, r2
 80014a2:	6963      	ldr	r3, [r4, #20]
 80014a4:	b2f6      	uxtb	r6, r6
 80014a6:	4283      	cmp	r3, r0
 80014a8:	4637      	mov	r7, r6
 80014aa:	dc05      	bgt.n	80014b8 <__swbuf_r+0x4e>
 80014ac:	4621      	mov	r1, r4
 80014ae:	4628      	mov	r0, r5
 80014b0:	f000 fd2a 	bl	8001f08 <_fflush_r>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d1ed      	bne.n	8001494 <__swbuf_r+0x2a>
 80014b8:	68a3      	ldr	r3, [r4, #8]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	60a3      	str	r3, [r4, #8]
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	6022      	str	r2, [r4, #0]
 80014c4:	701e      	strb	r6, [r3, #0]
 80014c6:	6962      	ldr	r2, [r4, #20]
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d004      	beq.n	80014d8 <__swbuf_r+0x6e>
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	07db      	lsls	r3, r3, #31
 80014d2:	d5e1      	bpl.n	8001498 <__swbuf_r+0x2e>
 80014d4:	2e0a      	cmp	r6, #10
 80014d6:	d1df      	bne.n	8001498 <__swbuf_r+0x2e>
 80014d8:	4621      	mov	r1, r4
 80014da:	4628      	mov	r0, r5
 80014dc:	f000 fd14 	bl	8001f08 <_fflush_r>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d0d9      	beq.n	8001498 <__swbuf_r+0x2e>
 80014e4:	e7d6      	b.n	8001494 <__swbuf_r+0x2a>
	...

080014e8 <__swsetup_r>:
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	4b29      	ldr	r3, [pc, #164]	@ (8001590 <__swsetup_r+0xa8>)
 80014ec:	4605      	mov	r5, r0
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	460c      	mov	r4, r1
 80014f2:	b118      	cbz	r0, 80014fc <__swsetup_r+0x14>
 80014f4:	6a03      	ldr	r3, [r0, #32]
 80014f6:	b90b      	cbnz	r3, 80014fc <__swsetup_r+0x14>
 80014f8:	f7ff fece 	bl	8001298 <__sinit>
 80014fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001500:	0719      	lsls	r1, r3, #28
 8001502:	d422      	bmi.n	800154a <__swsetup_r+0x62>
 8001504:	06da      	lsls	r2, r3, #27
 8001506:	d407      	bmi.n	8001518 <__swsetup_r+0x30>
 8001508:	2209      	movs	r2, #9
 800150a:	602a      	str	r2, [r5, #0]
 800150c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001510:	81a3      	strh	r3, [r4, #12]
 8001512:	f04f 30ff 	mov.w	r0, #4294967295
 8001516:	e033      	b.n	8001580 <__swsetup_r+0x98>
 8001518:	0758      	lsls	r0, r3, #29
 800151a:	d512      	bpl.n	8001542 <__swsetup_r+0x5a>
 800151c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800151e:	b141      	cbz	r1, 8001532 <__swsetup_r+0x4a>
 8001520:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001524:	4299      	cmp	r1, r3
 8001526:	d002      	beq.n	800152e <__swsetup_r+0x46>
 8001528:	4628      	mov	r0, r5
 800152a:	f000 f8a9 	bl	8001680 <_free_r>
 800152e:	2300      	movs	r3, #0
 8001530:	6363      	str	r3, [r4, #52]	@ 0x34
 8001532:	89a3      	ldrh	r3, [r4, #12]
 8001534:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001538:	81a3      	strh	r3, [r4, #12]
 800153a:	2300      	movs	r3, #0
 800153c:	6063      	str	r3, [r4, #4]
 800153e:	6923      	ldr	r3, [r4, #16]
 8001540:	6023      	str	r3, [r4, #0]
 8001542:	89a3      	ldrh	r3, [r4, #12]
 8001544:	f043 0308 	orr.w	r3, r3, #8
 8001548:	81a3      	strh	r3, [r4, #12]
 800154a:	6923      	ldr	r3, [r4, #16]
 800154c:	b94b      	cbnz	r3, 8001562 <__swsetup_r+0x7a>
 800154e:	89a3      	ldrh	r3, [r4, #12]
 8001550:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001558:	d003      	beq.n	8001562 <__swsetup_r+0x7a>
 800155a:	4621      	mov	r1, r4
 800155c:	4628      	mov	r0, r5
 800155e:	f000 fd21 	bl	8001fa4 <__smakebuf_r>
 8001562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001566:	f013 0201 	ands.w	r2, r3, #1
 800156a:	d00a      	beq.n	8001582 <__swsetup_r+0x9a>
 800156c:	2200      	movs	r2, #0
 800156e:	60a2      	str	r2, [r4, #8]
 8001570:	6962      	ldr	r2, [r4, #20]
 8001572:	4252      	negs	r2, r2
 8001574:	61a2      	str	r2, [r4, #24]
 8001576:	6922      	ldr	r2, [r4, #16]
 8001578:	b942      	cbnz	r2, 800158c <__swsetup_r+0xa4>
 800157a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800157e:	d1c5      	bne.n	800150c <__swsetup_r+0x24>
 8001580:	bd38      	pop	{r3, r4, r5, pc}
 8001582:	0799      	lsls	r1, r3, #30
 8001584:	bf58      	it	pl
 8001586:	6962      	ldrpl	r2, [r4, #20]
 8001588:	60a2      	str	r2, [r4, #8]
 800158a:	e7f4      	b.n	8001576 <__swsetup_r+0x8e>
 800158c:	2000      	movs	r0, #0
 800158e:	e7f7      	b.n	8001580 <__swsetup_r+0x98>
 8001590:	2000000c 	.word	0x2000000c

08001594 <memset>:
 8001594:	4402      	add	r2, r0
 8001596:	4603      	mov	r3, r0
 8001598:	4293      	cmp	r3, r2
 800159a:	d100      	bne.n	800159e <memset+0xa>
 800159c:	4770      	bx	lr
 800159e:	f803 1b01 	strb.w	r1, [r3], #1
 80015a2:	e7f9      	b.n	8001598 <memset+0x4>

080015a4 <_close_r>:
 80015a4:	b538      	push	{r3, r4, r5, lr}
 80015a6:	4d06      	ldr	r5, [pc, #24]	@ (80015c0 <_close_r+0x1c>)
 80015a8:	2300      	movs	r3, #0
 80015aa:	4604      	mov	r4, r0
 80015ac:	4608      	mov	r0, r1
 80015ae:	602b      	str	r3, [r5, #0]
 80015b0:	f000 fe38 	bl	8002224 <_close>
 80015b4:	1c43      	adds	r3, r0, #1
 80015b6:	d102      	bne.n	80015be <_close_r+0x1a>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	b103      	cbz	r3, 80015be <_close_r+0x1a>
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	200001c0 	.word	0x200001c0

080015c4 <_lseek_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4d07      	ldr	r5, [pc, #28]	@ (80015e4 <_lseek_r+0x20>)
 80015c8:	4604      	mov	r4, r0
 80015ca:	4608      	mov	r0, r1
 80015cc:	4611      	mov	r1, r2
 80015ce:	2200      	movs	r2, #0
 80015d0:	602a      	str	r2, [r5, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	f000 fde7 	bl	80021a6 <_lseek>
 80015d8:	1c43      	adds	r3, r0, #1
 80015da:	d102      	bne.n	80015e2 <_lseek_r+0x1e>
 80015dc:	682b      	ldr	r3, [r5, #0]
 80015de:	b103      	cbz	r3, 80015e2 <_lseek_r+0x1e>
 80015e0:	6023      	str	r3, [r4, #0]
 80015e2:	bd38      	pop	{r3, r4, r5, pc}
 80015e4:	200001c0 	.word	0x200001c0

080015e8 <_read_r>:
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	4d07      	ldr	r5, [pc, #28]	@ (8001608 <_read_r+0x20>)
 80015ec:	4604      	mov	r4, r0
 80015ee:	4608      	mov	r0, r1
 80015f0:	4611      	mov	r1, r2
 80015f2:	2200      	movs	r2, #0
 80015f4:	602a      	str	r2, [r5, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	f000 fd7f 	bl	80020fa <_read>
 80015fc:	1c43      	adds	r3, r0, #1
 80015fe:	d102      	bne.n	8001606 <_read_r+0x1e>
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	b103      	cbz	r3, 8001606 <_read_r+0x1e>
 8001604:	6023      	str	r3, [r4, #0]
 8001606:	bd38      	pop	{r3, r4, r5, pc}
 8001608:	200001c0 	.word	0x200001c0

0800160c <_write_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4d07      	ldr	r5, [pc, #28]	@ (800162c <_write_r+0x20>)
 8001610:	4604      	mov	r4, r0
 8001612:	4608      	mov	r0, r1
 8001614:	4611      	mov	r1, r2
 8001616:	2200      	movs	r2, #0
 8001618:	602a      	str	r2, [r5, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	f000 fdd5 	bl	80021ca <_write>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	d102      	bne.n	800162a <_write_r+0x1e>
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	b103      	cbz	r3, 800162a <_write_r+0x1e>
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	bd38      	pop	{r3, r4, r5, pc}
 800162c:	200001c0 	.word	0x200001c0

08001630 <__libc_init_array>:
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	4d0d      	ldr	r5, [pc, #52]	@ (8001668 <__libc_init_array+0x38>)
 8001634:	4c0d      	ldr	r4, [pc, #52]	@ (800166c <__libc_init_array+0x3c>)
 8001636:	1b64      	subs	r4, r4, r5
 8001638:	10a4      	asrs	r4, r4, #2
 800163a:	2600      	movs	r6, #0
 800163c:	42a6      	cmp	r6, r4
 800163e:	d109      	bne.n	8001654 <__libc_init_array+0x24>
 8001640:	4d0b      	ldr	r5, [pc, #44]	@ (8001670 <__libc_init_array+0x40>)
 8001642:	4c0c      	ldr	r4, [pc, #48]	@ (8001674 <__libc_init_array+0x44>)
 8001644:	f000 ffe2 	bl	800260c <_init>
 8001648:	1b64      	subs	r4, r4, r5
 800164a:	10a4      	asrs	r4, r4, #2
 800164c:	2600      	movs	r6, #0
 800164e:	42a6      	cmp	r6, r4
 8001650:	d105      	bne.n	800165e <__libc_init_array+0x2e>
 8001652:	bd70      	pop	{r4, r5, r6, pc}
 8001654:	f855 3b04 	ldr.w	r3, [r5], #4
 8001658:	4798      	blx	r3
 800165a:	3601      	adds	r6, #1
 800165c:	e7ee      	b.n	800163c <__libc_init_array+0xc>
 800165e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001662:	4798      	blx	r3
 8001664:	3601      	adds	r6, #1
 8001666:	e7f2      	b.n	800164e <__libc_init_array+0x1e>
 8001668:	08002754 	.word	0x08002754
 800166c:	08002754 	.word	0x08002754
 8001670:	08002754 	.word	0x08002754
 8001674:	08002758 	.word	0x08002758

08001678 <__retarget_lock_init_recursive>:
 8001678:	4770      	bx	lr

0800167a <__retarget_lock_acquire_recursive>:
 800167a:	4770      	bx	lr

0800167c <__retarget_lock_release_recursive>:
 800167c:	4770      	bx	lr
	...

08001680 <_free_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4605      	mov	r5, r0
 8001684:	2900      	cmp	r1, #0
 8001686:	d041      	beq.n	800170c <_free_r+0x8c>
 8001688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800168c:	1f0c      	subs	r4, r1, #4
 800168e:	2b00      	cmp	r3, #0
 8001690:	bfb8      	it	lt
 8001692:	18e4      	addlt	r4, r4, r3
 8001694:	f000 f8e0 	bl	8001858 <__malloc_lock>
 8001698:	4a1d      	ldr	r2, [pc, #116]	@ (8001710 <_free_r+0x90>)
 800169a:	6813      	ldr	r3, [r2, #0]
 800169c:	b933      	cbnz	r3, 80016ac <_free_r+0x2c>
 800169e:	6063      	str	r3, [r4, #4]
 80016a0:	6014      	str	r4, [r2, #0]
 80016a2:	4628      	mov	r0, r5
 80016a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016a8:	f000 b8dc 	b.w	8001864 <__malloc_unlock>
 80016ac:	42a3      	cmp	r3, r4
 80016ae:	d908      	bls.n	80016c2 <_free_r+0x42>
 80016b0:	6820      	ldr	r0, [r4, #0]
 80016b2:	1821      	adds	r1, r4, r0
 80016b4:	428b      	cmp	r3, r1
 80016b6:	bf01      	itttt	eq
 80016b8:	6819      	ldreq	r1, [r3, #0]
 80016ba:	685b      	ldreq	r3, [r3, #4]
 80016bc:	1809      	addeq	r1, r1, r0
 80016be:	6021      	streq	r1, [r4, #0]
 80016c0:	e7ed      	b.n	800169e <_free_r+0x1e>
 80016c2:	461a      	mov	r2, r3
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	b10b      	cbz	r3, 80016cc <_free_r+0x4c>
 80016c8:	42a3      	cmp	r3, r4
 80016ca:	d9fa      	bls.n	80016c2 <_free_r+0x42>
 80016cc:	6811      	ldr	r1, [r2, #0]
 80016ce:	1850      	adds	r0, r2, r1
 80016d0:	42a0      	cmp	r0, r4
 80016d2:	d10b      	bne.n	80016ec <_free_r+0x6c>
 80016d4:	6820      	ldr	r0, [r4, #0]
 80016d6:	4401      	add	r1, r0
 80016d8:	1850      	adds	r0, r2, r1
 80016da:	4283      	cmp	r3, r0
 80016dc:	6011      	str	r1, [r2, #0]
 80016de:	d1e0      	bne.n	80016a2 <_free_r+0x22>
 80016e0:	6818      	ldr	r0, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	6053      	str	r3, [r2, #4]
 80016e6:	4408      	add	r0, r1
 80016e8:	6010      	str	r0, [r2, #0]
 80016ea:	e7da      	b.n	80016a2 <_free_r+0x22>
 80016ec:	d902      	bls.n	80016f4 <_free_r+0x74>
 80016ee:	230c      	movs	r3, #12
 80016f0:	602b      	str	r3, [r5, #0]
 80016f2:	e7d6      	b.n	80016a2 <_free_r+0x22>
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	1821      	adds	r1, r4, r0
 80016f8:	428b      	cmp	r3, r1
 80016fa:	bf04      	itt	eq
 80016fc:	6819      	ldreq	r1, [r3, #0]
 80016fe:	685b      	ldreq	r3, [r3, #4]
 8001700:	6063      	str	r3, [r4, #4]
 8001702:	bf04      	itt	eq
 8001704:	1809      	addeq	r1, r1, r0
 8001706:	6021      	streq	r1, [r4, #0]
 8001708:	6054      	str	r4, [r2, #4]
 800170a:	e7ca      	b.n	80016a2 <_free_r+0x22>
 800170c:	bd38      	pop	{r3, r4, r5, pc}
 800170e:	bf00      	nop
 8001710:	200001cc 	.word	0x200001cc

08001714 <sbrk_aligned>:
 8001714:	b570      	push	{r4, r5, r6, lr}
 8001716:	4e0f      	ldr	r6, [pc, #60]	@ (8001754 <sbrk_aligned+0x40>)
 8001718:	460c      	mov	r4, r1
 800171a:	6831      	ldr	r1, [r6, #0]
 800171c:	4605      	mov	r5, r0
 800171e:	b911      	cbnz	r1, 8001726 <sbrk_aligned+0x12>
 8001720:	f000 fc9e 	bl	8002060 <_sbrk_r>
 8001724:	6030      	str	r0, [r6, #0]
 8001726:	4621      	mov	r1, r4
 8001728:	4628      	mov	r0, r5
 800172a:	f000 fc99 	bl	8002060 <_sbrk_r>
 800172e:	1c43      	adds	r3, r0, #1
 8001730:	d103      	bne.n	800173a <sbrk_aligned+0x26>
 8001732:	f04f 34ff 	mov.w	r4, #4294967295
 8001736:	4620      	mov	r0, r4
 8001738:	bd70      	pop	{r4, r5, r6, pc}
 800173a:	1cc4      	adds	r4, r0, #3
 800173c:	f024 0403 	bic.w	r4, r4, #3
 8001740:	42a0      	cmp	r0, r4
 8001742:	d0f8      	beq.n	8001736 <sbrk_aligned+0x22>
 8001744:	1a21      	subs	r1, r4, r0
 8001746:	4628      	mov	r0, r5
 8001748:	f000 fc8a 	bl	8002060 <_sbrk_r>
 800174c:	3001      	adds	r0, #1
 800174e:	d1f2      	bne.n	8001736 <sbrk_aligned+0x22>
 8001750:	e7ef      	b.n	8001732 <sbrk_aligned+0x1e>
 8001752:	bf00      	nop
 8001754:	200001c8 	.word	0x200001c8

08001758 <_malloc_r>:
 8001758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800175c:	1ccd      	adds	r5, r1, #3
 800175e:	f025 0503 	bic.w	r5, r5, #3
 8001762:	3508      	adds	r5, #8
 8001764:	2d0c      	cmp	r5, #12
 8001766:	bf38      	it	cc
 8001768:	250c      	movcc	r5, #12
 800176a:	2d00      	cmp	r5, #0
 800176c:	4606      	mov	r6, r0
 800176e:	db01      	blt.n	8001774 <_malloc_r+0x1c>
 8001770:	42a9      	cmp	r1, r5
 8001772:	d904      	bls.n	800177e <_malloc_r+0x26>
 8001774:	230c      	movs	r3, #12
 8001776:	6033      	str	r3, [r6, #0]
 8001778:	2000      	movs	r0, #0
 800177a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800177e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001854 <_malloc_r+0xfc>
 8001782:	f000 f869 	bl	8001858 <__malloc_lock>
 8001786:	f8d8 3000 	ldr.w	r3, [r8]
 800178a:	461c      	mov	r4, r3
 800178c:	bb44      	cbnz	r4, 80017e0 <_malloc_r+0x88>
 800178e:	4629      	mov	r1, r5
 8001790:	4630      	mov	r0, r6
 8001792:	f7ff ffbf 	bl	8001714 <sbrk_aligned>
 8001796:	1c43      	adds	r3, r0, #1
 8001798:	4604      	mov	r4, r0
 800179a:	d158      	bne.n	800184e <_malloc_r+0xf6>
 800179c:	f8d8 4000 	ldr.w	r4, [r8]
 80017a0:	4627      	mov	r7, r4
 80017a2:	2f00      	cmp	r7, #0
 80017a4:	d143      	bne.n	800182e <_malloc_r+0xd6>
 80017a6:	2c00      	cmp	r4, #0
 80017a8:	d04b      	beq.n	8001842 <_malloc_r+0xea>
 80017aa:	6823      	ldr	r3, [r4, #0]
 80017ac:	4639      	mov	r1, r7
 80017ae:	4630      	mov	r0, r6
 80017b0:	eb04 0903 	add.w	r9, r4, r3
 80017b4:	f000 fc54 	bl	8002060 <_sbrk_r>
 80017b8:	4581      	cmp	r9, r0
 80017ba:	d142      	bne.n	8001842 <_malloc_r+0xea>
 80017bc:	6821      	ldr	r1, [r4, #0]
 80017be:	1a6d      	subs	r5, r5, r1
 80017c0:	4629      	mov	r1, r5
 80017c2:	4630      	mov	r0, r6
 80017c4:	f7ff ffa6 	bl	8001714 <sbrk_aligned>
 80017c8:	3001      	adds	r0, #1
 80017ca:	d03a      	beq.n	8001842 <_malloc_r+0xea>
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	442b      	add	r3, r5
 80017d0:	6023      	str	r3, [r4, #0]
 80017d2:	f8d8 3000 	ldr.w	r3, [r8]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	bb62      	cbnz	r2, 8001834 <_malloc_r+0xdc>
 80017da:	f8c8 7000 	str.w	r7, [r8]
 80017de:	e00f      	b.n	8001800 <_malloc_r+0xa8>
 80017e0:	6822      	ldr	r2, [r4, #0]
 80017e2:	1b52      	subs	r2, r2, r5
 80017e4:	d420      	bmi.n	8001828 <_malloc_r+0xd0>
 80017e6:	2a0b      	cmp	r2, #11
 80017e8:	d917      	bls.n	800181a <_malloc_r+0xc2>
 80017ea:	1961      	adds	r1, r4, r5
 80017ec:	42a3      	cmp	r3, r4
 80017ee:	6025      	str	r5, [r4, #0]
 80017f0:	bf18      	it	ne
 80017f2:	6059      	strne	r1, [r3, #4]
 80017f4:	6863      	ldr	r3, [r4, #4]
 80017f6:	bf08      	it	eq
 80017f8:	f8c8 1000 	streq.w	r1, [r8]
 80017fc:	5162      	str	r2, [r4, r5]
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	4630      	mov	r0, r6
 8001802:	f000 f82f 	bl	8001864 <__malloc_unlock>
 8001806:	f104 000b 	add.w	r0, r4, #11
 800180a:	1d23      	adds	r3, r4, #4
 800180c:	f020 0007 	bic.w	r0, r0, #7
 8001810:	1ac2      	subs	r2, r0, r3
 8001812:	bf1c      	itt	ne
 8001814:	1a1b      	subne	r3, r3, r0
 8001816:	50a3      	strne	r3, [r4, r2]
 8001818:	e7af      	b.n	800177a <_malloc_r+0x22>
 800181a:	6862      	ldr	r2, [r4, #4]
 800181c:	42a3      	cmp	r3, r4
 800181e:	bf0c      	ite	eq
 8001820:	f8c8 2000 	streq.w	r2, [r8]
 8001824:	605a      	strne	r2, [r3, #4]
 8001826:	e7eb      	b.n	8001800 <_malloc_r+0xa8>
 8001828:	4623      	mov	r3, r4
 800182a:	6864      	ldr	r4, [r4, #4]
 800182c:	e7ae      	b.n	800178c <_malloc_r+0x34>
 800182e:	463c      	mov	r4, r7
 8001830:	687f      	ldr	r7, [r7, #4]
 8001832:	e7b6      	b.n	80017a2 <_malloc_r+0x4a>
 8001834:	461a      	mov	r2, r3
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	42a3      	cmp	r3, r4
 800183a:	d1fb      	bne.n	8001834 <_malloc_r+0xdc>
 800183c:	2300      	movs	r3, #0
 800183e:	6053      	str	r3, [r2, #4]
 8001840:	e7de      	b.n	8001800 <_malloc_r+0xa8>
 8001842:	230c      	movs	r3, #12
 8001844:	6033      	str	r3, [r6, #0]
 8001846:	4630      	mov	r0, r6
 8001848:	f000 f80c 	bl	8001864 <__malloc_unlock>
 800184c:	e794      	b.n	8001778 <_malloc_r+0x20>
 800184e:	6005      	str	r5, [r0, #0]
 8001850:	e7d6      	b.n	8001800 <_malloc_r+0xa8>
 8001852:	bf00      	nop
 8001854:	200001cc 	.word	0x200001cc

08001858 <__malloc_lock>:
 8001858:	4801      	ldr	r0, [pc, #4]	@ (8001860 <__malloc_lock+0x8>)
 800185a:	f7ff bf0e 	b.w	800167a <__retarget_lock_acquire_recursive>
 800185e:	bf00      	nop
 8001860:	200001c4 	.word	0x200001c4

08001864 <__malloc_unlock>:
 8001864:	4801      	ldr	r0, [pc, #4]	@ (800186c <__malloc_unlock+0x8>)
 8001866:	f7ff bf09 	b.w	800167c <__retarget_lock_release_recursive>
 800186a:	bf00      	nop
 800186c:	200001c4 	.word	0x200001c4

08001870 <__sfputc_r>:
 8001870:	6893      	ldr	r3, [r2, #8]
 8001872:	3b01      	subs	r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	b410      	push	{r4}
 8001878:	6093      	str	r3, [r2, #8]
 800187a:	da07      	bge.n	800188c <__sfputc_r+0x1c>
 800187c:	6994      	ldr	r4, [r2, #24]
 800187e:	42a3      	cmp	r3, r4
 8001880:	db01      	blt.n	8001886 <__sfputc_r+0x16>
 8001882:	290a      	cmp	r1, #10
 8001884:	d102      	bne.n	800188c <__sfputc_r+0x1c>
 8001886:	bc10      	pop	{r4}
 8001888:	f7ff bdef 	b.w	800146a <__swbuf_r>
 800188c:	6813      	ldr	r3, [r2, #0]
 800188e:	1c58      	adds	r0, r3, #1
 8001890:	6010      	str	r0, [r2, #0]
 8001892:	7019      	strb	r1, [r3, #0]
 8001894:	4608      	mov	r0, r1
 8001896:	bc10      	pop	{r4}
 8001898:	4770      	bx	lr

0800189a <__sfputs_r>:
 800189a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189c:	4606      	mov	r6, r0
 800189e:	460f      	mov	r7, r1
 80018a0:	4614      	mov	r4, r2
 80018a2:	18d5      	adds	r5, r2, r3
 80018a4:	42ac      	cmp	r4, r5
 80018a6:	d101      	bne.n	80018ac <__sfputs_r+0x12>
 80018a8:	2000      	movs	r0, #0
 80018aa:	e007      	b.n	80018bc <__sfputs_r+0x22>
 80018ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018b0:	463a      	mov	r2, r7
 80018b2:	4630      	mov	r0, r6
 80018b4:	f7ff ffdc 	bl	8001870 <__sfputc_r>
 80018b8:	1c43      	adds	r3, r0, #1
 80018ba:	d1f3      	bne.n	80018a4 <__sfputs_r+0xa>
 80018bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080018c0 <_vfiprintf_r>:
 80018c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c4:	460d      	mov	r5, r1
 80018c6:	b09d      	sub	sp, #116	@ 0x74
 80018c8:	4614      	mov	r4, r2
 80018ca:	4698      	mov	r8, r3
 80018cc:	4606      	mov	r6, r0
 80018ce:	b118      	cbz	r0, 80018d8 <_vfiprintf_r+0x18>
 80018d0:	6a03      	ldr	r3, [r0, #32]
 80018d2:	b90b      	cbnz	r3, 80018d8 <_vfiprintf_r+0x18>
 80018d4:	f7ff fce0 	bl	8001298 <__sinit>
 80018d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80018da:	07d9      	lsls	r1, r3, #31
 80018dc:	d405      	bmi.n	80018ea <_vfiprintf_r+0x2a>
 80018de:	89ab      	ldrh	r3, [r5, #12]
 80018e0:	059a      	lsls	r2, r3, #22
 80018e2:	d402      	bmi.n	80018ea <_vfiprintf_r+0x2a>
 80018e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80018e6:	f7ff fec8 	bl	800167a <__retarget_lock_acquire_recursive>
 80018ea:	89ab      	ldrh	r3, [r5, #12]
 80018ec:	071b      	lsls	r3, r3, #28
 80018ee:	d501      	bpl.n	80018f4 <_vfiprintf_r+0x34>
 80018f0:	692b      	ldr	r3, [r5, #16]
 80018f2:	b99b      	cbnz	r3, 800191c <_vfiprintf_r+0x5c>
 80018f4:	4629      	mov	r1, r5
 80018f6:	4630      	mov	r0, r6
 80018f8:	f7ff fdf6 	bl	80014e8 <__swsetup_r>
 80018fc:	b170      	cbz	r0, 800191c <_vfiprintf_r+0x5c>
 80018fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001900:	07dc      	lsls	r4, r3, #31
 8001902:	d504      	bpl.n	800190e <_vfiprintf_r+0x4e>
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	b01d      	add	sp, #116	@ 0x74
 800190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800190e:	89ab      	ldrh	r3, [r5, #12]
 8001910:	0598      	lsls	r0, r3, #22
 8001912:	d4f7      	bmi.n	8001904 <_vfiprintf_r+0x44>
 8001914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001916:	f7ff feb1 	bl	800167c <__retarget_lock_release_recursive>
 800191a:	e7f3      	b.n	8001904 <_vfiprintf_r+0x44>
 800191c:	2300      	movs	r3, #0
 800191e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001920:	2320      	movs	r3, #32
 8001922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001926:	f8cd 800c 	str.w	r8, [sp, #12]
 800192a:	2330      	movs	r3, #48	@ 0x30
 800192c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001adc <_vfiprintf_r+0x21c>
 8001930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001934:	f04f 0901 	mov.w	r9, #1
 8001938:	4623      	mov	r3, r4
 800193a:	469a      	mov	sl, r3
 800193c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001940:	b10a      	cbz	r2, 8001946 <_vfiprintf_r+0x86>
 8001942:	2a25      	cmp	r2, #37	@ 0x25
 8001944:	d1f9      	bne.n	800193a <_vfiprintf_r+0x7a>
 8001946:	ebba 0b04 	subs.w	fp, sl, r4
 800194a:	d00b      	beq.n	8001964 <_vfiprintf_r+0xa4>
 800194c:	465b      	mov	r3, fp
 800194e:	4622      	mov	r2, r4
 8001950:	4629      	mov	r1, r5
 8001952:	4630      	mov	r0, r6
 8001954:	f7ff ffa1 	bl	800189a <__sfputs_r>
 8001958:	3001      	adds	r0, #1
 800195a:	f000 80a7 	beq.w	8001aac <_vfiprintf_r+0x1ec>
 800195e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001960:	445a      	add	r2, fp
 8001962:	9209      	str	r2, [sp, #36]	@ 0x24
 8001964:	f89a 3000 	ldrb.w	r3, [sl]
 8001968:	2b00      	cmp	r3, #0
 800196a:	f000 809f 	beq.w	8001aac <_vfiprintf_r+0x1ec>
 800196e:	2300      	movs	r3, #0
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001978:	f10a 0a01 	add.w	sl, sl, #1
 800197c:	9304      	str	r3, [sp, #16]
 800197e:	9307      	str	r3, [sp, #28]
 8001980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001984:	931a      	str	r3, [sp, #104]	@ 0x68
 8001986:	4654      	mov	r4, sl
 8001988:	2205      	movs	r2, #5
 800198a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800198e:	4853      	ldr	r0, [pc, #332]	@ (8001adc <_vfiprintf_r+0x21c>)
 8001990:	f7fe fc5e 	bl	8000250 <memchr>
 8001994:	9a04      	ldr	r2, [sp, #16]
 8001996:	b9d8      	cbnz	r0, 80019d0 <_vfiprintf_r+0x110>
 8001998:	06d1      	lsls	r1, r2, #27
 800199a:	bf44      	itt	mi
 800199c:	2320      	movmi	r3, #32
 800199e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019a2:	0713      	lsls	r3, r2, #28
 80019a4:	bf44      	itt	mi
 80019a6:	232b      	movmi	r3, #43	@ 0x2b
 80019a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80019ac:	f89a 3000 	ldrb.w	r3, [sl]
 80019b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80019b2:	d015      	beq.n	80019e0 <_vfiprintf_r+0x120>
 80019b4:	9a07      	ldr	r2, [sp, #28]
 80019b6:	4654      	mov	r4, sl
 80019b8:	2000      	movs	r0, #0
 80019ba:	f04f 0c0a 	mov.w	ip, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80019c4:	3b30      	subs	r3, #48	@ 0x30
 80019c6:	2b09      	cmp	r3, #9
 80019c8:	d94b      	bls.n	8001a62 <_vfiprintf_r+0x1a2>
 80019ca:	b1b0      	cbz	r0, 80019fa <_vfiprintf_r+0x13a>
 80019cc:	9207      	str	r2, [sp, #28]
 80019ce:	e014      	b.n	80019fa <_vfiprintf_r+0x13a>
 80019d0:	eba0 0308 	sub.w	r3, r0, r8
 80019d4:	fa09 f303 	lsl.w	r3, r9, r3
 80019d8:	4313      	orrs	r3, r2
 80019da:	9304      	str	r3, [sp, #16]
 80019dc:	46a2      	mov	sl, r4
 80019de:	e7d2      	b.n	8001986 <_vfiprintf_r+0xc6>
 80019e0:	9b03      	ldr	r3, [sp, #12]
 80019e2:	1d19      	adds	r1, r3, #4
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	9103      	str	r1, [sp, #12]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bfbb      	ittet	lt
 80019ec:	425b      	neglt	r3, r3
 80019ee:	f042 0202 	orrlt.w	r2, r2, #2
 80019f2:	9307      	strge	r3, [sp, #28]
 80019f4:	9307      	strlt	r3, [sp, #28]
 80019f6:	bfb8      	it	lt
 80019f8:	9204      	strlt	r2, [sp, #16]
 80019fa:	7823      	ldrb	r3, [r4, #0]
 80019fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80019fe:	d10a      	bne.n	8001a16 <_vfiprintf_r+0x156>
 8001a00:	7863      	ldrb	r3, [r4, #1]
 8001a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a04:	d132      	bne.n	8001a6c <_vfiprintf_r+0x1ac>
 8001a06:	9b03      	ldr	r3, [sp, #12]
 8001a08:	1d1a      	adds	r2, r3, #4
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	9203      	str	r2, [sp, #12]
 8001a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001a12:	3402      	adds	r4, #2
 8001a14:	9305      	str	r3, [sp, #20]
 8001a16:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001ae0 <_vfiprintf_r+0x220>
 8001a1a:	7821      	ldrb	r1, [r4, #0]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4650      	mov	r0, sl
 8001a20:	f7fe fc16 	bl	8000250 <memchr>
 8001a24:	b138      	cbz	r0, 8001a36 <_vfiprintf_r+0x176>
 8001a26:	9b04      	ldr	r3, [sp, #16]
 8001a28:	eba0 000a 	sub.w	r0, r0, sl
 8001a2c:	2240      	movs	r2, #64	@ 0x40
 8001a2e:	4082      	lsls	r2, r0
 8001a30:	4313      	orrs	r3, r2
 8001a32:	3401      	adds	r4, #1
 8001a34:	9304      	str	r3, [sp, #16]
 8001a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a3a:	482a      	ldr	r0, [pc, #168]	@ (8001ae4 <_vfiprintf_r+0x224>)
 8001a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001a40:	2206      	movs	r2, #6
 8001a42:	f7fe fc05 	bl	8000250 <memchr>
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d03f      	beq.n	8001aca <_vfiprintf_r+0x20a>
 8001a4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ae8 <_vfiprintf_r+0x228>)
 8001a4c:	bb1b      	cbnz	r3, 8001a96 <_vfiprintf_r+0x1d6>
 8001a4e:	9b03      	ldr	r3, [sp, #12]
 8001a50:	3307      	adds	r3, #7
 8001a52:	f023 0307 	bic.w	r3, r3, #7
 8001a56:	3308      	adds	r3, #8
 8001a58:	9303      	str	r3, [sp, #12]
 8001a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a5c:	443b      	add	r3, r7
 8001a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001a60:	e76a      	b.n	8001938 <_vfiprintf_r+0x78>
 8001a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8001a66:	460c      	mov	r4, r1
 8001a68:	2001      	movs	r0, #1
 8001a6a:	e7a8      	b.n	80019be <_vfiprintf_r+0xfe>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	3401      	adds	r4, #1
 8001a70:	9305      	str	r3, [sp, #20]
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 0c0a 	mov.w	ip, #10
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a7e:	3a30      	subs	r2, #48	@ 0x30
 8001a80:	2a09      	cmp	r2, #9
 8001a82:	d903      	bls.n	8001a8c <_vfiprintf_r+0x1cc>
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0c6      	beq.n	8001a16 <_vfiprintf_r+0x156>
 8001a88:	9105      	str	r1, [sp, #20]
 8001a8a:	e7c4      	b.n	8001a16 <_vfiprintf_r+0x156>
 8001a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a90:	4604      	mov	r4, r0
 8001a92:	2301      	movs	r3, #1
 8001a94:	e7f0      	b.n	8001a78 <_vfiprintf_r+0x1b8>
 8001a96:	ab03      	add	r3, sp, #12
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	462a      	mov	r2, r5
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <_vfiprintf_r+0x22c>)
 8001a9e:	a904      	add	r1, sp, #16
 8001aa0:	4630      	mov	r0, r6
 8001aa2:	f3af 8000 	nop.w
 8001aa6:	4607      	mov	r7, r0
 8001aa8:	1c78      	adds	r0, r7, #1
 8001aaa:	d1d6      	bne.n	8001a5a <_vfiprintf_r+0x19a>
 8001aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001aae:	07d9      	lsls	r1, r3, #31
 8001ab0:	d405      	bmi.n	8001abe <_vfiprintf_r+0x1fe>
 8001ab2:	89ab      	ldrh	r3, [r5, #12]
 8001ab4:	059a      	lsls	r2, r3, #22
 8001ab6:	d402      	bmi.n	8001abe <_vfiprintf_r+0x1fe>
 8001ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001aba:	f7ff fddf 	bl	800167c <__retarget_lock_release_recursive>
 8001abe:	89ab      	ldrh	r3, [r5, #12]
 8001ac0:	065b      	lsls	r3, r3, #25
 8001ac2:	f53f af1f 	bmi.w	8001904 <_vfiprintf_r+0x44>
 8001ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ac8:	e71e      	b.n	8001908 <_vfiprintf_r+0x48>
 8001aca:	ab03      	add	r3, sp, #12
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	462a      	mov	r2, r5
 8001ad0:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <_vfiprintf_r+0x22c>)
 8001ad2:	a904      	add	r1, sp, #16
 8001ad4:	4630      	mov	r0, r6
 8001ad6:	f000 f879 	bl	8001bcc <_printf_i>
 8001ada:	e7e4      	b.n	8001aa6 <_vfiprintf_r+0x1e6>
 8001adc:	080026fd 	.word	0x080026fd
 8001ae0:	08002703 	.word	0x08002703
 8001ae4:	08002707 	.word	0x08002707
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	0800189b 	.word	0x0800189b

08001af0 <_printf_common>:
 8001af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	4616      	mov	r6, r2
 8001af6:	4698      	mov	r8, r3
 8001af8:	688a      	ldr	r2, [r1, #8]
 8001afa:	690b      	ldr	r3, [r1, #16]
 8001afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b00:	4293      	cmp	r3, r2
 8001b02:	bfb8      	it	lt
 8001b04:	4613      	movlt	r3, r2
 8001b06:	6033      	str	r3, [r6, #0]
 8001b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b0c:	4607      	mov	r7, r0
 8001b0e:	460c      	mov	r4, r1
 8001b10:	b10a      	cbz	r2, 8001b16 <_printf_common+0x26>
 8001b12:	3301      	adds	r3, #1
 8001b14:	6033      	str	r3, [r6, #0]
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	0699      	lsls	r1, r3, #26
 8001b1a:	bf42      	ittt	mi
 8001b1c:	6833      	ldrmi	r3, [r6, #0]
 8001b1e:	3302      	addmi	r3, #2
 8001b20:	6033      	strmi	r3, [r6, #0]
 8001b22:	6825      	ldr	r5, [r4, #0]
 8001b24:	f015 0506 	ands.w	r5, r5, #6
 8001b28:	d106      	bne.n	8001b38 <_printf_common+0x48>
 8001b2a:	f104 0a19 	add.w	sl, r4, #25
 8001b2e:	68e3      	ldr	r3, [r4, #12]
 8001b30:	6832      	ldr	r2, [r6, #0]
 8001b32:	1a9b      	subs	r3, r3, r2
 8001b34:	42ab      	cmp	r3, r5
 8001b36:	dc26      	bgt.n	8001b86 <_printf_common+0x96>
 8001b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001b3c:	6822      	ldr	r2, [r4, #0]
 8001b3e:	3b00      	subs	r3, #0
 8001b40:	bf18      	it	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	0692      	lsls	r2, r2, #26
 8001b46:	d42b      	bmi.n	8001ba0 <_printf_common+0xb0>
 8001b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	4638      	mov	r0, r7
 8001b50:	47c8      	blx	r9
 8001b52:	3001      	adds	r0, #1
 8001b54:	d01e      	beq.n	8001b94 <_printf_common+0xa4>
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	6922      	ldr	r2, [r4, #16]
 8001b5a:	f003 0306 	and.w	r3, r3, #6
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf02      	ittt	eq
 8001b62:	68e5      	ldreq	r5, [r4, #12]
 8001b64:	6833      	ldreq	r3, [r6, #0]
 8001b66:	1aed      	subeq	r5, r5, r3
 8001b68:	68a3      	ldr	r3, [r4, #8]
 8001b6a:	bf0c      	ite	eq
 8001b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b70:	2500      	movne	r5, #0
 8001b72:	4293      	cmp	r3, r2
 8001b74:	bfc4      	itt	gt
 8001b76:	1a9b      	subgt	r3, r3, r2
 8001b78:	18ed      	addgt	r5, r5, r3
 8001b7a:	2600      	movs	r6, #0
 8001b7c:	341a      	adds	r4, #26
 8001b7e:	42b5      	cmp	r5, r6
 8001b80:	d11a      	bne.n	8001bb8 <_printf_common+0xc8>
 8001b82:	2000      	movs	r0, #0
 8001b84:	e008      	b.n	8001b98 <_printf_common+0xa8>
 8001b86:	2301      	movs	r3, #1
 8001b88:	4652      	mov	r2, sl
 8001b8a:	4641      	mov	r1, r8
 8001b8c:	4638      	mov	r0, r7
 8001b8e:	47c8      	blx	r9
 8001b90:	3001      	adds	r0, #1
 8001b92:	d103      	bne.n	8001b9c <_printf_common+0xac>
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b9c:	3501      	adds	r5, #1
 8001b9e:	e7c6      	b.n	8001b2e <_printf_common+0x3e>
 8001ba0:	18e1      	adds	r1, r4, r3
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	2030      	movs	r0, #48	@ 0x30
 8001ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001baa:	4422      	add	r2, r4
 8001bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	e7c7      	b.n	8001b48 <_printf_common+0x58>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	4622      	mov	r2, r4
 8001bbc:	4641      	mov	r1, r8
 8001bbe:	4638      	mov	r0, r7
 8001bc0:	47c8      	blx	r9
 8001bc2:	3001      	adds	r0, #1
 8001bc4:	d0e6      	beq.n	8001b94 <_printf_common+0xa4>
 8001bc6:	3601      	adds	r6, #1
 8001bc8:	e7d9      	b.n	8001b7e <_printf_common+0x8e>
	...

08001bcc <_printf_i>:
 8001bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd0:	7e0f      	ldrb	r7, [r1, #24]
 8001bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001bd4:	2f78      	cmp	r7, #120	@ 0x78
 8001bd6:	4691      	mov	r9, r2
 8001bd8:	4680      	mov	r8, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	469a      	mov	sl, r3
 8001bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001be2:	d807      	bhi.n	8001bf4 <_printf_i+0x28>
 8001be4:	2f62      	cmp	r7, #98	@ 0x62
 8001be6:	d80a      	bhi.n	8001bfe <_printf_i+0x32>
 8001be8:	2f00      	cmp	r7, #0
 8001bea:	f000 80d1 	beq.w	8001d90 <_printf_i+0x1c4>
 8001bee:	2f58      	cmp	r7, #88	@ 0x58
 8001bf0:	f000 80b8 	beq.w	8001d64 <_printf_i+0x198>
 8001bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001bfc:	e03a      	b.n	8001c74 <_printf_i+0xa8>
 8001bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c02:	2b15      	cmp	r3, #21
 8001c04:	d8f6      	bhi.n	8001bf4 <_printf_i+0x28>
 8001c06:	a101      	add	r1, pc, #4	@ (adr r1, 8001c0c <_printf_i+0x40>)
 8001c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c0c:	08001c65 	.word	0x08001c65
 8001c10:	08001c79 	.word	0x08001c79
 8001c14:	08001bf5 	.word	0x08001bf5
 8001c18:	08001bf5 	.word	0x08001bf5
 8001c1c:	08001bf5 	.word	0x08001bf5
 8001c20:	08001bf5 	.word	0x08001bf5
 8001c24:	08001c79 	.word	0x08001c79
 8001c28:	08001bf5 	.word	0x08001bf5
 8001c2c:	08001bf5 	.word	0x08001bf5
 8001c30:	08001bf5 	.word	0x08001bf5
 8001c34:	08001bf5 	.word	0x08001bf5
 8001c38:	08001d77 	.word	0x08001d77
 8001c3c:	08001ca3 	.word	0x08001ca3
 8001c40:	08001d31 	.word	0x08001d31
 8001c44:	08001bf5 	.word	0x08001bf5
 8001c48:	08001bf5 	.word	0x08001bf5
 8001c4c:	08001d99 	.word	0x08001d99
 8001c50:	08001bf5 	.word	0x08001bf5
 8001c54:	08001ca3 	.word	0x08001ca3
 8001c58:	08001bf5 	.word	0x08001bf5
 8001c5c:	08001bf5 	.word	0x08001bf5
 8001c60:	08001d39 	.word	0x08001d39
 8001c64:	6833      	ldr	r3, [r6, #0]
 8001c66:	1d1a      	adds	r2, r3, #4
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6032      	str	r2, [r6, #0]
 8001c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c74:	2301      	movs	r3, #1
 8001c76:	e09c      	b.n	8001db2 <_printf_i+0x1e6>
 8001c78:	6833      	ldr	r3, [r6, #0]
 8001c7a:	6820      	ldr	r0, [r4, #0]
 8001c7c:	1d19      	adds	r1, r3, #4
 8001c7e:	6031      	str	r1, [r6, #0]
 8001c80:	0606      	lsls	r6, r0, #24
 8001c82:	d501      	bpl.n	8001c88 <_printf_i+0xbc>
 8001c84:	681d      	ldr	r5, [r3, #0]
 8001c86:	e003      	b.n	8001c90 <_printf_i+0xc4>
 8001c88:	0645      	lsls	r5, r0, #25
 8001c8a:	d5fb      	bpl.n	8001c84 <_printf_i+0xb8>
 8001c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c90:	2d00      	cmp	r5, #0
 8001c92:	da03      	bge.n	8001c9c <_printf_i+0xd0>
 8001c94:	232d      	movs	r3, #45	@ 0x2d
 8001c96:	426d      	negs	r5, r5
 8001c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c9c:	4858      	ldr	r0, [pc, #352]	@ (8001e00 <_printf_i+0x234>)
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	e011      	b.n	8001cc6 <_printf_i+0xfa>
 8001ca2:	6821      	ldr	r1, [r4, #0]
 8001ca4:	6833      	ldr	r3, [r6, #0]
 8001ca6:	0608      	lsls	r0, r1, #24
 8001ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001cac:	d402      	bmi.n	8001cb4 <_printf_i+0xe8>
 8001cae:	0649      	lsls	r1, r1, #25
 8001cb0:	bf48      	it	mi
 8001cb2:	b2ad      	uxthmi	r5, r5
 8001cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001cb6:	4852      	ldr	r0, [pc, #328]	@ (8001e00 <_printf_i+0x234>)
 8001cb8:	6033      	str	r3, [r6, #0]
 8001cba:	bf14      	ite	ne
 8001cbc:	230a      	movne	r3, #10
 8001cbe:	2308      	moveq	r3, #8
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001cc6:	6866      	ldr	r6, [r4, #4]
 8001cc8:	60a6      	str	r6, [r4, #8]
 8001cca:	2e00      	cmp	r6, #0
 8001ccc:	db05      	blt.n	8001cda <_printf_i+0x10e>
 8001cce:	6821      	ldr	r1, [r4, #0]
 8001cd0:	432e      	orrs	r6, r5
 8001cd2:	f021 0104 	bic.w	r1, r1, #4
 8001cd6:	6021      	str	r1, [r4, #0]
 8001cd8:	d04b      	beq.n	8001d72 <_printf_i+0x1a6>
 8001cda:	4616      	mov	r6, r2
 8001cdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8001ce0:	fb03 5711 	mls	r7, r3, r1, r5
 8001ce4:	5dc7      	ldrb	r7, [r0, r7]
 8001ce6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001cea:	462f      	mov	r7, r5
 8001cec:	42bb      	cmp	r3, r7
 8001cee:	460d      	mov	r5, r1
 8001cf0:	d9f4      	bls.n	8001cdc <_printf_i+0x110>
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d10b      	bne.n	8001d0e <_printf_i+0x142>
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	07df      	lsls	r7, r3, #31
 8001cfa:	d508      	bpl.n	8001d0e <_printf_i+0x142>
 8001cfc:	6923      	ldr	r3, [r4, #16]
 8001cfe:	6861      	ldr	r1, [r4, #4]
 8001d00:	4299      	cmp	r1, r3
 8001d02:	bfde      	ittt	le
 8001d04:	2330      	movle	r3, #48	@ 0x30
 8001d06:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d0a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d0e:	1b92      	subs	r2, r2, r6
 8001d10:	6122      	str	r2, [r4, #16]
 8001d12:	f8cd a000 	str.w	sl, [sp]
 8001d16:	464b      	mov	r3, r9
 8001d18:	aa03      	add	r2, sp, #12
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	4640      	mov	r0, r8
 8001d1e:	f7ff fee7 	bl	8001af0 <_printf_common>
 8001d22:	3001      	adds	r0, #1
 8001d24:	d14a      	bne.n	8001dbc <_printf_i+0x1f0>
 8001d26:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2a:	b004      	add	sp, #16
 8001d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	f043 0320 	orr.w	r3, r3, #32
 8001d36:	6023      	str	r3, [r4, #0]
 8001d38:	4832      	ldr	r0, [pc, #200]	@ (8001e04 <_printf_i+0x238>)
 8001d3a:	2778      	movs	r7, #120	@ 0x78
 8001d3c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	6831      	ldr	r1, [r6, #0]
 8001d44:	061f      	lsls	r7, r3, #24
 8001d46:	f851 5b04 	ldr.w	r5, [r1], #4
 8001d4a:	d402      	bmi.n	8001d52 <_printf_i+0x186>
 8001d4c:	065f      	lsls	r7, r3, #25
 8001d4e:	bf48      	it	mi
 8001d50:	b2ad      	uxthmi	r5, r5
 8001d52:	6031      	str	r1, [r6, #0]
 8001d54:	07d9      	lsls	r1, r3, #31
 8001d56:	bf44      	itt	mi
 8001d58:	f043 0320 	orrmi.w	r3, r3, #32
 8001d5c:	6023      	strmi	r3, [r4, #0]
 8001d5e:	b11d      	cbz	r5, 8001d68 <_printf_i+0x19c>
 8001d60:	2310      	movs	r3, #16
 8001d62:	e7ad      	b.n	8001cc0 <_printf_i+0xf4>
 8001d64:	4826      	ldr	r0, [pc, #152]	@ (8001e00 <_printf_i+0x234>)
 8001d66:	e7e9      	b.n	8001d3c <_printf_i+0x170>
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	f023 0320 	bic.w	r3, r3, #32
 8001d6e:	6023      	str	r3, [r4, #0]
 8001d70:	e7f6      	b.n	8001d60 <_printf_i+0x194>
 8001d72:	4616      	mov	r6, r2
 8001d74:	e7bd      	b.n	8001cf2 <_printf_i+0x126>
 8001d76:	6833      	ldr	r3, [r6, #0]
 8001d78:	6825      	ldr	r5, [r4, #0]
 8001d7a:	6961      	ldr	r1, [r4, #20]
 8001d7c:	1d18      	adds	r0, r3, #4
 8001d7e:	6030      	str	r0, [r6, #0]
 8001d80:	062e      	lsls	r6, r5, #24
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	d501      	bpl.n	8001d8a <_printf_i+0x1be>
 8001d86:	6019      	str	r1, [r3, #0]
 8001d88:	e002      	b.n	8001d90 <_printf_i+0x1c4>
 8001d8a:	0668      	lsls	r0, r5, #25
 8001d8c:	d5fb      	bpl.n	8001d86 <_printf_i+0x1ba>
 8001d8e:	8019      	strh	r1, [r3, #0]
 8001d90:	2300      	movs	r3, #0
 8001d92:	6123      	str	r3, [r4, #16]
 8001d94:	4616      	mov	r6, r2
 8001d96:	e7bc      	b.n	8001d12 <_printf_i+0x146>
 8001d98:	6833      	ldr	r3, [r6, #0]
 8001d9a:	1d1a      	adds	r2, r3, #4
 8001d9c:	6032      	str	r2, [r6, #0]
 8001d9e:	681e      	ldr	r6, [r3, #0]
 8001da0:	6862      	ldr	r2, [r4, #4]
 8001da2:	2100      	movs	r1, #0
 8001da4:	4630      	mov	r0, r6
 8001da6:	f7fe fa53 	bl	8000250 <memchr>
 8001daa:	b108      	cbz	r0, 8001db0 <_printf_i+0x1e4>
 8001dac:	1b80      	subs	r0, r0, r6
 8001dae:	6060      	str	r0, [r4, #4]
 8001db0:	6863      	ldr	r3, [r4, #4]
 8001db2:	6123      	str	r3, [r4, #16]
 8001db4:	2300      	movs	r3, #0
 8001db6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001dba:	e7aa      	b.n	8001d12 <_printf_i+0x146>
 8001dbc:	6923      	ldr	r3, [r4, #16]
 8001dbe:	4632      	mov	r2, r6
 8001dc0:	4649      	mov	r1, r9
 8001dc2:	4640      	mov	r0, r8
 8001dc4:	47d0      	blx	sl
 8001dc6:	3001      	adds	r0, #1
 8001dc8:	d0ad      	beq.n	8001d26 <_printf_i+0x15a>
 8001dca:	6823      	ldr	r3, [r4, #0]
 8001dcc:	079b      	lsls	r3, r3, #30
 8001dce:	d413      	bmi.n	8001df8 <_printf_i+0x22c>
 8001dd0:	68e0      	ldr	r0, [r4, #12]
 8001dd2:	9b03      	ldr	r3, [sp, #12]
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	bfb8      	it	lt
 8001dd8:	4618      	movlt	r0, r3
 8001dda:	e7a6      	b.n	8001d2a <_printf_i+0x15e>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	4632      	mov	r2, r6
 8001de0:	4649      	mov	r1, r9
 8001de2:	4640      	mov	r0, r8
 8001de4:	47d0      	blx	sl
 8001de6:	3001      	adds	r0, #1
 8001de8:	d09d      	beq.n	8001d26 <_printf_i+0x15a>
 8001dea:	3501      	adds	r5, #1
 8001dec:	68e3      	ldr	r3, [r4, #12]
 8001dee:	9903      	ldr	r1, [sp, #12]
 8001df0:	1a5b      	subs	r3, r3, r1
 8001df2:	42ab      	cmp	r3, r5
 8001df4:	dcf2      	bgt.n	8001ddc <_printf_i+0x210>
 8001df6:	e7eb      	b.n	8001dd0 <_printf_i+0x204>
 8001df8:	2500      	movs	r5, #0
 8001dfa:	f104 0619 	add.w	r6, r4, #25
 8001dfe:	e7f5      	b.n	8001dec <_printf_i+0x220>
 8001e00:	0800270e 	.word	0x0800270e
 8001e04:	0800271f 	.word	0x0800271f

08001e08 <__sflush_r>:
 8001e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0e:	0716      	lsls	r6, r2, #28
 8001e10:	4605      	mov	r5, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	d454      	bmi.n	8001ec0 <__sflush_r+0xb8>
 8001e16:	684b      	ldr	r3, [r1, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	dc02      	bgt.n	8001e22 <__sflush_r+0x1a>
 8001e1c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	dd48      	ble.n	8001eb4 <__sflush_r+0xac>
 8001e22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e24:	2e00      	cmp	r6, #0
 8001e26:	d045      	beq.n	8001eb4 <__sflush_r+0xac>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001e2e:	682f      	ldr	r7, [r5, #0]
 8001e30:	6a21      	ldr	r1, [r4, #32]
 8001e32:	602b      	str	r3, [r5, #0]
 8001e34:	d030      	beq.n	8001e98 <__sflush_r+0x90>
 8001e36:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001e38:	89a3      	ldrh	r3, [r4, #12]
 8001e3a:	0759      	lsls	r1, r3, #29
 8001e3c:	d505      	bpl.n	8001e4a <__sflush_r+0x42>
 8001e3e:	6863      	ldr	r3, [r4, #4]
 8001e40:	1ad2      	subs	r2, r2, r3
 8001e42:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e44:	b10b      	cbz	r3, 8001e4a <__sflush_r+0x42>
 8001e46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e48:	1ad2      	subs	r2, r2, r3
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001e4e:	6a21      	ldr	r1, [r4, #32]
 8001e50:	4628      	mov	r0, r5
 8001e52:	47b0      	blx	r6
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	d106      	bne.n	8001e68 <__sflush_r+0x60>
 8001e5a:	6829      	ldr	r1, [r5, #0]
 8001e5c:	291d      	cmp	r1, #29
 8001e5e:	d82b      	bhi.n	8001eb8 <__sflush_r+0xb0>
 8001e60:	4a28      	ldr	r2, [pc, #160]	@ (8001f04 <__sflush_r+0xfc>)
 8001e62:	40ca      	lsrs	r2, r1
 8001e64:	07d6      	lsls	r6, r2, #31
 8001e66:	d527      	bpl.n	8001eb8 <__sflush_r+0xb0>
 8001e68:	2200      	movs	r2, #0
 8001e6a:	6062      	str	r2, [r4, #4]
 8001e6c:	04d9      	lsls	r1, r3, #19
 8001e6e:	6922      	ldr	r2, [r4, #16]
 8001e70:	6022      	str	r2, [r4, #0]
 8001e72:	d504      	bpl.n	8001e7e <__sflush_r+0x76>
 8001e74:	1c42      	adds	r2, r0, #1
 8001e76:	d101      	bne.n	8001e7c <__sflush_r+0x74>
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	b903      	cbnz	r3, 8001e7e <__sflush_r+0x76>
 8001e7c:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e7e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e80:	602f      	str	r7, [r5, #0]
 8001e82:	b1b9      	cbz	r1, 8001eb4 <__sflush_r+0xac>
 8001e84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e88:	4299      	cmp	r1, r3
 8001e8a:	d002      	beq.n	8001e92 <__sflush_r+0x8a>
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	f7ff fbf7 	bl	8001680 <_free_r>
 8001e92:	2300      	movs	r3, #0
 8001e94:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e96:	e00d      	b.n	8001eb4 <__sflush_r+0xac>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	4628      	mov	r0, r5
 8001e9c:	47b0      	blx	r6
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	1c50      	adds	r0, r2, #1
 8001ea2:	d1c9      	bne.n	8001e38 <__sflush_r+0x30>
 8001ea4:	682b      	ldr	r3, [r5, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0c6      	beq.n	8001e38 <__sflush_r+0x30>
 8001eaa:	2b1d      	cmp	r3, #29
 8001eac:	d001      	beq.n	8001eb2 <__sflush_r+0xaa>
 8001eae:	2b16      	cmp	r3, #22
 8001eb0:	d11d      	bne.n	8001eee <__sflush_r+0xe6>
 8001eb2:	602f      	str	r7, [r5, #0]
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	e021      	b.n	8001efc <__sflush_r+0xf4>
 8001eb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	e01a      	b.n	8001ef6 <__sflush_r+0xee>
 8001ec0:	690f      	ldr	r7, [r1, #16]
 8001ec2:	2f00      	cmp	r7, #0
 8001ec4:	d0f6      	beq.n	8001eb4 <__sflush_r+0xac>
 8001ec6:	0793      	lsls	r3, r2, #30
 8001ec8:	680e      	ldr	r6, [r1, #0]
 8001eca:	bf08      	it	eq
 8001ecc:	694b      	ldreq	r3, [r1, #20]
 8001ece:	600f      	str	r7, [r1, #0]
 8001ed0:	bf18      	it	ne
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	1bf6      	subs	r6, r6, r7
 8001ed6:	608b      	str	r3, [r1, #8]
 8001ed8:	2e00      	cmp	r6, #0
 8001eda:	ddeb      	ble.n	8001eb4 <__sflush_r+0xac>
 8001edc:	6a21      	ldr	r1, [r4, #32]
 8001ede:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8001ee2:	4633      	mov	r3, r6
 8001ee4:	463a      	mov	r2, r7
 8001ee6:	4628      	mov	r0, r5
 8001ee8:	47e0      	blx	ip
 8001eea:	2800      	cmp	r0, #0
 8001eec:	dc07      	bgt.n	8001efe <__sflush_r+0xf6>
 8001eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ef6:	81a3      	strh	r3, [r4, #12]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001efe:	4407      	add	r7, r0
 8001f00:	1a36      	subs	r6, r6, r0
 8001f02:	e7e9      	b.n	8001ed8 <__sflush_r+0xd0>
 8001f04:	20400001 	.word	0x20400001

08001f08 <_fflush_r>:
 8001f08:	b538      	push	{r3, r4, r5, lr}
 8001f0a:	690b      	ldr	r3, [r1, #16]
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	460c      	mov	r4, r1
 8001f10:	b913      	cbnz	r3, 8001f18 <_fflush_r+0x10>
 8001f12:	2500      	movs	r5, #0
 8001f14:	4628      	mov	r0, r5
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
 8001f18:	b118      	cbz	r0, 8001f22 <_fflush_r+0x1a>
 8001f1a:	6a03      	ldr	r3, [r0, #32]
 8001f1c:	b90b      	cbnz	r3, 8001f22 <_fflush_r+0x1a>
 8001f1e:	f7ff f9bb 	bl	8001298 <__sinit>
 8001f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f3      	beq.n	8001f12 <_fflush_r+0xa>
 8001f2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001f2c:	07d0      	lsls	r0, r2, #31
 8001f2e:	d404      	bmi.n	8001f3a <_fflush_r+0x32>
 8001f30:	0599      	lsls	r1, r3, #22
 8001f32:	d402      	bmi.n	8001f3a <_fflush_r+0x32>
 8001f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f36:	f7ff fba0 	bl	800167a <__retarget_lock_acquire_recursive>
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	4621      	mov	r1, r4
 8001f3e:	f7ff ff63 	bl	8001e08 <__sflush_r>
 8001f42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001f44:	07da      	lsls	r2, r3, #31
 8001f46:	4605      	mov	r5, r0
 8001f48:	d4e4      	bmi.n	8001f14 <_fflush_r+0xc>
 8001f4a:	89a3      	ldrh	r3, [r4, #12]
 8001f4c:	059b      	lsls	r3, r3, #22
 8001f4e:	d4e1      	bmi.n	8001f14 <_fflush_r+0xc>
 8001f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001f52:	f7ff fb93 	bl	800167c <__retarget_lock_release_recursive>
 8001f56:	e7dd      	b.n	8001f14 <_fflush_r+0xc>

08001f58 <__swhatbuf_r>:
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f60:	2900      	cmp	r1, #0
 8001f62:	b096      	sub	sp, #88	@ 0x58
 8001f64:	4615      	mov	r5, r2
 8001f66:	461e      	mov	r6, r3
 8001f68:	da0d      	bge.n	8001f86 <__swhatbuf_r+0x2e>
 8001f6a:	89a3      	ldrh	r3, [r4, #12]
 8001f6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f70:	f04f 0100 	mov.w	r1, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2340      	movne	r3, #64	@ 0x40
 8001f78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	6031      	str	r1, [r6, #0]
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	b016      	add	sp, #88	@ 0x58
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
 8001f86:	466a      	mov	r2, sp
 8001f88:	f000 f848 	bl	800201c <_fstat_r>
 8001f8c:	2800      	cmp	r0, #0
 8001f8e:	dbec      	blt.n	8001f6a <__swhatbuf_r+0x12>
 8001f90:	9901      	ldr	r1, [sp, #4]
 8001f92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f9a:	4259      	negs	r1, r3
 8001f9c:	4159      	adcs	r1, r3
 8001f9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fa2:	e7eb      	b.n	8001f7c <__swhatbuf_r+0x24>

08001fa4 <__smakebuf_r>:
 8001fa4:	898b      	ldrh	r3, [r1, #12]
 8001fa6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fa8:	079d      	lsls	r5, r3, #30
 8001faa:	4606      	mov	r6, r0
 8001fac:	460c      	mov	r4, r1
 8001fae:	d507      	bpl.n	8001fc0 <__smakebuf_r+0x1c>
 8001fb0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001fb4:	6023      	str	r3, [r4, #0]
 8001fb6:	6123      	str	r3, [r4, #16]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	6163      	str	r3, [r4, #20]
 8001fbc:	b003      	add	sp, #12
 8001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc0:	ab01      	add	r3, sp, #4
 8001fc2:	466a      	mov	r2, sp
 8001fc4:	f7ff ffc8 	bl	8001f58 <__swhatbuf_r>
 8001fc8:	9f00      	ldr	r7, [sp, #0]
 8001fca:	4605      	mov	r5, r0
 8001fcc:	4639      	mov	r1, r7
 8001fce:	4630      	mov	r0, r6
 8001fd0:	f7ff fbc2 	bl	8001758 <_malloc_r>
 8001fd4:	b948      	cbnz	r0, 8001fea <__smakebuf_r+0x46>
 8001fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001fda:	059a      	lsls	r2, r3, #22
 8001fdc:	d4ee      	bmi.n	8001fbc <__smakebuf_r+0x18>
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	f043 0302 	orr.w	r3, r3, #2
 8001fe6:	81a3      	strh	r3, [r4, #12]
 8001fe8:	e7e2      	b.n	8001fb0 <__smakebuf_r+0xc>
 8001fea:	89a3      	ldrh	r3, [r4, #12]
 8001fec:	6020      	str	r0, [r4, #0]
 8001fee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ff2:	81a3      	strh	r3, [r4, #12]
 8001ff4:	9b01      	ldr	r3, [sp, #4]
 8001ff6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001ffa:	b15b      	cbz	r3, 8002014 <__smakebuf_r+0x70>
 8001ffc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002000:	4630      	mov	r0, r6
 8002002:	f000 f81d 	bl	8002040 <_isatty_r>
 8002006:	b128      	cbz	r0, 8002014 <__smakebuf_r+0x70>
 8002008:	89a3      	ldrh	r3, [r4, #12]
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	81a3      	strh	r3, [r4, #12]
 8002014:	89a3      	ldrh	r3, [r4, #12]
 8002016:	431d      	orrs	r5, r3
 8002018:	81a5      	strh	r5, [r4, #12]
 800201a:	e7cf      	b.n	8001fbc <__smakebuf_r+0x18>

0800201c <_fstat_r>:
 800201c:	b538      	push	{r3, r4, r5, lr}
 800201e:	4d07      	ldr	r5, [pc, #28]	@ (800203c <_fstat_r+0x20>)
 8002020:	2300      	movs	r3, #0
 8002022:	4604      	mov	r4, r0
 8002024:	4608      	mov	r0, r1
 8002026:	4611      	mov	r1, r2
 8002028:	602b      	str	r3, [r5, #0]
 800202a:	f000 f966 	bl	80022fa <_fstat>
 800202e:	1c43      	adds	r3, r0, #1
 8002030:	d102      	bne.n	8002038 <_fstat_r+0x1c>
 8002032:	682b      	ldr	r3, [r5, #0]
 8002034:	b103      	cbz	r3, 8002038 <_fstat_r+0x1c>
 8002036:	6023      	str	r3, [r4, #0]
 8002038:	bd38      	pop	{r3, r4, r5, pc}
 800203a:	bf00      	nop
 800203c:	200001c0 	.word	0x200001c0

08002040 <_isatty_r>:
 8002040:	b538      	push	{r3, r4, r5, lr}
 8002042:	4d06      	ldr	r5, [pc, #24]	@ (800205c <_isatty_r+0x1c>)
 8002044:	2300      	movs	r3, #0
 8002046:	4604      	mov	r4, r0
 8002048:	4608      	mov	r0, r1
 800204a:	602b      	str	r3, [r5, #0]
 800204c:	f000 faba 	bl	80025c4 <_isatty>
 8002050:	1c43      	adds	r3, r0, #1
 8002052:	d102      	bne.n	800205a <_isatty_r+0x1a>
 8002054:	682b      	ldr	r3, [r5, #0]
 8002056:	b103      	cbz	r3, 800205a <_isatty_r+0x1a>
 8002058:	6023      	str	r3, [r4, #0]
 800205a:	bd38      	pop	{r3, r4, r5, pc}
 800205c:	200001c0 	.word	0x200001c0

08002060 <_sbrk_r>:
 8002060:	b538      	push	{r3, r4, r5, lr}
 8002062:	4d06      	ldr	r5, [pc, #24]	@ (800207c <_sbrk_r+0x1c>)
 8002064:	2300      	movs	r3, #0
 8002066:	4604      	mov	r4, r0
 8002068:	4608      	mov	r0, r1
 800206a:	602b      	str	r3, [r5, #0]
 800206c:	f000 f900 	bl	8002270 <_sbrk>
 8002070:	1c43      	adds	r3, r0, #1
 8002072:	d102      	bne.n	800207a <_sbrk_r+0x1a>
 8002074:	682b      	ldr	r3, [r5, #0]
 8002076:	b103      	cbz	r3, 800207a <_sbrk_r+0x1a>
 8002078:	6023      	str	r3, [r4, #0]
 800207a:	bd38      	pop	{r3, r4, r5, pc}
 800207c:	200001c0 	.word	0x200001c0

08002080 <findslot>:
 8002080:	4b0a      	ldr	r3, [pc, #40]	@ (80020ac <findslot+0x2c>)
 8002082:	b510      	push	{r4, lr}
 8002084:	4604      	mov	r4, r0
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	b118      	cbz	r0, 8002092 <findslot+0x12>
 800208a:	6a03      	ldr	r3, [r0, #32]
 800208c:	b90b      	cbnz	r3, 8002092 <findslot+0x12>
 800208e:	f7ff f903 	bl	8001298 <__sinit>
 8002092:	2c13      	cmp	r4, #19
 8002094:	d807      	bhi.n	80020a6 <findslot+0x26>
 8002096:	4806      	ldr	r0, [pc, #24]	@ (80020b0 <findslot+0x30>)
 8002098:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800209c:	3201      	adds	r2, #1
 800209e:	d002      	beq.n	80020a6 <findslot+0x26>
 80020a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	2000      	movs	r0, #0
 80020a8:	e7fc      	b.n	80020a4 <findslot+0x24>
 80020aa:	bf00      	nop
 80020ac:	2000000c 	.word	0x2000000c
 80020b0:	200001e0 	.word	0x200001e0

080020b4 <error>:
 80020b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020b6:	4604      	mov	r4, r0
 80020b8:	f000 faa2 	bl	8002600 <__errno>
 80020bc:	2613      	movs	r6, #19
 80020be:	4605      	mov	r5, r0
 80020c0:	2700      	movs	r7, #0
 80020c2:	4630      	mov	r0, r6
 80020c4:	4639      	mov	r1, r7
 80020c6:	beab      	bkpt	0x00ab
 80020c8:	4606      	mov	r6, r0
 80020ca:	602e      	str	r6, [r5, #0]
 80020cc:	4620      	mov	r0, r4
 80020ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080020d0 <checkerror>:
 80020d0:	1c43      	adds	r3, r0, #1
 80020d2:	d101      	bne.n	80020d8 <checkerror+0x8>
 80020d4:	f7ff bfee 	b.w	80020b4 <error>
 80020d8:	4770      	bx	lr

080020da <_swiread>:
 80020da:	b530      	push	{r4, r5, lr}
 80020dc:	b085      	sub	sp, #20
 80020de:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80020e2:	9203      	str	r2, [sp, #12]
 80020e4:	2406      	movs	r4, #6
 80020e6:	ad01      	add	r5, sp, #4
 80020e8:	4620      	mov	r0, r4
 80020ea:	4629      	mov	r1, r5
 80020ec:	beab      	bkpt	0x00ab
 80020ee:	4604      	mov	r4, r0
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff ffed 	bl	80020d0 <checkerror>
 80020f6:	b005      	add	sp, #20
 80020f8:	bd30      	pop	{r4, r5, pc}

080020fa <_read>:
 80020fa:	b570      	push	{r4, r5, r6, lr}
 80020fc:	460e      	mov	r6, r1
 80020fe:	4614      	mov	r4, r2
 8002100:	f7ff ffbe 	bl	8002080 <findslot>
 8002104:	4605      	mov	r5, r0
 8002106:	b930      	cbnz	r0, 8002116 <_read+0x1c>
 8002108:	f000 fa7a 	bl	8002600 <__errno>
 800210c:	2309      	movs	r3, #9
 800210e:	6003      	str	r3, [r0, #0]
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	6800      	ldr	r0, [r0, #0]
 8002118:	4622      	mov	r2, r4
 800211a:	4631      	mov	r1, r6
 800211c:	f7ff ffdd 	bl	80020da <_swiread>
 8002120:	1c43      	adds	r3, r0, #1
 8002122:	d0f5      	beq.n	8002110 <_read+0x16>
 8002124:	686b      	ldr	r3, [r5, #4]
 8002126:	1a20      	subs	r0, r4, r0
 8002128:	4403      	add	r3, r0
 800212a:	606b      	str	r3, [r5, #4]
 800212c:	e7f2      	b.n	8002114 <_read+0x1a>

0800212e <_swilseek>:
 800212e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002130:	460c      	mov	r4, r1
 8002132:	4616      	mov	r6, r2
 8002134:	f7ff ffa4 	bl	8002080 <findslot>
 8002138:	4605      	mov	r5, r0
 800213a:	b940      	cbnz	r0, 800214e <_swilseek+0x20>
 800213c:	f000 fa60 	bl	8002600 <__errno>
 8002140:	2309      	movs	r3, #9
 8002142:	6003      	str	r3, [r0, #0]
 8002144:	f04f 34ff 	mov.w	r4, #4294967295
 8002148:	4620      	mov	r0, r4
 800214a:	b003      	add	sp, #12
 800214c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800214e:	2e02      	cmp	r6, #2
 8002150:	d903      	bls.n	800215a <_swilseek+0x2c>
 8002152:	f000 fa55 	bl	8002600 <__errno>
 8002156:	2316      	movs	r3, #22
 8002158:	e7f3      	b.n	8002142 <_swilseek+0x14>
 800215a:	2e01      	cmp	r6, #1
 800215c:	d112      	bne.n	8002184 <_swilseek+0x56>
 800215e:	6843      	ldr	r3, [r0, #4]
 8002160:	18e4      	adds	r4, r4, r3
 8002162:	d4f6      	bmi.n	8002152 <_swilseek+0x24>
 8002164:	682b      	ldr	r3, [r5, #0]
 8002166:	260a      	movs	r6, #10
 8002168:	e9cd 3400 	strd	r3, r4, [sp]
 800216c:	466f      	mov	r7, sp
 800216e:	4630      	mov	r0, r6
 8002170:	4639      	mov	r1, r7
 8002172:	beab      	bkpt	0x00ab
 8002174:	4606      	mov	r6, r0
 8002176:	4630      	mov	r0, r6
 8002178:	f7ff ffaa 	bl	80020d0 <checkerror>
 800217c:	2800      	cmp	r0, #0
 800217e:	dbe1      	blt.n	8002144 <_swilseek+0x16>
 8002180:	606c      	str	r4, [r5, #4]
 8002182:	e7e1      	b.n	8002148 <_swilseek+0x1a>
 8002184:	2e02      	cmp	r6, #2
 8002186:	6803      	ldr	r3, [r0, #0]
 8002188:	d1ec      	bne.n	8002164 <_swilseek+0x36>
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	260c      	movs	r6, #12
 800218e:	466f      	mov	r7, sp
 8002190:	4630      	mov	r0, r6
 8002192:	4639      	mov	r1, r7
 8002194:	beab      	bkpt	0x00ab
 8002196:	4606      	mov	r6, r0
 8002198:	4630      	mov	r0, r6
 800219a:	f7ff ff99 	bl	80020d0 <checkerror>
 800219e:	1c43      	adds	r3, r0, #1
 80021a0:	d0d0      	beq.n	8002144 <_swilseek+0x16>
 80021a2:	4404      	add	r4, r0
 80021a4:	e7de      	b.n	8002164 <_swilseek+0x36>

080021a6 <_lseek>:
 80021a6:	f7ff bfc2 	b.w	800212e <_swilseek>

080021aa <_swiwrite>:
 80021aa:	b530      	push	{r4, r5, lr}
 80021ac:	b085      	sub	sp, #20
 80021ae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80021b2:	9203      	str	r2, [sp, #12]
 80021b4:	2405      	movs	r4, #5
 80021b6:	ad01      	add	r5, sp, #4
 80021b8:	4620      	mov	r0, r4
 80021ba:	4629      	mov	r1, r5
 80021bc:	beab      	bkpt	0x00ab
 80021be:	4604      	mov	r4, r0
 80021c0:	4620      	mov	r0, r4
 80021c2:	f7ff ff85 	bl	80020d0 <checkerror>
 80021c6:	b005      	add	sp, #20
 80021c8:	bd30      	pop	{r4, r5, pc}

080021ca <_write>:
 80021ca:	b570      	push	{r4, r5, r6, lr}
 80021cc:	460e      	mov	r6, r1
 80021ce:	4615      	mov	r5, r2
 80021d0:	f7ff ff56 	bl	8002080 <findslot>
 80021d4:	4604      	mov	r4, r0
 80021d6:	b930      	cbnz	r0, 80021e6 <_write+0x1c>
 80021d8:	f000 fa12 	bl	8002600 <__errno>
 80021dc:	2309      	movs	r3, #9
 80021de:	6003      	str	r3, [r0, #0]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	6800      	ldr	r0, [r0, #0]
 80021e8:	462a      	mov	r2, r5
 80021ea:	4631      	mov	r1, r6
 80021ec:	f7ff ffdd 	bl	80021aa <_swiwrite>
 80021f0:	1e03      	subs	r3, r0, #0
 80021f2:	dbf5      	blt.n	80021e0 <_write+0x16>
 80021f4:	6862      	ldr	r2, [r4, #4]
 80021f6:	1ae8      	subs	r0, r5, r3
 80021f8:	4402      	add	r2, r0
 80021fa:	42ab      	cmp	r3, r5
 80021fc:	6062      	str	r2, [r4, #4]
 80021fe:	d1f1      	bne.n	80021e4 <_write+0x1a>
 8002200:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002204:	2000      	movs	r0, #0
 8002206:	f7ff bf55 	b.w	80020b4 <error>

0800220a <_swiclose>:
 800220a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800220c:	2402      	movs	r4, #2
 800220e:	9001      	str	r0, [sp, #4]
 8002210:	ad01      	add	r5, sp, #4
 8002212:	4620      	mov	r0, r4
 8002214:	4629      	mov	r1, r5
 8002216:	beab      	bkpt	0x00ab
 8002218:	4604      	mov	r4, r0
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff ff58 	bl	80020d0 <checkerror>
 8002220:	b003      	add	sp, #12
 8002222:	bd30      	pop	{r4, r5, pc}

08002224 <_close>:
 8002224:	b538      	push	{r3, r4, r5, lr}
 8002226:	4605      	mov	r5, r0
 8002228:	f7ff ff2a 	bl	8002080 <findslot>
 800222c:	4604      	mov	r4, r0
 800222e:	b930      	cbnz	r0, 800223e <_close+0x1a>
 8002230:	f000 f9e6 	bl	8002600 <__errno>
 8002234:	2309      	movs	r3, #9
 8002236:	6003      	str	r3, [r0, #0]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	bd38      	pop	{r3, r4, r5, pc}
 800223e:	3d01      	subs	r5, #1
 8002240:	2d01      	cmp	r5, #1
 8002242:	d809      	bhi.n	8002258 <_close+0x34>
 8002244:	4b09      	ldr	r3, [pc, #36]	@ (800226c <_close+0x48>)
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	429a      	cmp	r2, r3
 800224c:	d104      	bne.n	8002258 <_close+0x34>
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	6003      	str	r3, [r0, #0]
 8002254:	2000      	movs	r0, #0
 8002256:	e7f1      	b.n	800223c <_close+0x18>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	f7ff ffd6 	bl	800220a <_swiclose>
 800225e:	2800      	cmp	r0, #0
 8002260:	d1ec      	bne.n	800223c <_close+0x18>
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	6023      	str	r3, [r4, #0]
 8002268:	e7e8      	b.n	800223c <_close+0x18>
 800226a:	bf00      	nop
 800226c:	200001e0 	.word	0x200001e0

08002270 <_sbrk>:
 8002270:	4a0d      	ldr	r2, [pc, #52]	@ (80022a8 <_sbrk+0x38>)
 8002272:	6811      	ldr	r1, [r2, #0]
 8002274:	b510      	push	{r4, lr}
 8002276:	4603      	mov	r3, r0
 8002278:	b909      	cbnz	r1, 800227e <_sbrk+0xe>
 800227a:	490c      	ldr	r1, [pc, #48]	@ (80022ac <_sbrk+0x3c>)
 800227c:	6011      	str	r1, [r2, #0]
 800227e:	6810      	ldr	r0, [r2, #0]
 8002280:	4669      	mov	r1, sp
 8002282:	4403      	add	r3, r0
 8002284:	428b      	cmp	r3, r1
 8002286:	d806      	bhi.n	8002296 <_sbrk+0x26>
 8002288:	4909      	ldr	r1, [pc, #36]	@ (80022b0 <_sbrk+0x40>)
 800228a:	4c0a      	ldr	r4, [pc, #40]	@ (80022b4 <_sbrk+0x44>)
 800228c:	6809      	ldr	r1, [r1, #0]
 800228e:	42a1      	cmp	r1, r4
 8002290:	d008      	beq.n	80022a4 <_sbrk+0x34>
 8002292:	428b      	cmp	r3, r1
 8002294:	d906      	bls.n	80022a4 <_sbrk+0x34>
 8002296:	f000 f9b3 	bl	8002600 <__errno>
 800229a:	230c      	movs	r3, #12
 800229c:	6003      	str	r3, [r0, #0]
 800229e:	f04f 30ff 	mov.w	r0, #4294967295
 80022a2:	bd10      	pop	{r4, pc}
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e7fc      	b.n	80022a2 <_sbrk+0x32>
 80022a8:	200001d0 	.word	0x200001d0
 80022ac:	20000280 	.word	0x20000280
 80022b0:	2000005c 	.word	0x2000005c
 80022b4:	cafedead 	.word	0xcafedead

080022b8 <_swistat>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	460c      	mov	r4, r1
 80022bc:	f7ff fee0 	bl	8002080 <findslot>
 80022c0:	4605      	mov	r5, r0
 80022c2:	b930      	cbnz	r0, 80022d2 <_swistat+0x1a>
 80022c4:	f000 f99c 	bl	8002600 <__errno>
 80022c8:	2309      	movs	r3, #9
 80022ca:	6003      	str	r3, [r0, #0]
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
 80022d0:	bd70      	pop	{r4, r5, r6, pc}
 80022d2:	6863      	ldr	r3, [r4, #4]
 80022d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022d8:	6063      	str	r3, [r4, #4]
 80022da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022de:	64a3      	str	r3, [r4, #72]	@ 0x48
 80022e0:	260c      	movs	r6, #12
 80022e2:	4630      	mov	r0, r6
 80022e4:	4629      	mov	r1, r5
 80022e6:	beab      	bkpt	0x00ab
 80022e8:	4605      	mov	r5, r0
 80022ea:	4628      	mov	r0, r5
 80022ec:	f7ff fef0 	bl	80020d0 <checkerror>
 80022f0:	1c43      	adds	r3, r0, #1
 80022f2:	d0eb      	beq.n	80022cc <_swistat+0x14>
 80022f4:	6120      	str	r0, [r4, #16]
 80022f6:	2000      	movs	r0, #0
 80022f8:	e7ea      	b.n	80022d0 <_swistat+0x18>

080022fa <_fstat>:
 80022fa:	460b      	mov	r3, r1
 80022fc:	b510      	push	{r4, lr}
 80022fe:	2100      	movs	r1, #0
 8002300:	4604      	mov	r4, r0
 8002302:	2258      	movs	r2, #88	@ 0x58
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff f945 	bl	8001594 <memset>
 800230a:	4601      	mov	r1, r0
 800230c:	4620      	mov	r0, r4
 800230e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002312:	f7ff bfd1 	b.w	80022b8 <_swistat>

08002316 <_stat>:
 8002316:	b538      	push	{r3, r4, r5, lr}
 8002318:	460d      	mov	r5, r1
 800231a:	4604      	mov	r4, r0
 800231c:	2258      	movs	r2, #88	@ 0x58
 800231e:	2100      	movs	r1, #0
 8002320:	4628      	mov	r0, r5
 8002322:	f7ff f937 	bl	8001594 <memset>
 8002326:	4620      	mov	r0, r4
 8002328:	2100      	movs	r1, #0
 800232a:	f000 f811 	bl	8002350 <_swiopen>
 800232e:	1c43      	adds	r3, r0, #1
 8002330:	4604      	mov	r4, r0
 8002332:	d00b      	beq.n	800234c <_stat+0x36>
 8002334:	686b      	ldr	r3, [r5, #4]
 8002336:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800233a:	606b      	str	r3, [r5, #4]
 800233c:	4629      	mov	r1, r5
 800233e:	f7ff ffbb 	bl	80022b8 <_swistat>
 8002342:	4605      	mov	r5, r0
 8002344:	4620      	mov	r0, r4
 8002346:	f7ff ff6d 	bl	8002224 <_close>
 800234a:	462c      	mov	r4, r5
 800234c:	4620      	mov	r0, r4
 800234e:	bd38      	pop	{r3, r4, r5, pc}

08002350 <_swiopen>:
 8002350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002354:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8002400 <_swiopen+0xb0>
 8002358:	b096      	sub	sp, #88	@ 0x58
 800235a:	4607      	mov	r7, r0
 800235c:	460e      	mov	r6, r1
 800235e:	2400      	movs	r4, #0
 8002360:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8002364:	3301      	adds	r3, #1
 8002366:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800236a:	d032      	beq.n	80023d2 <_swiopen+0x82>
 800236c:	3401      	adds	r4, #1
 800236e:	2c14      	cmp	r4, #20
 8002370:	d1f6      	bne.n	8002360 <_swiopen+0x10>
 8002372:	f000 f945 	bl	8002600 <__errno>
 8002376:	2318      	movs	r3, #24
 8002378:	e03a      	b.n	80023f0 <_swiopen+0xa0>
 800237a:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800237e:	f240 6301 	movw	r3, #1537	@ 0x601
 8002382:	07b2      	lsls	r2, r6, #30
 8002384:	bf48      	it	mi
 8002386:	f045 0502 	orrmi.w	r5, r5, #2
 800238a:	421e      	tst	r6, r3
 800238c:	bf18      	it	ne
 800238e:	f045 0504 	orrne.w	r5, r5, #4
 8002392:	0733      	lsls	r3, r6, #28
 8002394:	bf48      	it	mi
 8002396:	f025 0504 	bicmi.w	r5, r5, #4
 800239a:	4638      	mov	r0, r7
 800239c:	bf48      	it	mi
 800239e:	f045 0508 	orrmi.w	r5, r5, #8
 80023a2:	9700      	str	r7, [sp, #0]
 80023a4:	f7fd ff4c 	bl	8000240 <strlen>
 80023a8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80023ac:	2501      	movs	r5, #1
 80023ae:	4628      	mov	r0, r5
 80023b0:	4651      	mov	r1, sl
 80023b2:	beab      	bkpt	0x00ab
 80023b4:	4605      	mov	r5, r0
 80023b6:	2d00      	cmp	r5, #0
 80023b8:	db06      	blt.n	80023c8 <_swiopen+0x78>
 80023ba:	44c8      	add	r8, r9
 80023bc:	2300      	movs	r3, #0
 80023be:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80023c2:	f8c8 3004 	str.w	r3, [r8, #4]
 80023c6:	e016      	b.n	80023f6 <_swiopen+0xa6>
 80023c8:	4628      	mov	r0, r5
 80023ca:	f7ff fe73 	bl	80020b4 <error>
 80023ce:	4604      	mov	r4, r0
 80023d0:	e011      	b.n	80023f6 <_swiopen+0xa6>
 80023d2:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80023d6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80023da:	46ea      	mov	sl, sp
 80023dc:	d1cd      	bne.n	800237a <_swiopen+0x2a>
 80023de:	4651      	mov	r1, sl
 80023e0:	4638      	mov	r0, r7
 80023e2:	f7ff ff98 	bl	8002316 <_stat>
 80023e6:	3001      	adds	r0, #1
 80023e8:	d0c7      	beq.n	800237a <_swiopen+0x2a>
 80023ea:	f000 f909 	bl	8002600 <__errno>
 80023ee:	2311      	movs	r3, #17
 80023f0:	6003      	str	r3, [r0, #0]
 80023f2:	f04f 34ff 	mov.w	r4, #4294967295
 80023f6:	4620      	mov	r0, r4
 80023f8:	b016      	add	sp, #88	@ 0x58
 80023fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fe:	bf00      	nop
 8002400:	200001e0 	.word	0x200001e0

08002404 <_get_semihosting_exts>:
 8002404:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002408:	4606      	mov	r6, r0
 800240a:	460f      	mov	r7, r1
 800240c:	4829      	ldr	r0, [pc, #164]	@ (80024b4 <_get_semihosting_exts+0xb0>)
 800240e:	2100      	movs	r1, #0
 8002410:	4615      	mov	r5, r2
 8002412:	f7ff ff9d 	bl	8002350 <_swiopen>
 8002416:	462a      	mov	r2, r5
 8002418:	4604      	mov	r4, r0
 800241a:	2100      	movs	r1, #0
 800241c:	4630      	mov	r0, r6
 800241e:	f7ff f8b9 	bl	8001594 <memset>
 8002422:	1c63      	adds	r3, r4, #1
 8002424:	d014      	beq.n	8002450 <_get_semihosting_exts+0x4c>
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff fe2a 	bl	8002080 <findslot>
 800242c:	f04f 080c 	mov.w	r8, #12
 8002430:	4681      	mov	r9, r0
 8002432:	4640      	mov	r0, r8
 8002434:	4649      	mov	r1, r9
 8002436:	beab      	bkpt	0x00ab
 8002438:	4680      	mov	r8, r0
 800243a:	4640      	mov	r0, r8
 800243c:	f7ff fe48 	bl	80020d0 <checkerror>
 8002440:	2803      	cmp	r0, #3
 8002442:	dd02      	ble.n	800244a <_get_semihosting_exts+0x46>
 8002444:	1ec3      	subs	r3, r0, #3
 8002446:	42ab      	cmp	r3, r5
 8002448:	dc07      	bgt.n	800245a <_get_semihosting_exts+0x56>
 800244a:	4620      	mov	r0, r4
 800244c:	f7ff feea 	bl	8002224 <_close>
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	b003      	add	sp, #12
 8002456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800245a:	2204      	movs	r2, #4
 800245c:	eb0d 0102 	add.w	r1, sp, r2
 8002460:	4620      	mov	r0, r4
 8002462:	f7ff fe4a 	bl	80020fa <_read>
 8002466:	2803      	cmp	r0, #3
 8002468:	ddef      	ble.n	800244a <_get_semihosting_exts+0x46>
 800246a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800246e:	2b53      	cmp	r3, #83	@ 0x53
 8002470:	d1eb      	bne.n	800244a <_get_semihosting_exts+0x46>
 8002472:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002476:	2b48      	cmp	r3, #72	@ 0x48
 8002478:	d1e7      	bne.n	800244a <_get_semihosting_exts+0x46>
 800247a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800247e:	2b46      	cmp	r3, #70	@ 0x46
 8002480:	d1e3      	bne.n	800244a <_get_semihosting_exts+0x46>
 8002482:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002486:	2b42      	cmp	r3, #66	@ 0x42
 8002488:	d1df      	bne.n	800244a <_get_semihosting_exts+0x46>
 800248a:	2201      	movs	r2, #1
 800248c:	4639      	mov	r1, r7
 800248e:	4620      	mov	r0, r4
 8002490:	f7ff fe4d 	bl	800212e <_swilseek>
 8002494:	2800      	cmp	r0, #0
 8002496:	dbd8      	blt.n	800244a <_get_semihosting_exts+0x46>
 8002498:	462a      	mov	r2, r5
 800249a:	4631      	mov	r1, r6
 800249c:	4620      	mov	r0, r4
 800249e:	f7ff fe2c 	bl	80020fa <_read>
 80024a2:	4605      	mov	r5, r0
 80024a4:	4620      	mov	r0, r4
 80024a6:	f7ff febd 	bl	8002224 <_close>
 80024aa:	4628      	mov	r0, r5
 80024ac:	f7ff fe10 	bl	80020d0 <checkerror>
 80024b0:	e7d0      	b.n	8002454 <_get_semihosting_exts+0x50>
 80024b2:	bf00      	nop
 80024b4:	08002730 	.word	0x08002730

080024b8 <initialise_semihosting_exts>:
 80024b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024ba:	4d0a      	ldr	r5, [pc, #40]	@ (80024e4 <initialise_semihosting_exts+0x2c>)
 80024bc:	4c0a      	ldr	r4, [pc, #40]	@ (80024e8 <initialise_semihosting_exts+0x30>)
 80024be:	2100      	movs	r1, #0
 80024c0:	2201      	movs	r2, #1
 80024c2:	a801      	add	r0, sp, #4
 80024c4:	6029      	str	r1, [r5, #0]
 80024c6:	6022      	str	r2, [r4, #0]
 80024c8:	f7ff ff9c 	bl	8002404 <_get_semihosting_exts>
 80024cc:	2800      	cmp	r0, #0
 80024ce:	dd07      	ble.n	80024e0 <initialise_semihosting_exts+0x28>
 80024d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80024d4:	f003 0201 	and.w	r2, r3, #1
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	602a      	str	r2, [r5, #0]
 80024de:	6023      	str	r3, [r4, #0]
 80024e0:	b003      	add	sp, #12
 80024e2:	bd30      	pop	{r4, r5, pc}
 80024e4:	20000064 	.word	0x20000064
 80024e8:	20000060 	.word	0x20000060

080024ec <_has_ext_stdout_stderr>:
 80024ec:	b510      	push	{r4, lr}
 80024ee:	4c04      	ldr	r4, [pc, #16]	@ (8002500 <_has_ext_stdout_stderr+0x14>)
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	da01      	bge.n	80024fa <_has_ext_stdout_stderr+0xe>
 80024f6:	f7ff ffdf 	bl	80024b8 <initialise_semihosting_exts>
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	bd10      	pop	{r4, pc}
 80024fe:	bf00      	nop
 8002500:	20000060 	.word	0x20000060

08002504 <initialise_monitor_handles>:
 8002504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002508:	b085      	sub	sp, #20
 800250a:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 80025b0 <initialise_monitor_handles+0xac>
 800250e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002512:	2303      	movs	r3, #3
 8002514:	2400      	movs	r4, #0
 8002516:	9303      	str	r3, [sp, #12]
 8002518:	af01      	add	r7, sp, #4
 800251a:	9402      	str	r4, [sp, #8]
 800251c:	2501      	movs	r5, #1
 800251e:	4628      	mov	r0, r5
 8002520:	4639      	mov	r1, r7
 8002522:	beab      	bkpt	0x00ab
 8002524:	4605      	mov	r5, r0
 8002526:	f8df 808c 	ldr.w	r8, [pc, #140]	@ 80025b4 <initialise_monitor_handles+0xb0>
 800252a:	4623      	mov	r3, r4
 800252c:	4c22      	ldr	r4, [pc, #136]	@ (80025b8 <initialise_monitor_handles+0xb4>)
 800252e:	f8c8 5000 	str.w	r5, [r8]
 8002532:	f04f 32ff 	mov.w	r2, #4294967295
 8002536:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800253a:	3301      	adds	r3, #1
 800253c:	2b14      	cmp	r3, #20
 800253e:	d1fa      	bne.n	8002536 <initialise_monitor_handles+0x32>
 8002540:	f7ff ffd4 	bl	80024ec <_has_ext_stdout_stderr>
 8002544:	4d1d      	ldr	r5, [pc, #116]	@ (80025bc <initialise_monitor_handles+0xb8>)
 8002546:	b1d0      	cbz	r0, 800257e <initialise_monitor_handles+0x7a>
 8002548:	f04f 0a03 	mov.w	sl, #3
 800254c:	2304      	movs	r3, #4
 800254e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002552:	2601      	movs	r6, #1
 8002554:	f8cd a00c 	str.w	sl, [sp, #12]
 8002558:	9302      	str	r3, [sp, #8]
 800255a:	4630      	mov	r0, r6
 800255c:	4639      	mov	r1, r7
 800255e:	beab      	bkpt	0x00ab
 8002560:	4683      	mov	fp, r0
 8002562:	4b17      	ldr	r3, [pc, #92]	@ (80025c0 <initialise_monitor_handles+0xbc>)
 8002564:	f8cd 9004 	str.w	r9, [sp, #4]
 8002568:	f8c3 b000 	str.w	fp, [r3]
 800256c:	2308      	movs	r3, #8
 800256e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002572:	9302      	str	r3, [sp, #8]
 8002574:	4630      	mov	r0, r6
 8002576:	4639      	mov	r1, r7
 8002578:	beab      	bkpt	0x00ab
 800257a:	4606      	mov	r6, r0
 800257c:	602e      	str	r6, [r5, #0]
 800257e:	682b      	ldr	r3, [r5, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	bf02      	ittt	eq
 8002584:	4b0e      	ldreq	r3, [pc, #56]	@ (80025c0 <initialise_monitor_handles+0xbc>)
 8002586:	681b      	ldreq	r3, [r3, #0]
 8002588:	602b      	streq	r3, [r5, #0]
 800258a:	2600      	movs	r6, #0
 800258c:	f8d8 3000 	ldr.w	r3, [r8]
 8002590:	6023      	str	r3, [r4, #0]
 8002592:	6066      	str	r6, [r4, #4]
 8002594:	f7ff ffaa 	bl	80024ec <_has_ext_stdout_stderr>
 8002598:	b130      	cbz	r0, 80025a8 <initialise_monitor_handles+0xa4>
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <initialise_monitor_handles+0xbc>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80025a2:	682b      	ldr	r3, [r5, #0]
 80025a4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80025a8:	b005      	add	sp, #20
 80025aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ae:	bf00      	nop
 80025b0:	08002746 	.word	0x08002746
 80025b4:	200001dc 	.word	0x200001dc
 80025b8:	200001e0 	.word	0x200001e0
 80025bc:	200001d4 	.word	0x200001d4
 80025c0:	200001d8 	.word	0x200001d8

080025c4 <_isatty>:
 80025c4:	b570      	push	{r4, r5, r6, lr}
 80025c6:	f7ff fd5b 	bl	8002080 <findslot>
 80025ca:	2409      	movs	r4, #9
 80025cc:	4605      	mov	r5, r0
 80025ce:	b920      	cbnz	r0, 80025da <_isatty+0x16>
 80025d0:	f000 f816 	bl	8002600 <__errno>
 80025d4:	6004      	str	r4, [r0, #0]
 80025d6:	2000      	movs	r0, #0
 80025d8:	bd70      	pop	{r4, r5, r6, pc}
 80025da:	4620      	mov	r0, r4
 80025dc:	4629      	mov	r1, r5
 80025de:	beab      	bkpt	0x00ab
 80025e0:	4604      	mov	r4, r0
 80025e2:	2c01      	cmp	r4, #1
 80025e4:	4620      	mov	r0, r4
 80025e6:	d0f7      	beq.n	80025d8 <_isatty+0x14>
 80025e8:	f000 f80a 	bl	8002600 <__errno>
 80025ec:	2513      	movs	r5, #19
 80025ee:	4604      	mov	r4, r0
 80025f0:	2600      	movs	r6, #0
 80025f2:	4628      	mov	r0, r5
 80025f4:	4631      	mov	r1, r6
 80025f6:	beab      	bkpt	0x00ab
 80025f8:	4605      	mov	r5, r0
 80025fa:	6025      	str	r5, [r4, #0]
 80025fc:	e7eb      	b.n	80025d6 <_isatty+0x12>
	...

08002600 <__errno>:
 8002600:	4b01      	ldr	r3, [pc, #4]	@ (8002608 <__errno+0x8>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	2000000c 	.word	0x2000000c

0800260c <_init>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	bf00      	nop
 8002610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002612:	bc08      	pop	{r3}
 8002614:	469e      	mov	lr, r3
 8002616:	4770      	bx	lr

08002618 <_fini>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	bf00      	nop
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr

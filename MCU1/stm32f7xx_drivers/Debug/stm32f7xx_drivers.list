
stm32f7xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000d44  08000d44  00001d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d50  08000d50  00001d60  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000d50  08000d50  00001d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d58  08000d60  00001d60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d58  08000d58  00001d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d5c  08000d5c  00001d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001d60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000d60  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000d60  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001583  00000000  00000000  00001d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e7  00000000  00000000  00003311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  000037f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012a  00000000  00000000  00003990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000026a3  00000000  00000000  00003aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d3d  00000000  00000000  0000615d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000a3f5  00000000  00000000  00007e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001228f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f4  00000000  00000000  000122d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000128c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000000 	.word	0x20000000
 8000214:	00000000 	.word	0x00000000
 8000218:	08000d2c 	.word	0x08000d2c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000004 	.word	0x20000004
 8000234:	08000d2c 	.word	0x08000d2c

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <SPI1_GPIOInits>:
 * PA4 --> SPI1_NSS
 * PB3 --> SPI1_SCK
 * PB4 --> SPI1_MISO
 * PB5 --> SPI1_MOSI
 */
void SPI1_GPIOInits(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800024e:	4b17      	ldr	r3, [pc, #92]	@ (80002ac <SPI1_GPIOInits+0x64>)
 8000250:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000252:	2302      	movs	r3, #2
 8000254:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000256:	2305      	movs	r3, #5
 8000258:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800025e:	2300      	movs	r3, #0
 8000260:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000262:	2302      	movs	r3, #2
 8000264:	72bb      	strb	r3, [r7, #10]

	/* SCLK */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000266:	2303      	movs	r3, #3
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f9f9 	bl	8000664 <GPIO_Init>

	/* MOSI */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000272:	2305      	movs	r3, #5
 8000274:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f9f3 	bl	8000664 <GPIO_Init>

	/* NSS  */
	SPIPins.pGPIOx = GPIOA;
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <SPI1_GPIOInits+0x68>)
 8000280:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000282:	2302      	movs	r3, #2
 8000284:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000286:	2305      	movs	r3, #5
 8000288:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800028a:	2300      	movs	r3, #0
 800028c:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800028e:	2300      	movs	r3, #0
 8000290:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	72bb      	strb	r3, [r7, #10]

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000296:	2304      	movs	r3, #4
 8000298:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f9e1 	bl	8000664 <GPIO_Init>

}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40020400 	.word	0x40020400
 80002b0:	40020000 	.word	0x40020000

080002b4 <SPI1_Inits>:



void SPI1_Inits(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1Handle;

	SPI1Handle.pSPIx = SPI1;
 80002ba:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <SPI1_Inits+0x38>)
 80002bc:	603b      	str	r3, [r7, #0]
	SPI1Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD; //FULL-duplex
 80002be:	2301      	movs	r3, #1
 80002c0:	717b      	strb	r3, [r7, #5]
	SPI1Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002c2:	2301      	movs	r3, #1
 80002c4:	713b      	strb	r3, [r7, #4]
	SPI1Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // Serial clock of 2M Hz
 80002c6:	2302      	movs	r3, #2
 80002c8:	71bb      	strb	r3, [r7, #6]
	SPI1Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002ca:	2300      	movs	r3, #0
 80002cc:	71fb      	strb	r3, [r7, #7]
	SPI1Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002ce:	2300      	movs	r3, #0
 80002d0:	723b      	strb	r3, [r7, #8]
	SPI1Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002d2:	2300      	movs	r3, #0
 80002d4:	727b      	strb	r3, [r7, #9]
	SPI1Handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //using hardware slave management
 80002d6:	2300      	movs	r3, #0
 80002d8:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI1Handle);
 80002da:	463b      	mov	r3, r7
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 fc27 	bl	8000b30 <SPI_Init>
}
 80002e2:	bf00      	nop
 80002e4:	3720      	adds	r7, #32
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40013000 	.word	0x40013000

080002f0 <GPIOButtonInit>:

void GPIOButtonInit(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b084      	sub	sp, #16
 80002f4:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIO_Btn;
	/* USER button on PC13, Pressed -> HIGH */
	/* don't need to care out type cause Button is input */
	GPIO_Btn.pGPIOx = GPIOC;
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <GPIOButtonInit+0x2c>)
 80002f8:	607b      	str	r3, [r7, #4]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80002fa:	230d      	movs	r3, #13
 80002fc:	723b      	strb	r3, [r7, #8]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002fe:	2300      	movs	r3, #0
 8000300:	727b      	strb	r3, [r7, #9]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000302:	2302      	movs	r3, #2
 8000304:	72bb      	strb	r3, [r7, #10]
	GPIO_Btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD; //btn has external pull down, don't care internal
 8000306:	2300      	movs	r3, #0
 8000308:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIO_Btn);
 800030a:	1d3b      	adds	r3, r7, #4
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f9a9 	bl	8000664 <GPIO_Init>
}
 8000312:	bf00      	nop
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40020800 	.word	0x40020800

08000320 <delay>:

void delay(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i<500000/2 ; i++);
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	e002      	b.n	8000332 <delay+0x12>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <delay+0x28>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d9f8      	bls.n	800032c <delay+0xc>
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	0003d08f 	.word	0x0003d08f

0800034c <main>:


int main(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0

	char user_data[] = "Hello world";
 8000352:	4a20      	ldr	r2, [pc, #128]	@ (80003d4 <main+0x88>)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	ca07      	ldmia	r2, {r0, r1, r2}
 8000358:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	GPIOButtonInit();
 800035c:	f7ff ffc8 	bl	80002f0 <GPIOButtonInit>

	// this function is used to initialize the GPIO pins to behave like SPI2 pins (alternate functions)
	SPI1_GPIOInits();
 8000360:	f7ff ff72 	bl	8000248 <SPI1_GPIOInits>

	SPI1_Inits();
 8000364:	f7ff ffa6 	bl	80002b4 <SPI1_Inits>
	 * enable SSOE=1 make NSS output enable
	 * the NSS pin is automatically managed by the hardware
	 * i.e when SPE=1, NSS will be pulled to low
	 * when SPE=0, NSS will be pulled to high
	 */
	SPI_SSOEConfig(SPI1, ENABLE);
 8000368:	2101      	movs	r1, #1
 800036a:	481b      	ldr	r0, [pc, #108]	@ (80003d8 <main+0x8c>)
 800036c:	f000 fc9d 	bl	8000caa <SPI_SSOEConfig>

	while(1)
	{
		while( ! GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) );
 8000370:	bf00      	nop
 8000372:	210d      	movs	r1, #13
 8000374:	4819      	ldr	r0, [pc, #100]	@ (80003dc <main+0x90>)
 8000376:	f000 fb25 	bl	80009c4 <GPIO_ReadFromInputPin>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f8      	beq.n	8000372 <main+0x26>
		delay();
 8000380:	f7ff ffce 	bl	8000320 <delay>

		// Enable the SPI2 peripheral (SPE bit in SPI_CR1 register)
		SPI_PeripheralControl(SPI1, ENABLE);
 8000384:	2101      	movs	r1, #1
 8000386:	4814      	ldr	r0, [pc, #80]	@ (80003d8 <main+0x8c>)
 8000388:	f000 fc73 	bl	8000c72 <SPI_PeripheralControl>

		//first, send length information to slave cause slave don't know how many bytes we're going to send
		uint8_t dataLen = strlen(user_data);
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff52 	bl	8000238 <strlen>
 8000394:	4603      	mov	r3, r0
 8000396:	b2db      	uxtb	r3, r3
 8000398:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI1, &dataLen, 1);
 800039a:	1cfb      	adds	r3, r7, #3
 800039c:	2201      	movs	r2, #1
 800039e:	4619      	mov	r1, r3
 80003a0:	480d      	ldr	r0, [pc, #52]	@ (80003d8 <main+0x8c>)
 80003a2:	f000 fc2f 	bl	8000c04 <SPI_SendData>

		SPI_SendData(SPI1, (uint8_t*)user_data, strlen(user_data));
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff45 	bl	8000238 <strlen>
 80003ae:	4602      	mov	r2, r0
 80003b0:	1d3b      	adds	r3, r7, #4
 80003b2:	4619      	mov	r1, r3
 80003b4:	4808      	ldr	r0, [pc, #32]	@ (80003d8 <main+0x8c>)
 80003b6:	f000 fc25 	bl	8000c04 <SPI_SendData>

		/*
		 * before closing, first confirm that SPI is not busy
		 * check SPI_SR, busy flag
		 */
		while(SPI_GetFlagStatus(SPI1, SPI_BSY_FLAG));
 80003ba:	bf00      	nop
 80003bc:	2180      	movs	r1, #128	@ 0x80
 80003be:	4806      	ldr	r0, [pc, #24]	@ (80003d8 <main+0x8c>)
 80003c0:	f000 fc0c 	bl	8000bdc <SPI_GetFlagStatus>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1f8      	bne.n	80003bc <main+0x70>

		SPI_PeripheralControl(SPI1, DISABLE);
 80003ca:	2100      	movs	r1, #0
 80003cc:	4802      	ldr	r0, [pc, #8]	@ (80003d8 <main+0x8c>)
 80003ce:	f000 fc50 	bl	8000c72 <SPI_PeripheralControl>
	{
 80003d2:	e7cd      	b.n	8000370 <main+0x24>
 80003d4:	08000d44 	.word	0x08000d44
 80003d8:	40013000 	.word	0x40013000
 80003dc:	40020800 	.word	0x40020800

080003e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e0:	480d      	ldr	r0, [pc, #52]	@ (8000418 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003e8:	480c      	ldr	r0, [pc, #48]	@ (800041c <LoopForever+0x6>)
  ldr r1, =_edata
 80003ea:	490d      	ldr	r1, [pc, #52]	@ (8000420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000424 <LoopForever+0xe>)
  movs r3, #0
 80003ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f0:	e002      	b.n	80003f8 <LoopCopyDataInit>

080003f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003f6:	3304      	adds	r3, #4

080003f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003fc:	d3f9      	bcc.n	80003f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000400:	4c0a      	ldr	r4, [pc, #40]	@ (800042c <LoopForever+0x16>)
  movs r3, #0
 8000402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000404:	e001      	b.n	800040a <LoopFillZerobss>

08000406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000408:	3204      	adds	r2, #4

0800040a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800040a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800040c:	d3fb      	bcc.n	8000406 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800040e:	f000 fc69 	bl	8000ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000412:	f7ff ff9b 	bl	800034c <main>

08000416 <LoopForever>:

LoopForever:
  b LoopForever
 8000416:	e7fe      	b.n	8000416 <LoopForever>
  ldr   r0, =_estack
 8000418:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800041c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000420:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000424:	08000d60 	.word	0x08000d60
  ldr r2, =_sbss
 8000428:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800042c:	2000001c 	.word	0x2000001c

08000430 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000430:	e7fe      	b.n	8000430 <ADC_IRQHandler>
	...

08000434 <GPIO_PeriClockControl>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi){
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d178      	bne.n	8000538 <GPIO_PeriClockControl+0x104>
	{
		if(pGPIOx == GPIOA)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a7a      	ldr	r2, [pc, #488]	@ (8000634 <GPIO_PeriClockControl+0x200>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800044e:	4b7a      	ldr	r3, [pc, #488]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000452:	4a79      	ldr	r2, [pc, #484]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000454:	f043 0301 	orr.w	r3, r3, #1
 8000458:	6313      	str	r3, [r2, #48]	@ 0x30
		{
			GPIOK_PCLK_DI();
		}

	}
}
 800045a:	e0e5      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a77      	ldr	r2, [pc, #476]	@ (800063c <GPIO_PeriClockControl+0x208>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000464:	4b74      	ldr	r3, [pc, #464]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000468:	4a73      	ldr	r2, [pc, #460]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800046a:	f043 0302 	orr.w	r3, r3, #2
 800046e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000470:	e0da      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a72      	ldr	r2, [pc, #456]	@ (8000640 <GPIO_PeriClockControl+0x20c>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800047a:	4b6f      	ldr	r3, [pc, #444]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	4a6e      	ldr	r2, [pc, #440]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000480:	f043 0304 	orr.w	r3, r3, #4
 8000484:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000486:	e0cf      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a6e      	ldr	r2, [pc, #440]	@ (8000644 <GPIO_PeriClockControl+0x210>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000490:	4b69      	ldr	r3, [pc, #420]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a68      	ldr	r2, [pc, #416]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000496:	f043 0308 	orr.w	r3, r3, #8
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049c:	e0c4      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a69      	ldr	r2, [pc, #420]	@ (8000648 <GPIO_PeriClockControl+0x214>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80004a6:	4b64      	ldr	r3, [pc, #400]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	4a63      	ldr	r2, [pc, #396]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004ac:	f043 0310 	orr.w	r3, r3, #16
 80004b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b2:	e0b9      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a65      	ldr	r2, [pc, #404]	@ (800064c <GPIO_PeriClockControl+0x218>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80004bc:	4b5e      	ldr	r3, [pc, #376]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c0:	4a5d      	ldr	r2, [pc, #372]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004c2:	f043 0320 	orr.w	r3, r3, #32
 80004c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c8:	e0ae      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a60      	ldr	r2, [pc, #384]	@ (8000650 <GPIO_PeriClockControl+0x21c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80004d2:	4b59      	ldr	r3, [pc, #356]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a58      	ldr	r2, [pc, #352]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004de:	e0a3      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a5c      	ldr	r2, [pc, #368]	@ (8000654 <GPIO_PeriClockControl+0x220>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80004e8:	4b53      	ldr	r3, [pc, #332]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a52      	ldr	r2, [pc, #328]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80004ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f4:	e098      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a57      	ldr	r2, [pc, #348]	@ (8000658 <GPIO_PeriClockControl+0x224>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0xd8>
			GPIOI_PCLK_EN();
 80004fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a4d      	ldr	r2, [pc, #308]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000504:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050a:	e08d      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a53      	ldr	r2, [pc, #332]	@ (800065c <GPIO_PeriClockControl+0x228>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <GPIO_PeriClockControl+0xee>
			GPIOJ_PCLK_EN();
 8000514:	4b48      	ldr	r3, [pc, #288]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a47      	ldr	r2, [pc, #284]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800051a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000520:	e082      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a4e      	ldr	r2, [pc, #312]	@ (8000660 <GPIO_PeriClockControl+0x22c>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d17e      	bne.n	8000628 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_EN();
 800052a:	4b43      	ldr	r3, [pc, #268]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a42      	ldr	r2, [pc, #264]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000530:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000536:	e077      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		if(pGPIOx == GPIOA)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a3e      	ldr	r2, [pc, #248]	@ (8000634 <GPIO_PeriClockControl+0x200>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <GPIO_PeriClockControl+0x11a>
			GPIOA_PCLK_DI();
 8000540:	4b3d      	ldr	r3, [pc, #244]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a3c      	ldr	r2, [pc, #240]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000546:	f023 0301 	bic.w	r3, r3, #1
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800054c:	e06c      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOB)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a3a      	ldr	r2, [pc, #232]	@ (800063c <GPIO_PeriClockControl+0x208>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <GPIO_PeriClockControl+0x130>
			GPIOB_PCLK_DI();
 8000556:	4b38      	ldr	r3, [pc, #224]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055a:	4a37      	ldr	r2, [pc, #220]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800055c:	f023 0302 	bic.w	r3, r3, #2
 8000560:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000562:	e061      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOC)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a36      	ldr	r2, [pc, #216]	@ (8000640 <GPIO_PeriClockControl+0x20c>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <GPIO_PeriClockControl+0x146>
			GPIOC_PCLK_DI();
 800056c:	4b32      	ldr	r3, [pc, #200]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800056e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000570:	4a31      	ldr	r2, [pc, #196]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000572:	f023 0304 	bic.w	r3, r3, #4
 8000576:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000578:	e056      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOD)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a31      	ldr	r2, [pc, #196]	@ (8000644 <GPIO_PeriClockControl+0x210>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <GPIO_PeriClockControl+0x15c>
			GPIOD_PCLK_DI();
 8000582:	4b2d      	ldr	r3, [pc, #180]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000586:	4a2c      	ldr	r2, [pc, #176]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000588:	f023 0308 	bic.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800058e:	e04b      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOE)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a2d      	ldr	r2, [pc, #180]	@ (8000648 <GPIO_PeriClockControl+0x214>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d106      	bne.n	80005a6 <GPIO_PeriClockControl+0x172>
			GPIOE_PCLK_DI();
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059c:	4a26      	ldr	r2, [pc, #152]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800059e:	f023 0310 	bic.w	r3, r3, #16
 80005a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a4:	e040      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOF)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a28      	ldr	r2, [pc, #160]	@ (800064c <GPIO_PeriClockControl+0x218>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d106      	bne.n	80005bc <GPIO_PeriClockControl+0x188>
			GPIOF_PCLK_DI();
 80005ae:	4b22      	ldr	r3, [pc, #136]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005b4:	f023 0320 	bic.w	r3, r3, #32
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ba:	e035      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOG)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a24      	ldr	r2, [pc, #144]	@ (8000650 <GPIO_PeriClockControl+0x21c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d106      	bne.n	80005d2 <GPIO_PeriClockControl+0x19e>
			GPIOG_PCLK_DI();
 80005c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80005ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005d0:	e02a      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOH)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000654 <GPIO_PeriClockControl+0x220>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d106      	bne.n	80005e8 <GPIO_PeriClockControl+0x1b4>
			GPIOH_PCLK_DI();
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a16      	ldr	r2, [pc, #88]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005e6:	e01f      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOI)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000658 <GPIO_PeriClockControl+0x224>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d106      	bne.n	80005fe <GPIO_PeriClockControl+0x1ca>
			GPIOI_PCLK_DI();
 80005f0:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f4:	4a10      	ldr	r2, [pc, #64]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 80005f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80005fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005fc:	e014      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOJ)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a16      	ldr	r2, [pc, #88]	@ (800065c <GPIO_PeriClockControl+0x228>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d106      	bne.n	8000614 <GPIO_PeriClockControl+0x1e0>
			GPIOJ_PCLK_DI();
 8000606:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	4a0b      	ldr	r2, [pc, #44]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800060c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000610:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000612:	e009      	b.n	8000628 <GPIO_PeriClockControl+0x1f4>
		else if(pGPIOx == GPIOK)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <GPIO_PeriClockControl+0x22c>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d105      	bne.n	8000628 <GPIO_PeriClockControl+0x1f4>
			GPIOK_PCLK_DI();
 800061c:	4b06      	ldr	r3, [pc, #24]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000620:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <GPIO_PeriClockControl+0x204>)
 8000622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000626:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40020000 	.word	0x40020000
 8000638:	40023800 	.word	0x40023800
 800063c:	40020400 	.word	0x40020400
 8000640:	40020800 	.word	0x40020800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40021000 	.word	0x40021000
 800064c:	40021400 	.word	0x40021400
 8000650:	40021800 	.word	0x40021800
 8000654:	40021c00 	.word	0x40021c00
 8000658:	40022000 	.word	0x40022000
 800065c:	40022400 	.word	0x40022400
 8000660:	40022800 	.word	0x40022800

08000664 <GPIO_Init>:
 *  @Return: none
 *
 *  @Note: none
 *
 *********************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	/* 1. configure the mode of the gpio pin */
	uint32_t temp = 0;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock for GPIOx
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2101      	movs	r1, #1
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff fedc 	bl	8000434 <GPIO_PeriClockControl>

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 	GPIO_MODE_ANALOG){
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	795b      	ldrb	r3, [r3, #5]
 8000680:	2b03      	cmp	r3, #3
 8000682:	d81f      	bhi.n	80006c4 <GPIO_Init+0x60>
		// non-interrupt mode
		// each pin takes 2 bit fields, so we multiply the pin number to 2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	461a      	mov	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	fa02 f303 	lsl.w	r3, r2, r3
 8000694:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	791b      	ldrb	r3, [r3, #4]
 80006a0:	4619      	mov	r1, r3
 80006a2:	2303      	movs	r3, #3
 80006a4:	408b      	lsls	r3, r1
 80006a6:	43db      	mvns	r3, r3
 80006a8:	4619      	mov	r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	400a      	ands	r2, r1
 80006b0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // setting
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	6819      	ldr	r1, [r3, #0]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	430a      	orrs	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	e0da      	b.n	800087a <GPIO_Init+0x216>
	}
	else{
		//this part for interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	795b      	ldrb	r3, [r3, #5]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d117      	bne.n	80006fc <GPIO_Init+0x98>
		{
			// 1. configure the falling trigger selection register (FTSR) (a register of EXTI)
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006cc:	4b51      	ldr	r3, [pc, #324]	@ (8000814 <GPIO_Init+0x1b0>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	7912      	ldrb	r2, [r2, #4]
 80006d4:	4611      	mov	r1, r2
 80006d6:	2201      	movs	r2, #1
 80006d8:	408a      	lsls	r2, r1
 80006da:	4611      	mov	r1, r2
 80006dc:	4a4d      	ldr	r2, [pc, #308]	@ (8000814 <GPIO_Init+0x1b0>)
 80006de:	430b      	orrs	r3, r1
 80006e0:	60d3      	str	r3, [r2, #12]
			// c;ear the corresponding RTSR bit
			EXTI->RTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000814 <GPIO_Init+0x1b0>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	7912      	ldrb	r2, [r2, #4]
 80006ea:	4611      	mov	r1, r2
 80006ec:	2201      	movs	r2, #1
 80006ee:	408a      	lsls	r2, r1
 80006f0:	43d2      	mvns	r2, r2
 80006f2:	4611      	mov	r1, r2
 80006f4:	4a47      	ldr	r2, [pc, #284]	@ (8000814 <GPIO_Init+0x1b0>)
 80006f6:	400b      	ands	r3, r1
 80006f8:	6093      	str	r3, [r2, #8]
 80006fa:	e035      	b.n	8000768 <GPIO_Init+0x104>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	2b05      	cmp	r3, #5
 8000702:	d117      	bne.n	8000734 <GPIO_Init+0xd0>
		{
			// 1. configure the rising trigger selection register (RTSR)
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000704:	4b43      	ldr	r3, [pc, #268]	@ (8000814 <GPIO_Init+0x1b0>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	7912      	ldrb	r2, [r2, #4]
 800070c:	4611      	mov	r1, r2
 800070e:	2201      	movs	r2, #1
 8000710:	408a      	lsls	r2, r1
 8000712:	4611      	mov	r1, r2
 8000714:	4a3f      	ldr	r2, [pc, #252]	@ (8000814 <GPIO_Init+0x1b0>)
 8000716:	430b      	orrs	r3, r1
 8000718:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	&= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071a:	4b3e      	ldr	r3, [pc, #248]	@ (8000814 <GPIO_Init+0x1b0>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	7912      	ldrb	r2, [r2, #4]
 8000722:	4611      	mov	r1, r2
 8000724:	2201      	movs	r2, #1
 8000726:	408a      	lsls	r2, r1
 8000728:	43d2      	mvns	r2, r2
 800072a:	4611      	mov	r1, r2
 800072c:	4a39      	ldr	r2, [pc, #228]	@ (8000814 <GPIO_Init+0x1b0>)
 800072e:	400b      	ands	r3, r1
 8000730:	60d3      	str	r3, [r2, #12]
 8000732:	e019      	b.n	8000768 <GPIO_Init+0x104>
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	795b      	ldrb	r3, [r3, #5]
 8000738:	2b06      	cmp	r3, #6
 800073a:	d115      	bne.n	8000768 <GPIO_Init+0x104>
		{
			// 1. configure both the RTSR and FTSR
			EXTI->RTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073c:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <GPIO_Init+0x1b0>)
 800073e:	689b      	ldr	r3, [r3, #8]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	7912      	ldrb	r2, [r2, #4]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a31      	ldr	r2, [pc, #196]	@ (8000814 <GPIO_Init+0x1b0>)
 800074e:	430b      	orrs	r3, r1
 8000750:	6093      	str	r3, [r2, #8]
			// c;ear the corresponding RTSR bit
			EXTI->FTSR	|=  (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000752:	4b30      	ldr	r3, [pc, #192]	@ (8000814 <GPIO_Init+0x1b0>)
 8000754:	68db      	ldr	r3, [r3, #12]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	7912      	ldrb	r2, [r2, #4]
 800075a:	4611      	mov	r1, r2
 800075c:	2201      	movs	r2, #1
 800075e:	408a      	lsls	r2, r1
 8000760:	4611      	mov	r1, r2
 8000762:	4a2c      	ldr	r2, [pc, #176]	@ (8000814 <GPIO_Init+0x1b0>)
 8000764:	430b      	orrs	r3, r1
 8000766:	60d3      	str	r3, [r2, #12]
		}

		// 2. configure the GPIO port selection in SYSCFG_EXTI
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	089b      	lsrs	r3, r3, #2
 800076e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	f003 0303 	and.w	r3, r3, #3
 8000778:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a26      	ldr	r2, [pc, #152]	@ (8000818 <GPIO_Init+0x1b4>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d05d      	beq.n	8000840 <GPIO_Init+0x1dc>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a24      	ldr	r2, [pc, #144]	@ (800081c <GPIO_Init+0x1b8>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d040      	beq.n	8000810 <GPIO_Init+0x1ac>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a23      	ldr	r2, [pc, #140]	@ (8000820 <GPIO_Init+0x1bc>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d039      	beq.n	800080c <GPIO_Init+0x1a8>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <GPIO_Init+0x1c0>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d032      	beq.n	8000808 <GPIO_Init+0x1a4>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <GPIO_Init+0x1c4>)
 80007a8:	4293      	cmp	r3, r2
 80007aa:	d02b      	beq.n	8000804 <GPIO_Init+0x1a0>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1e      	ldr	r2, [pc, #120]	@ (800082c <GPIO_Init+0x1c8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d024      	beq.n	8000800 <GPIO_Init+0x19c>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000830 <GPIO_Init+0x1cc>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d01d      	beq.n	80007fc <GPIO_Init+0x198>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <GPIO_Init+0x1d0>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d016      	beq.n	80007f8 <GPIO_Init+0x194>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000838 <GPIO_Init+0x1d4>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d00f      	beq.n	80007f4 <GPIO_Init+0x190>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a14      	ldr	r2, [pc, #80]	@ (800082c <GPIO_Init+0x1c8>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d008      	beq.n	80007f0 <GPIO_Init+0x18c>
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a16      	ldr	r2, [pc, #88]	@ (800083c <GPIO_Init+0x1d8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d101      	bne.n	80007ec <GPIO_Init+0x188>
 80007e8:	230a      	movs	r3, #10
 80007ea:	e02a      	b.n	8000842 <GPIO_Init+0x1de>
 80007ec:	2300      	movs	r3, #0
 80007ee:	e028      	b.n	8000842 <GPIO_Init+0x1de>
 80007f0:	2309      	movs	r3, #9
 80007f2:	e026      	b.n	8000842 <GPIO_Init+0x1de>
 80007f4:	2308      	movs	r3, #8
 80007f6:	e024      	b.n	8000842 <GPIO_Init+0x1de>
 80007f8:	2307      	movs	r3, #7
 80007fa:	e022      	b.n	8000842 <GPIO_Init+0x1de>
 80007fc:	2306      	movs	r3, #6
 80007fe:	e020      	b.n	8000842 <GPIO_Init+0x1de>
 8000800:	2305      	movs	r3, #5
 8000802:	e01e      	b.n	8000842 <GPIO_Init+0x1de>
 8000804:	2304      	movs	r3, #4
 8000806:	e01c      	b.n	8000842 <GPIO_Init+0x1de>
 8000808:	2303      	movs	r3, #3
 800080a:	e01a      	b.n	8000842 <GPIO_Init+0x1de>
 800080c:	2302      	movs	r3, #2
 800080e:	e018      	b.n	8000842 <GPIO_Init+0x1de>
 8000810:	2301      	movs	r3, #1
 8000812:	e016      	b.n	8000842 <GPIO_Init+0x1de>
 8000814:	40013c00 	.word	0x40013c00
 8000818:	40020000 	.word	0x40020000
 800081c:	40020400 	.word	0x40020400
 8000820:	40020800 	.word	0x40020800
 8000824:	40020c00 	.word	0x40020c00
 8000828:	40021000 	.word	0x40021000
 800082c:	40021400 	.word	0x40021400
 8000830:	40021800 	.word	0x40021800
 8000834:	40021c00 	.word	0x40021c00
 8000838:	40022000 	.word	0x40022000
 800083c:	40022800 	.word	0x40022800
 8000840:	2300      	movs	r3, #0
 8000842:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000844:	4b5c      	ldr	r3, [pc, #368]	@ (80009b8 <GPIO_Init+0x354>)
 8000846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000848:	4a5b      	ldr	r2, [pc, #364]	@ (80009b8 <GPIO_Init+0x354>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode <<(temp2*4);
 8000850:	7c7a      	ldrb	r2, [r7, #17]
 8000852:	7cbb      	ldrb	r3, [r7, #18]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	fa02 f103 	lsl.w	r1, r2, r3
 800085a:	4a58      	ldr	r2, [pc, #352]	@ (80009bc <GPIO_Init+0x358>)
 800085c:	7cfb      	ldrb	r3, [r7, #19]
 800085e:	3302      	adds	r3, #2
 8000860:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// 3. enable the EXTI interrupt delivery using Interrupt Mask Register (IMR)
		EXTI->IMR |= 1<< 1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000864:	4b56      	ldr	r3, [pc, #344]	@ (80009c0 <GPIO_Init+0x35c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	687a      	ldr	r2, [r7, #4]
 800086a:	7912      	ldrb	r2, [r2, #4]
 800086c:	4611      	mov	r1, r2
 800086e:	2202      	movs	r2, #2
 8000870:	408a      	lsls	r2, r1
 8000872:	4611      	mov	r1, r2
 8000874:	4a52      	ldr	r2, [pc, #328]	@ (80009c0 <GPIO_Init+0x35c>)
 8000876:	430b      	orrs	r3, r1
 8000878:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]

	/* 2. configure the speed */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	799b      	ldrb	r3, [r3, #6]
 8000882:	461a      	mov	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	791b      	ldrb	r3, [r3, #4]
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	689a      	ldr	r2, [r3, #8]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	4619      	mov	r1, r3
 800089c:	2303      	movs	r3, #3
 800089e:	408b      	lsls	r3, r1
 80008a0:	43db      	mvns	r3, r3
 80008a2:	4619      	mov	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	400a      	ands	r2, r1
 80008aa:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6899      	ldr	r1, [r3, #8]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	697a      	ldr	r2, [r7, #20]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	609a      	str	r2, [r3, #8]
	temp = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

	/* 3. configure pull-up/pull-down settings */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	79db      	ldrb	r3, [r3, #7]
 80008c4:	461a      	mov	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	791b      	ldrb	r3, [r3, #4]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	791b      	ldrb	r3, [r3, #4]
 80008dc:	4619      	mov	r1, r3
 80008de:	2303      	movs	r3, #3
 80008e0:	408b      	lsls	r3, r1
 80008e2:	43db      	mvns	r3, r3
 80008e4:	4619      	mov	r1, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	400a      	ands	r2, r1
 80008ec:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	68d9      	ldr	r1, [r3, #12]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	697a      	ldr	r2, [r7, #20]
 80008fa:	430a      	orrs	r2, r1
 80008fc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

	/* 4. configure the output type */
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1* pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	7a1b      	ldrb	r3, [r3, #8]
 8000906:	461a      	mov	r2, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	791b      	ldrb	r3, [r3, #4]
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	4619      	mov	r1, r3
 800091e:	2301      	movs	r3, #1
 8000920:	408b      	lsls	r3, r1
 8000922:	43db      	mvns	r3, r3
 8000924:	4619      	mov	r1, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	400a      	ands	r2, r1
 800092c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6859      	ldr	r1, [r3, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	430a      	orrs	r2, r1
 800093c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

	/* 5. configure the alternate functionality */
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	795b      	ldrb	r3, [r3, #5]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d131      	bne.n	80009ae <GPIO_Init+0x34a>
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	791b      	ldrb	r3, [r3, #4]
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4*temp2));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	7c3a      	ldrb	r2, [r7, #16]
 8000962:	3208      	adds	r2, #8
 8000964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	220f      	movs	r2, #15
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43db      	mvns	r3, r3
 8000974:	4618      	mov	r0, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	7c3a      	ldrb	r2, [r7, #16]
 800097c:	4001      	ands	r1, r0
 800097e:	3208      	adds	r2, #8
 8000980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	7c3a      	ldrb	r2, [r7, #16]
 800098a:	3208      	adds	r2, #8
 800098c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7a5b      	ldrb	r3, [r3, #9]
 8000994:	461a      	mov	r2, r3
 8000996:	7bfb      	ldrb	r3, [r7, #15]
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	7c3a      	ldrb	r2, [r7, #16]
 80009a6:	4301      	orrs	r1, r0
 80009a8:	3208      	adds	r2, #8
 80009aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80009ae:	bf00      	nop
 80009b0:	3718      	adds	r7, #24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40013800 	.word	0x40013800
 80009c0:	40013c00 	.word	0x40013c00

080009c4 <GPIO_ReadFromInputPin>:
}

/*
 * Data read/write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
	//return 0/1, so use uint8_t
	uint8_t value;

	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001); // shift the bit to LSB and mask + read it
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	691a      	ldr	r2, [r3, #16]
 80009d4:	78fb      	ldrb	r3, [r7, #3]
 80009d6:	fa22 f303 	lsr.w	r3, r2, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	73fb      	strb	r3, [r7, #15]

	return value;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3714      	adds	r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr

080009f0 <SPI_PeriClockControl>:
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d141      	bne.n	8000a86 <SPI_PeriClockControl+0x96>
	{
		if(pSPIx == SPI1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a43      	ldr	r2, [pc, #268]	@ (8000b14 <SPI_PeriClockControl+0x124>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000a0a:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0e:	4a42      	ldr	r2, [pc, #264]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a14:	6453      	str	r3, [r2, #68]	@ 0x44
			SPI6_PCLK_DI();
		}

	}

}
 8000a16:	e077      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a40      	ldr	r2, [pc, #256]	@ (8000b1c <SPI_PeriClockControl+0x12c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d106      	bne.n	8000a2e <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000a20:	4b3d      	ldr	r3, [pc, #244]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	4a3c      	ldr	r2, [pc, #240]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a2c:	e06c      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI3)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a3b      	ldr	r2, [pc, #236]	@ (8000b20 <SPI_PeriClockControl+0x130>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d106      	bne.n	8000a44 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000a36:	4b38      	ldr	r3, [pc, #224]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3a:	4a37      	ldr	r2, [pc, #220]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a40:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a42:	e061      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI4)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a37      	ldr	r2, [pc, #220]	@ (8000b24 <SPI_PeriClockControl+0x134>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d106      	bne.n	8000a5a <SPI_PeriClockControl+0x6a>
			SPI4_PCLK_EN();
 8000a4c:	4b32      	ldr	r3, [pc, #200]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a50:	4a31      	ldr	r2, [pc, #196]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a56:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a58:	e056      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI5)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a32      	ldr	r2, [pc, #200]	@ (8000b28 <SPI_PeriClockControl+0x138>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d106      	bne.n	8000a70 <SPI_PeriClockControl+0x80>
			SPI5_PCLK_EN();
 8000a62:	4b2d      	ldr	r3, [pc, #180]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a2c      	ldr	r2, [pc, #176]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a6e:	e04b      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI6)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	4a2e      	ldr	r2, [pc, #184]	@ (8000b2c <SPI_PeriClockControl+0x13c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d147      	bne.n	8000b08 <SPI_PeriClockControl+0x118>
			SPI6_PCLK_EN();
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7c:	4a26      	ldr	r2, [pc, #152]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a82:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a84:	e040      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		if(pSPIx == SPI1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a22      	ldr	r2, [pc, #136]	@ (8000b14 <SPI_PeriClockControl+0x124>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d106      	bne.n	8000a9c <SPI_PeriClockControl+0xac>
			SPI1_PCLK_DI();
 8000a8e:	4b22      	ldr	r3, [pc, #136]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a92:	4a21      	ldr	r2, [pc, #132]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a98:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a9a:	e035      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <SPI_PeriClockControl+0x12c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d106      	bne.n	8000ab2 <SPI_PeriClockControl+0xc2>
			SPI2_PCLK_DI();
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000aaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000aae:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ab0:	e02a      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI3)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b20 <SPI_PeriClockControl+0x130>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d106      	bne.n	8000ac8 <SPI_PeriClockControl+0xd8>
			SPI3_PCLK_DI();
 8000aba:	4b17      	ldr	r3, [pc, #92]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	4a16      	ldr	r2, [pc, #88]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000ac0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000ac4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ac6:	e01f      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI4)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	4a16      	ldr	r2, [pc, #88]	@ (8000b24 <SPI_PeriClockControl+0x134>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d106      	bne.n	8000ade <SPI_PeriClockControl+0xee>
			SPI4_PCLK_DI();
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ad4:	4a10      	ldr	r2, [pc, #64]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000ad6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000ada:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000adc:	e014      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI5)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a11      	ldr	r2, [pc, #68]	@ (8000b28 <SPI_PeriClockControl+0x138>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d106      	bne.n	8000af4 <SPI_PeriClockControl+0x104>
			SPI5_PCLK_DI();
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a0b      	ldr	r2, [pc, #44]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000aec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000af2:	e009      	b.n	8000b08 <SPI_PeriClockControl+0x118>
		else if(pSPIx == SPI6)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <SPI_PeriClockControl+0x13c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d105      	bne.n	8000b08 <SPI_PeriClockControl+0x118>
			SPI6_PCLK_DI();
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b00:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <SPI_PeriClockControl+0x128>)
 8000b02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000b06:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	40013000 	.word	0x40013000
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40003800 	.word	0x40003800
 8000b20:	40003c00 	.word	0x40003c00
 8000b24:	40013400 	.word	0x40013400
 8000b28:	40015000 	.word	0x40015000
 8000b2c:	40015400 	.word	0x40015400

08000b30 <SPI_Init>:

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff56 	bl	80009f0 <SPI_PeriClockControl>

	// First, configure SPI_CR1 register (configure "TempReg" as "CR1")
	uint32_t tempreg = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60fb      	str	r3, [r7, #12]

	/* 1. configure the device mode (MSTR bit), initializing to 0 (slave configuration) */
	tempreg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	791b      	ldrb	r3, [r3, #4]
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]

	/* 2. configure the BusConfig */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) //full-duplex
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	795b      	ldrb	r3, [r3, #5]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d104      	bne.n	8000b66 <SPI_Init+0x36>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e014      	b.n	8000b90 <SPI_Init+0x60>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) //half-duplex
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	795b      	ldrb	r3, [r3, #5]
 8000b6a:	2b02      	cmp	r3, #2
 8000b6c:	d104      	bne.n	8000b78 <SPI_Init+0x48>
	{
		//BIDI mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	e00b      	b.n	8000b90 <SPI_Init+0x60>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) //Simplex, Rx-Only
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	795b      	ldrb	r3, [r3, #5]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d107      	bne.n	8000b90 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b86:	60fb      	str	r3, [r7, #12]
		//Rx-Only bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8e:	60fb      	str	r3, [r7, #12]
	}

	/* 3. configure the SclkSpeed (BAUD RATE) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	799b      	ldrb	r3, [r3, #6]
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]


	/* 4. configure the SPI_DFF (SPI_CRCL in f767xx) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	79db      	ldrb	r3, [r3, #7]
 8000ba0:	02db      	lsls	r3, r3, #11
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]

	/* 5. configure the SPI_CPOL */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7a1b      	ldrb	r3, [r3, #8]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	68fa      	ldr	r2, [r7, #12]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	60fb      	str	r3, [r7, #12]

	/* 6. configure the SPI_CPHA */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	7a5b      	ldrb	r3, [r3, #9]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

	/* 7. configure the SPI_SSM */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7a9b      	ldrb	r3, [r3, #10]
 8000bc4:	025b      	lsls	r3, r3, #9
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	601a      	str	r2, [r3, #0]

}
 8000bd4:	bf00      	nop
 8000bd6:	3710      	adds	r7, #16
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <SPI_GetFlagStatus>:
		SPI6_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
 	if(pSPIx->SR & FlagName) // flag name actually gives masking info, see spi_driver.h @SPI_FLAG
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	689a      	ldr	r2, [r3, #8]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	4013      	ands	r3, r2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e000      	b.n	8000bf8 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET; // reset = 0
 8000bf6:	2300      	movs	r3, #0
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SPI_SendData>:

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
	//SendData is a blocking call, only return when finished
	while(Len > 0)
 8000c10:	e027      	b.n	8000c62 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set (Transmit buffer is empty)
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 8000c12:	bf00      	nop
 8000c14:	2102      	movs	r1, #2
 8000c16:	68f8      	ldr	r0, [r7, #12]
 8000c18:	f7ff ffe0 	bl	8000bdc <SPI_GetFlagStatus>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f8      	beq.n	8000c14 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1 (DFF in f407 = CRCL in f767)
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00e      	beq.n	8000c4c <SPI_SendData+0x48>
		{
			// 16-bit CRC length

			// 2-1 load the data into DR
			pSPIx->DR = *((uint16_t*) pTxBuffer);
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	60da      	str	r2, [r3, #12]

			// 2-2 sending 2 bytes of data, length - 2
			Len--;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	607b      	str	r3, [r7, #4]
			Len--;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]

			// 2-3 buffer should increase by 2
			(uint16_t*) pTxBuffer++;
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e00a      	b.n	8000c62 <SPI_SendData+0x5e>
		}
		else
		{
			// 8-bit CRC length
			pSPIx->DR = *pTxBuffer; //didn't need type casting
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	60da      	str	r2, [r3, #12]
			Len--;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
			pTxBuffer++; //increase by 1
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d1d4      	bne.n	8000c12 <SPI_SendData+0xe>
		}
	}

}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <SPI_PeripheralControl>:

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d106      	bne.n	8000c92 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE); //enable SPI
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); //disable SPI
	}
}
 8000c90:	e005      	b.n	8000c9e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); //disable SPI
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <SPI_SSOEConfig>:

/*
 * when using hardware slave management, you have to configure SSOE (for single master)
 */
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d106      	bne.n	8000cca <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE); //enable SPOE (for single master)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f043 0204 	orr.w	r2, r3, #4
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); //disable SPOE (for multi-master)
	}
}
 8000cc8:	e005      	b.n	8000cd6 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE); //disable SPOE (for multi-master)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f023 0204 	bic.w	r2, r3, #4
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	605a      	str	r2, [r3, #4]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <__libc_init_array>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8000d1c <__libc_init_array+0x38>)
 8000ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8000d20 <__libc_init_array+0x3c>)
 8000cea:	1b64      	subs	r4, r4, r5
 8000cec:	10a4      	asrs	r4, r4, #2
 8000cee:	2600      	movs	r6, #0
 8000cf0:	42a6      	cmp	r6, r4
 8000cf2:	d109      	bne.n	8000d08 <__libc_init_array+0x24>
 8000cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8000d24 <__libc_init_array+0x40>)
 8000cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8000d28 <__libc_init_array+0x44>)
 8000cf8:	f000 f818 	bl	8000d2c <_init>
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	10a4      	asrs	r4, r4, #2
 8000d00:	2600      	movs	r6, #0
 8000d02:	42a6      	cmp	r6, r4
 8000d04:	d105      	bne.n	8000d12 <__libc_init_array+0x2e>
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0c:	4798      	blx	r3
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7ee      	b.n	8000cf0 <__libc_init_array+0xc>
 8000d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d16:	4798      	blx	r3
 8000d18:	3601      	adds	r6, #1
 8000d1a:	e7f2      	b.n	8000d02 <__libc_init_array+0x1e>
 8000d1c:	08000d58 	.word	0x08000d58
 8000d20:	08000d58 	.word	0x08000d58
 8000d24:	08000d58 	.word	0x08000d58
 8000d28:	08000d5c 	.word	0x08000d5c

08000d2c <_init>:
 8000d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2e:	bf00      	nop
 8000d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d32:	bc08      	pop	{r3}
 8000d34:	469e      	mov	lr, r3
 8000d36:	4770      	bx	lr

08000d38 <_fini>:
 8000d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3a:	bf00      	nop
 8000d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3e:	bc08      	pop	{r3}
 8000d40:	469e      	mov	lr, r3
 8000d42:	4770      	bx	lr

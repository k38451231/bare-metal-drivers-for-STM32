/*
 * stm32f767xx.h
 *
 *  Created on: Aug 4, 2025
 *      Author: TUF
 */

#ifndef INC_STM32F767XX_H_
#define INC_STM32F767XX_H_

#include <stdint.h>
#include <stddef.h>

#define __vo volatile
#define __weak __attribute__((weak))

/**************************************************************************/
/*
 *Arm cortex Mx processor NVIC ISERx reginter address
 */
#define NVIC_ISER0 ((__vo uint32_t*)0xE000E100)
#define NVIC_ISER1 ((__vo uint32_t*)0xE000E104)
#define NVIC_ISER2 ((__vo uint32_t*)0xE000E108)
#define NVIC_ISER3 ((__vo uint32_t*)0xE000E10C)
#define NVIC_ISER4 ((__vo uint32_t*)0xE000E110)
#define NVIC_ISER5 ((__vo uint32_t*)0xE000E114)
#define NVIC_ISER6 ((__vo uint32_t*)0xE000E118)
#define NVIC_ISER7 ((__vo uint32_t*)0xE000E11C)

#define NVIC_ICER0 ((__vo uint32_t*)0xE000E180)
#define NVIC_ICER1 ((__vo uint32_t*)0xE000E184)
#define NVIC_ICER2 ((__vo uint32_t*)0xE000E188)
#define NVIC_ICER3 ((__vo uint32_t*)0xE000E18C)
#define NVIC_ICER4 ((__vo uint32_t*)0xE000E190)
#define NVIC_ICER5 ((__vo uint32_t*)0xE000E194)
#define NVIC_ICER6 ((__vo uint32_t*)0xE000E198)
#define NVIC_ICER7 ((__vo uint32_t*)0xE000E19C)

/*
 *Arm cortex Mx processor Priority Register Address
 */
#define NVIC_PR_BASE_ADDR ((__vo uint32_t*) 0xE000E400)

/*
 *Arm cortex Mx processor number of priority bits implemented in priority register
 */
#define NO_PR_BITS_IMPLEMENTED 4

/* base address of FLASH and SRAM memories */
#define FLASH_BASEADDR 0x08000000U
#define SRAM1_BASEADDR 0x20020000U
#define SRAM2_BASEADDR 0x2007C000U
#define ROM_BASEADDR   0x1FF00000U
#define SRAM           SRAM1_BASEADDR

/* AHBx and APBx Bus peripheral base addresses */
#define PERIPH_BASE     0x40000000U

#define APB1PERIPH_BASE PERIPH_BASE
#define APB2PERIPH_BASE 0x40010000U

#define AHB1PERIPH_BASE 0x40020000U
#define AHB2PERIPH_BASE 0x50000000U
#define AHB3PERIPH_BASE 0x60000000U

/*
 * Base address of peripherals which are hanging on AHB1 bus
 */
#define GPIOA_BASEADDR (AHB1PERIPH_BASE + 0X0000)
#define GPIOB_BASEADDR (AHB1PERIPH_BASE + 0X0400)
#define GPIOC_BASEADDR (AHB1PERIPH_BASE + 0X0800)
#define GPIOD_BASEADDR (AHB1PERIPH_BASE + 0X0C00)
#define GPIOE_BASEADDR (AHB1PERIPH_BASE + 0X1000)
#define GPIOF_BASEADDR (AHB1PERIPH_BASE + 0X1400)
#define GPIOG_BASEADDR (AHB1PERIPH_BASE + 0X1800)
#define GPIOH_BASEADDR (AHB1PERIPH_BASE + 0X1C00)
#define GPIOI_BASEADDR (AHB1PERIPH_BASE + 0X2000)
#define GPIOJ_BASEADDR (AHB1PERIPH_BASE + 0X2400)
#define GPIOK_BASEADDR (AHB1PERIPH_BASE + 0X2800)

#define RCC_BASEADDR   (AHB1PERIPH_BASE + 0X3800)

/*
 * Base address of peripherals which are hanging on APB1 bus
 */
#define I2C1_BASEADDR   (APB1PERIPH_BASE + 0X5400)
#define I2C2_BASEADDR   (APB1PERIPH_BASE + 0X5800)
#define I2C3_BASEADDR   (APB1PERIPH_BASE + 0X5C00)
#define I2C4_BASEADDR   (APB1PERIPH_BASE + 0X6000)

#define SPI2_BASEADDR   (APB1PERIPH_BASE + 0X3800)
#define SPI3_BASEADDR   (APB1PERIPH_BASE + 0X3C00)

#define USART2_BASEADDR (APB1PERIPH_BASE + 0X4400)
#define USART3_BASEADDR (APB1PERIPH_BASE + 0X4800)

#define UART4_BASEADDR  (APB1PERIPH_BASE + 0X4C00)
#define UART5_BASEADDR  (APB1PERIPH_BASE + 0X5000)
#define UART7_BASEADDR  (APB1PERIPH_BASE + 0X7800)
#define UART8_BASEADDR  (APB1PERIPH_BASE + 0X7C00)


/*
 * Base address of peripherals which are hanging on APB2 bus
 */
#define EXTI_BASEADDR   (APB2PERIPH_BASE + 0X3C00)

#define SYSCFG_BASEADDR (APB2PERIPH_BASE + 0X3800)

#define SPI1_BASEADDR   (APB2PERIPH_BASE + 0X3000)
#define SPI4_BASEADDR   (APB2PERIPH_BASE + 0X3400)
#define SPI5_BASEADDR   (APB2PERIPH_BASE + 0X5000)
#define SPI6_BASEADDR   (APB2PERIPH_BASE + 0X5400)

#define USART1_BASEADDR (APB2PERIPH_BASE + 0X1000)
#define USART6_BASEADDR (APB2PERIPH_BASE + 0X1400)

/*****************************Peripheral register definition structures******************************************/

typedef struct
{
	__vo uint32_t MODER;    /* GPIO port mode register                            address offset 0x00*/
	__vo uint32_t OTYPER;   /* GPIO port output type register                     address offset 0x04*/
	__vo uint32_t OSPEEDR;  /* GPIO port output speed register                    address offset 0x08*/
	__vo uint32_t PUPDR;    /* GPIO port pull-up/pull-down register               address offset 0x0C*/
	__vo uint32_t IDR;      /* GPIO port input data register                      address offset 0x10*/
	__vo uint32_t ODR;      /* GPIO port output data register                     address offset 0x14*/
	__vo uint32_t BSRR;     /* GPIO port bit set/reset register                   address offset 0x18*/
	__vo uint32_t LCKR;     /* GPIO port configuration lock register              address offset 0x1C*/
	__vo uint32_t AFR[2];     /* GPIO alternate function low&high register               address offset 0x20*/
	//__vo uint32_t AFRH;     /* GPIO alternate function high register              address offset 0x24*/

}GPIO_RegDef_t;

typedef struct{
	__vo uint32_t CR;
	__vo uint32_t PLLCFGR;
	__vo uint32_t CFGR;
	__vo uint32_t CIR;
	__vo uint32_t AHB1RSTR;
	__vo uint32_t AHB2RSTR;
	__vo uint32_t AHB3RSTR;
	__vo uint32_t Res1;
	__vo uint32_t APB1RSTR;
	__vo uint32_t APB2RSTR;
	__vo uint32_t Res2;
	__vo uint32_t Res3;
	__vo uint32_t AHB1ENR;
	__vo uint32_t AHB2ENR;
	__vo uint32_t AHB3ENR;
	__vo uint32_t Res4;
	__vo uint32_t APB1ENR;
	__vo uint32_t APB2ENR;
	__vo uint32_t Res5;
	__vo uint32_t Res6;
	__vo uint32_t AHB1LPENR;
	__vo uint32_t AHB2LPENR;
	__vo uint32_t AHB3LPENR;
	__vo uint32_t Res7;
	__vo uint32_t APB1LPENR;
	__vo uint32_t APB2LPENR;
	__vo uint32_t Res8;
	__vo uint32_t Res9;
	__vo uint32_t BDCR;
	__vo uint32_t CSR;
	__vo uint32_t Res10;
	__vo uint32_t Res11;
	__vo uint32_t SSCGR;
	__vo uint32_t PLLI2SCFGR;
	__vo uint32_t PLLSAICFGR;
	__vo uint32_t DCKCFGR1;
	__vo uint32_t DCKCFGR2;
}RCC_RegDef_t;

// peripheral register definition structure for EXTI
typedef struct
{
	__vo uint32_t IMR;    /* GPIO port mode register                            address offset 0x00*/
	__vo uint32_t EMR;    /* GPIO port mode register                            address offset 0x00*/
	__vo uint32_t RTSR;    /* GPIO port mode register                            address offset 0x00*/
	__vo uint32_t FTSR;    /* GPIO port mode register                            address offset 0x00*/
	__vo uint32_t SWIER;    /* GPIO port mode register                            address offset 0x00*/
	__vo uint32_t PR;    /* GPIO port mode register                            address offset 0x00*/
}EXTI_RegDef_t;

// peripheral register definition structure for EXTI
typedef struct
{
	__vo uint32_t MEMRMP;    /* GPIO port mode register                         address offset 0x00*/
	__vo uint32_t PMC;    /* GPIO port mode register                            address offset 0x04*/
	__vo uint32_t EXTICR[4];    /* GPIO port mode register                      address offset 0x08*/
	uint32_t res1;																//0x18
	__vo uint32_t CBR;    /* GPIO port mode register                            address offset 0x1C*/
	__vo uint32_t CMPCR;    /* GPIO port mode register                          address offset 0x20*/

}SYSCFG_RegDef_t;


// peripheral register definition structure for SPI
typedef struct
{
	__vo uint32_t CR1;
	__vo uint32_t CR2;
	__vo uint32_t SR;
	__vo uint32_t DR;
	__vo uint32_t CRCPR;
	__vo uint32_t RXCRCR;
	__vo uint32_t TXCRCR;
	__vo uint32_t I2SCFGR;
	__vo uint32_t I2SPR;
}SPI_RegDef_t;

/*
 * Peripheral definitions (peripheral base address typecasted to xxx_RegDef_t)
 */
#define GPIOA ((GPIO_RegDef_t*) GPIOA_BASEADDR)
#define GPIOB ((GPIO_RegDef_t*) GPIOB_BASEADDR)
#define GPIOC ((GPIO_RegDef_t*) GPIOC_BASEADDR)
#define GPIOD ((GPIO_RegDef_t*) GPIOD_BASEADDR)
#define GPIOE ((GPIO_RegDef_t*) GPIOE_BASEADDR)
#define GPIOF ((GPIO_RegDef_t*) GPIOF_BASEADDR)
#define GPIOG ((GPIO_RegDef_t*) GPIOG_BASEADDR)
#define GPIOH ((GPIO_RegDef_t*) GPIOH_BASEADDR)
#define GPIOI ((GPIO_RegDef_t*) GPIOI_BASEADDR)
#define GPIOJ ((GPIO_RegDef_t*) GPIOJ_BASEADDR)
#define GPIOK ((GPIO_RegDef_t*) GPIOK_BASEADDR)

#define RCC   ((RCC_RegDef_t*) RCC_BASEADDR)

#define EXTI  ((EXTI_RegDef_t*) EXTI_BASEADDR)

#define SYSCFG ((SYSCFG_RegDef_t*) SYSCFG_BASEADDR)

#define SPI1 ((SPI_RegDef_t*) SPI1_BASEADDR)
#define SPI2 ((SPI_RegDef_t*) SPI2_BASEADDR)
#define SPI3 ((SPI_RegDef_t*) SPI3_BASEADDR)
#define SPI4 ((SPI_RegDef_t*) SPI4_BASEADDR)
#define SPI5 ((SPI_RegDef_t*) SPI5_BASEADDR)
#define SPI6 ((SPI_RegDef_t*) SPI6_BASEADDR)

/*
 * Clock "Enable" Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_EN() (RCC->AHB1ENR |= (1 <<  0))
#define GPIOB_PCLK_EN() (RCC->AHB1ENR |= (1 <<  1))
#define GPIOC_PCLK_EN() (RCC->AHB1ENR |= (1 <<  2))
#define GPIOD_PCLK_EN() (RCC->AHB1ENR |= (1 <<  3))
#define GPIOE_PCLK_EN() (RCC->AHB1ENR |= (1 <<  4))
#define GPIOF_PCLK_EN() (RCC->AHB1ENR |= (1 <<  5))
#define GPIOG_PCLK_EN() (RCC->AHB1ENR |= (1 <<  6))
#define GPIOH_PCLK_EN() (RCC->AHB1ENR |= (1 <<  7))
#define GPIOI_PCLK_EN() (RCC->AHB1ENR |= (1 <<  8))
#define GPIOJ_PCLK_EN() (RCC->AHB1ENR |= (1 <<  9))
#define GPIOK_PCLK_EN() (RCC->AHB1ENR |= (1 << 10))

/*
 * Clock enable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_EN() (RCC->APB1ENR |= (1<<21))
#define I2C2_PCLK_EN() (RCC->APB1ENR |= (1<<22))
#define I2C3_PCLK_EN() (RCC->APB1ENR |= (1<<23))

/*
 * Clock enable Macros for SPIx peripherals
 */
#define SPI1_PCLK_EN() (RCC->APB2ENR |= (1<<12))
#define SPI4_PCLK_EN() (RCC->APB2ENR |= (1<<13))
#define SPI5_PCLK_EN() (RCC->APB2ENR |= (1<<20))
#define SPI6_PCLK_EN() (RCC->APB2ENR |= (1<<21))

#define SPI2_PCLK_EN() (RCC->APB1ENR |= (1<<14))
#define SPI3_PCLK_EN() (RCC->APB1ENR |= (1<<15))

/*
 * Clock enable Macros for USARTx peripherals
 */
#define USART1_PCLK_EN() (RCC->APB2ENR |= (1<<4))
#define USART6_PCLK_EN() (RCC->APB2ENR |= (1<<5))

/*
 * Clock enable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_EN() (RCC->APB2ENR |= (1<<14))

/*
 * Clock Disable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  0))
#define GPIOB_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  1))
#define GPIOC_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  2))
#define GPIOD_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  3))
#define GPIOE_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  4))
#define GPIOF_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  5))
#define GPIOG_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  6))
#define GPIOH_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  7))
#define GPIOI_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  8))
#define GPIOJ_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  9))
#define GPIOK_PCLK_DI() (RCC->AHB1ENR &= ~(1 << 10))

/*
 * Clock Disable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_DI() (RCC->APB1ENR &= ~(1<<21))
#define I2C2_PCLK_DI() (RCC->APB1ENR &= ~(1<<22))
#define I2C3_PCLK_DI() (RCC->APB1ENR &= ~(1<<23))

/*
 * Clock Disable Macros for SPIx peripherals
 */
#define SPI1_PCLK_DI() (RCC->APB2ENR &= ~(1<<12))
#define SPI4_PCLK_DI() (RCC->APB2ENR &= ~(1<<13))
#define SPI5_PCLK_DI() (RCC->APB2ENR &= ~(1<<20))
#define SPI6_PCLK_DI() (RCC->APB2ENR &= ~(1<<21))

#define SPI2_PCLK_DI() (RCC->APB1ENR &= ~(1<<14))
#define SPI3_PCLK_DI() (RCC->APB1ENR &= ~(1<<15))

/*
 * Clock Disable Macros for USARTx peripherals
 */
#define USART1_PCLK_DI() (RCC->APB2ENR &= ~(1<<4))
#define USART6_PCLK_DI() (RCC->APB2ENR &= ~(1<<5))

/*
 * Clock Disable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_DI() (RCC->APB2ENR &= ~(1<<14))

/*
 * Macros to reset GPIOx peripherals
 */
#define GPIOA_REG_RESET()     do{ (RCC->AHB1RSTR |= (1<<0 )); (RCC->AHB1RSTR &= ~(1<<0 )); }while(0)
#define GPIOB_REG_RESET()     do{ (RCC->AHB1RSTR |= (1<<1 )); (RCC->AHB1RSTR &= ~(1<<1 )); }while(0)
#define GPIOC_REG_RESET()     do{ (RCC->AHB1RSTR |= (1<<2 )); (RCC->AHB1RSTR &= ~(1<<2 )); }while(0)
#define GPIOD_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<3 )); (RCC->AHB1RSTR &= ~(1<<3 )); }while(0)
#define GPIOE_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<4 )); (RCC->AHB1RSTR &= ~(1<<4 )); }while(0)
#define GPIOF_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<5 )); (RCC->AHB1RSTR &= ~(1<<5 )); }while(0)
#define GPIOG_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<6 )); (RCC->AHB1RSTR &= ~(1<<6 )); }while(0)
#define GPIOH_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<7 )); (RCC->AHB1RSTR &= ~(1<<7 )); }while(0)
#define GPIOI_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<8 )); (RCC->AHB1RSTR &= ~(1<<8 )); }while(0)
#define GPIOJ_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<9 )); (RCC->AHB1RSTR &= ~(1<<9 )); }while(0)
#define GPIOK_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<10)); (RCC->AHB1RSTR &= ~(1<<10)); }while(0)

#define GPIO_BASEADDR_TO_CODE(x) ((x==GPIOA)?0:\
								  (x==GPIOB)?1:\
								  (x==GPIOC)?2:\
								  (x==GPIOD)?3:\
								  (x==GPIOE)?4:\
					 			  (x==GPIOF)?5:\
					 			  (x==GPIOG)?6:\
								  (x==GPIOH)?7:\
								  (x==GPIOI)?8:\
								  (x==GPIOF)?9:\
								  (x==GPIOK)?10:0)
/*
 * Macros to reset SPIx peripherals
 */

#define SPI2_REG_RESET()      do{ (RCC->APB1RSTR |= (1<<14)); (RCC->APB1RSTR &= ~(1<<14)); }while(0)
#define SPI3_REG_RESET()      do{ (RCC->APB1RSTR |= (1<<15)); (RCC->APB1RSTR &= ~(1<<15)); }while(0)

#define SPI1_REG_RESET()      do{ (RCC->APB2RSTR |= (1<<12)); (RCC->APB2RSTR &= ~(1<<12)); }while(0)
#define SPI4_REG_RESET()	  do{ (RCC->APB2RSTR |= (1<<13)); (RCC->APB2RSTR &= ~(1<<13)); }while(0)
#define SPI5_REG_RESET()	  do{ (RCC->APB2RSTR |= (1<<20)); (RCC->APB2RSTR &= ~(1<<20)); }while(0)
#define SPI6_REG_RESET()	  do{ (RCC->APB2RSTR |= (1<<21)); (RCC->APB2RSTR &= ~(1<<21)); }while(0)

/*
 * some generic macros
 */
#define ENABLE 1
#define DISABLE 0
#define SET ENABLE
#define RESET DISABLE
#define GPIO_PIN_SET SET
#define GPIO_PIN_RESET RESET
#define FLAG_RESET RESET
#define FLAG_SET SET

#define IRQ_NO_EXTI0      6
#define IRQ_NO_EXTI1      7
#define IRQ_NO_EXTI2      8
#define IRQ_NO_EXTI3      9
#define IRQ_NO_EXTI4     10
#define IRQ_NO_EXTI9_5   23
#define IRQ_NO_EXTI15_10 40

#define IRQ_NO_SPI1 35
#define IRQ_NO_SPI2 36
#define IRQ_NO_SPI3 51
#define IRQ_NO_SPI4 84
#define IRQ_NO_SPI5 85
#define IRQ_NO_SPI6 86

/*
 * macros of all possible priority levels
 */

#define NVIC_IRQ_PRIO1 1
#define NVIC_IRQ_PRIO2 2
#define NVIC_IRQ_PRIO3 3
#define NVIC_IRQ_PRIO4 4
#define NVIC_IRQ_PRIO5 5
#define NVIC_IRQ_PRIO6 6
#define NVIC_IRQ_PRIO7 7
#define NVIC_IRQ_PRIO8 8
#define NVIC_IRQ_PRIO9 9
#define NVIC_IRQ_PRIO10 10
#define NVIC_IRQ_PRIO11 11
#define NVIC_IRQ_PRIO12 12
#define NVIC_IRQ_PRIO13 13
#define NVIC_IRQ_PRIO14 14
#define NVIC_IRQ_PRIO15 15

/************************************************************************************************
 * Bit position definitions of SPI peripherals
 ************************************************************************************************/
#define SPI_CR1_CPHA 	  0
#define SPI_CR1_CPOL 	  1
#define SPI_CR1_MSTR 	  2
#define SPI_CR1_BR        3
#define SPI_CR1_SPE       6
#define SPI_CR1_LSBFIRST  7
#define SPI_CR1_SSI       8
#define SPI_CR1_SSM       9
#define SPI_CR1_RXONLY   10
#define SPI_CR1_CRCL     11
#define SPI_CR1_CRCNEXT  12
#define SPI_CR1_CRCEN    13
#define SPI_CR1_BIDIOE   14
#define SPI_CR1_BIDIMODE 15

#define SPI_CR2_RXDMAEN  0
#define SPI_CR2_TXDMAEN  1
#define SPI_CR2_SSOE     2
#define SPI_CR2_NSSP     3
#define SPI_CR2_FRF      4
#define SPI_CR2_ERRIE    5
#define SPI_CR2_RXNEIE   6
#define SPI_CR2_TXEIE    7
#define SPI_CR2_DS       8
#define SPI_CR2_FRXTH   12
#define SPI_CR2_LDMA_RX 13
#define SPI_CR2_LDMA_TX 14

#define SPI_SR_RXNE    0
#define SPI_SR_TXE     1
#define SPI_SR_CHSIDE  2
#define SPI_SR_UDR     3
#define SPI_SR_CRCERR  4
#define SPI_SR_MODF    5
#define SPI_SR_OVR     6
#define SPI_SR_BSY     7
#define SPI_SR_FRE     8
#define SPI_SR_FRLVL   9
#define SPI_SR_FTLVL  11



#include "stm32f767xx_gpio_driver.h"
#include "stm32f767xx_spi_driver.h"

#endif /* INC_STM32F767XX_H_ */

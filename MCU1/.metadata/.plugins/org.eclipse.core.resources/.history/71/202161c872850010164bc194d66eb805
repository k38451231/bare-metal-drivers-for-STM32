/*
 * stm32f767xx_spi_driver.c
 *
 *  Created on: Aug 17, 2025
 *      Author: TUF
 */


#include "stm32f767xx.h"
#include "stm32f767xx_spi_driver.h"

// private helper function -> static
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle);
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle);

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_EN();
		}
		else if(pSPIx == SPI5)
		{
			SPI5_PCLK_EN();
		}
		else if(pSPIx == SPI6)
		{
			SPI6_PCLK_EN();
		}

	}
	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
		else if(pSPIx == SPI5)
		{
			SPI5_PCLK_DI();
		}
		else if(pSPIx == SPI6)
		{
			SPI6_PCLK_DI();
		}

	}

}

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);

	// First, configure SPI_CR1 register (configure "TempReg" as "CR1")
	uint32_t tempreg = 0;

	/* 1. configure the device mode (MSTR bit), initializing to 0 (slave configuration) */
	tempreg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	/* 2. configure the BusConfig */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) //full-duplex
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) //half-duplex
	{
		//BIDI mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) //Simplex, Rx-Only
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
		//Rx-Only bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY);
	}

	/* 3. configure the SclkSpeed (BAUD RATE) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);


	/* 4. configure the SPI_DFF (SPI_CRCL in f767xx) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL);

	/* 5. configure the SPI_CPOL */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);

	/* 6. configure the SPI_CPHA */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);

	/* 7. configure the SPI_SSM */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_SSM);

	pSPIHandle->pSPIx->CR1 = tempreg;

}

void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if(pSPIx == SPI1)
	{
		SPI1_REG_RESET();
	}
	else if(pSPIx == SPI2)
	{
		SPI2_REG_RESET();
	}
	else if(pSPIx == SPI3)
	{
		SPI3_REG_RESET();
	}
	else if(pSPIx == SPI4)
	{
		SPI4_REG_RESET();
	}
	else if(pSPIx == SPI5)
	{
		SPI5_REG_RESET();
	}
	else if(pSPIx == SPI6)
	{
		SPI6_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 	if(pSPIx->SR & FlagName) // flag name actually gives masking info, see spi_driver.h @SPI_FLAG
	{
		return FLAG_SET;
	}
	return FLAG_RESET; // reset = 0
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	//SendData is a blocking call, only return when finished
	while(Len > 0)
	{
		//1. wait until TXE is set (Transmit buffer is empty)
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );

		//2. check the DFF bit in CR1 (DFF in f407 = CRCL in f767)
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
		{
			// 16-bit CRC length

			// 2-1 load the data into DR
			pSPIx->DR = *((uint16_t*) pTxBuffer);

			// 2-2 sending 2 bytes of data, length - 2
			Len--;
			Len--;

			// 2-3 buffer should increase by 2
			(uint16_t*) pTxBuffer++;
		}
		else
		{
			// 8-bit CRC length
			pSPIx->DR = *pTxBuffer; //didn't need type casting
			Len--;
			pTxBuffer++; //increase by 1
		}
	}

}

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE); //enable SPI
	}
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE); //disable SPI
	}
}

void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len)
{
	//SendData is a blocking call, only return when finished
	while(Len > 0)
	{
		//1. wait until RXNE is set (RX buffer is NOT empty)
		while( SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET );

		//2. check the DFF bit in CR1 (DFF in f407 = CRCL in f767)
		if(pSPIx->CR1 & (1 << SPI_CR1_CRCL))
		{
			// 16-bit CRC length

			// 2-1 load the data "from" DR
			*((uint16_t*) pRxBuffer) = pSPIx->DR ;

			// 2-2 sending 2 bytes of data, length - 2
			Len--;
			Len--;

			// 2-3 buffer should increase by 2
			(uint16_t*) pRxBuffer++;
		}
		else
		{
			// 8-bit CRC length
			*pRxBuffer = pSPIx->DR ; //didn't need type casting
			Len--;
			pRxBuffer++; //increase by 1
		}
	}

}

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
		}
		else if(IRQNumber > 31 && IRQNumber <64) //32~63
		{
			//program ISER1 register
			*NVIC_ISER1 |= (1 << IRQNumber % 32);
		}
		else if(IRQNumber >= 64 && IRQNumber <96) //64~95
		{
			//program ISER2 register
			*NVIC_ISER2 |= (1 << IRQNumber % 64);/////////////////////////////////////////////////////////
		}
	}
	else
	{
		if(IRQNumber <= 31)
		{
			//program ICER0 register
			*NVIC_ICER0 |= (1 << IRQNumber);
		}
		else if(IRQNumber > 31 && IRQNumber <64) //32~63
		{
			//program ICER1 register
			*NVIC_ICER1 |= (1 << IRQNumber % 32);
		}
		else if(IRQNumber >= 64 && IRQNumber <96) //64~95
		{
			//program ICER2 register
			*NVIC_ICER2 |= (1 << IRQNumber % 64);
		}
	}
}

void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	//1. first, find out the IPR register
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber %4;

	uint8_t shift_amount = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);

	*(NVIC_PR_BASE_ADDR + iprx ) |= (IRQPriority << shift_amount);
}



uint8_t SPI_SendDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pTxBuffer, uint32_t Len)
{
	uint8_t state = pSPIHandle->TxState;

	if(state != SPI_BUSY_IN_TX){

	//1. Save the "TX buffer address" and "Length" information in global variables
	pSPIHandle->pTxBuffer = pTxBuffer;
	pSPIHandle->TxLen = Len;

	//2. Mark the SPI state as busy in transmission so that no other code can take over same SPI
	//   peripheral until transmission is over
	pSPIHandle->TxState = SPI_BUSY_IN_TX;

	//3. Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR
	pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_TXEIE);

	//4. Data Transmission will be handled by the ISR code (not yet implemented)

	}
	return state;
}
uint8_t SPI_ReceiveDataIT(SPI_Handle_t *pSPIHandle, uint8_t *pRxBuffer, uint32_t Len)
{
	uint8_t state = pSPIHandle->RxState;

	if(state != SPI_BUSY_IN_RX){

	//1. Save the "TX buffer address" and "Length" information in global variables
	pSPIHandle->pRxBuffer = pRxBuffer;
	pSPIHandle->RxLen = Len;

	//2. Mark the SPI state as busy in transmission so that no other code can take over same SPI
	//   peripheral until transmission is over
	pSPIHandle->RxState = SPI_BUSY_IN_RX;

	//3. Enable TXEIE control bit to get interrupt whenever TXE flag is set in SR
	pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_RXNEIE);

	//4. Data Transmission will be handled by the ISR code (not yet implemented)

	}
	return state;
}

void SPI_IRQHandling(SPI_Handle_t *pSPIHandle)
{
	uint8_t temp1, temp2;

	// First, check TXE
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_TXE);
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_TXEIE);

	if(temp1 && temp2)
	{
		spi_txe_interrupt_handle(pSPIHandle);
	}

	// First, check RXNE
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_RXNE);
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_RXNEIE);

	if(temp1 && temp2)
	{
		spi_rxne_interrupt_handle(pSPIHandle);
	}

	// First, check OVR FLAG
	temp1 = pSPIHandle->pSPIx->SR & (1 << SPI_SR_OVR);
	temp2 = pSPIHandle->pSPIx->CR2 & (1 << SPI_CR2_ERRIE);

	if(temp1 && temp2)
	{
		spi_ovr_err_interrupt_handle(pSPIHandle);
	}
}

// some helper functions
static void spi_txe_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
	//2. check the DFF bit in CR1 (DFF in f407 = CRCL in f767)
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_CRCL))
	{
		// 16-bit CRC length
		// 2-1 load the data into DR
		pSPIHandle->pSPIx->DR = *((uint16_t*) pSPIHandle->pTxBuffer);

		// 2-2 sending 2 bytes of data, length - 2
		pSPIHandle->TxLen--;
		pSPIHandle->TxLen--;

		// 2-3 buffer should increase by 2
		(uint16_t*) pSPIHandle->pTxBuffer++; //type casting uint16 -> ++ will increase by 2
	}
	else
	{
		// 8-bit CRC length
		pSPIHandle->pSPIx->DR = *pSPIHandle->pTxBuffer; //didn't need type casting
		pSPIHandle->TxLen--;
		pSPIHandle->pTxBuffer++;
	}

	// if length = 0
	if(! pSPIHandle->TxLen)
	{
		// if TX length =0, close the SPI transmission and inform the application that TX is over

		// prevent interrupts from setting up of TXE flag
		SPI_CloseTransmission(pSPIHandle);
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_TX_CMPLT);
	}
}
static void spi_rxne_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
	//2. check the DFF bit in CR1 (DFF in f407xx = CRCL in f767xx)
	if(pSPIHandle->pSPIx->CR1 & (1 << SPI_CR1_CRCL))
	{
		// 16-bit CRC length
		// 2-1 load the data into DR
		*((uint16_t*) pSPIHandle->pRxBuffer) = pSPIHandle->pSPIx->DR;

		pSPIHandle->RxLen--;
		pSPIHandle->RxLen--;

		// 2-3 buffer should decrease by 2
		(uint16_t*) pSPIHandle->pRxBuffer --;
		(uint16_t*) pSPIHandle->pRxBuffer --;
	}
	else
	{
		// 8-bit CRC length
		*(pSPIHandle->pRxBuffer) = (uint8_t) pSPIHandle->pSPIx->DR;
		pSPIHandle->RxLen--;
		pSPIHandle->pRxBuffer--;
	}

	// if length = 0
	if(! pSPIHandle->RxLen)
	{
		// reception complete, turn off the RXNEIE interrupt
		SPI_CloseReception(pSPIHandle);
		SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_RX_CMPLT);
	}

}
static void spi_ovr_err_interrupt_handle(SPI_Handle_t *pSPIHandle)
{
	uint8_t temp;
	// 1. clear the OVR flag
	if(pSPIHandle->TxState != SPI_BUSY_IN_TX){
		temp = pSPIHandle->pSPIx->DR;
		temp = pSPIHandle->pSPIx->SR;
	}
	(void)temp;
	// 2. inform the application
	SPI_ApplicationEventCallback(pSPIHandle, SPI_EVENT_OVR_ERR);
}


void SPI_CloseTransmission(SPI_Handle_t *pSPIHandle){
	// prevent interrupts from setting up of TXE flag
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_TXEIE); /*clear bit*/
	pSPIHandle->pTxBuffer = NULL;
	pSPIHandle->TxLen = 0;
	pSPIHandle->TxState = SPI_READY;
}
void SPI_CloseReception(SPI_Handle_t *pSPIHandle){
	pSPIHandle->pSPIx->CR2 &= ~(1 << SPI_CR2_RXNEIE); /*clear bit*/
	pSPIHandle->pRxBuffer = NULL;
	pSPIHandle->RxLen = 0;
	pSPIHandle->RxState = SPI_READY;
}

void SPI_CLearOVRFlag(SPI_RegDef_t *pSPIx){
	uint8_t temp;
	temp = pSPIx->DR;
	temp = pSPIx->SR;
	(void)temp;
}

__weak void SPI_ApplicationEventCallback(SPI_Handle_t *pSPIHandle, uint8_t AppEv){

	// This is a weak implementation, the user application may "override" this function.

}

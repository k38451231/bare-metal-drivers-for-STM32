/*
 * stm32f767xx.h
 *
 *  Created on: Aug 4, 2025
 *      Author: TUF
 */

#ifndef INC_STM32F767XX_H_
#define INC_STM32F767XX_H_

#include <stdint.h>

#define __vo volatile

/* base address of FLASH and SRAM memories */
#define FLASH_BASEADDR 0x08000000U
#define SRAM1_BASEADDR 0x20020000U
#define SRAM2_BASEADDR 0x2007C000U
#define ROM_BASEADDR   0x1FF00000U
#define SRAM           SRAM1_BASEADDR

/* AHBx and APBx Bus peripheral base addresses */
#define PERIPH_BASE     0x40000000U

#define APB1PERIPH_BASE PERIPH_BASE
#define APB2PERIPH_BASE 0x40010000U

#define AHB1PERIPH_BASE 0x40020000U
#define AHB2PERIPH_BASE 0x50000000U
#define AHB3PERIPH_BASE 0x60000000U

/*
 * Base address of peripherals which are hanging on AHB1 bus
 */
#define GPIOA_BASEADDR (AHB1PERIPH_BASE + 0X0000)
#define GPIOB_BASEADDR (AHB1PERIPH_BASE + 0X0400)
#define GPIOC_BASEADDR (AHB1PERIPH_BASE + 0X0800)
#define GPIOD_BASEADDR (AHB1PERIPH_BASE + 0X0C00)
#define GPIOE_BASEADDR (AHB1PERIPH_BASE + 0X1000)
#define GPIOF_BASEADDR (AHB1PERIPH_BASE + 0X1400)
#define GPIOG_BASEADDR (AHB1PERIPH_BASE + 0X1800)
#define GPIOH_BASEADDR (AHB1PERIPH_BASE + 0X1C00)
#define GPIOI_BASEADDR (AHB1PERIPH_BASE + 0X2000)
#define GPIOJ_BASEADDR (AHB1PERIPH_BASE + 0X2400)
#define GPIOK_BASEADDR (AHB1PERIPH_BASE + 0X2800)

#define RCC_BASEADDR   (AHB1PERIPH_BASE + 0X3800)

/*
 * Base address of peripherals which are hanging on APB1 bus
 */
#define I2C1_BASEADDR   (APB1PERIPH_BASE + 0X5400)
#define I2C2_BASEADDR   (APB1PERIPH_BASE + 0X5800)
#define I2C3_BASEADDR   (APB1PERIPH_BASE + 0X5C00)
#define I2C4_BASEADDR   (APB1PERIPH_BASE + 0X6000)

#define SPI2_BASEADDR   (APB1PERIPH_BASE + 0X3800)
#define SPI3_BASEADDR   (APB1PERIPH_BASE + 0X3C00)

#define USART2_BASEADDR (APB1PERIPH_BASE + 0X4400)
#define USART3_BASEADDR (APB1PERIPH_BASE + 0X4800)

#define UART4_BASEADDR  (APB1PERIPH_BASE + 0X4C00)
#define UART5_BASEADDR  (APB1PERIPH_BASE + 0X5000)
#define UART7_BASEADDR  (APB1PERIPH_BASE + 0X7800)
#define UART8_BASEADDR  (APB1PERIPH_BASE + 0X7C00)


/*
 * Base address of peripherals which are hanging on APB2 bus
 */
#define EXTI_BASEADDR   (APB2PERIPH_BASE + 0X3C00)

#define SYSCFG_BASEADDR (APB2PERIPH_BASE + 0X3800)

#define SPI1_BASEADDR   (APB2PERIPH_BASE + 0X3000)
#define SPI4_BASEADDR   (APB2PERIPH_BASE + 0X3400)
#define SPI5_BASEADDR   (APB2PERIPH_BASE + 0X5000)
#define SPI6_BASEADDR   (APB2PERIPH_BASE + 0X5400)

#define USART1_BASEADDR (APB2PERIPH_BASE + 0X1000)
#define USART6_BASEADDR (APB2PERIPH_BASE + 0X1400)

/*****************************Peripheral register definition structures******************************************/

typedef struct
{
	__vo uint32_t MODER;    /* GPIO port mode register                            address offset 0x00*/
	__vo uint32_t OTYPER;   /* GPIO port output type register                     address offset 0x04*/
	__vo uint32_t OSPEEDR;  /* GPIO port output speed register                    address offset 0x08*/
	__vo uint32_t PUPDR;    /* GPIO port pull-up/pull-down register               address offset 0x0C*/
	__vo uint32_t IDR;      /* GPIO port input data register                      address offset 0x10*/
	__vo uint32_t ODR;      /* GPIO port output data register                     address offset 0x14*/
	__vo uint32_t BSRR;     /* GPIO port bit set/reset register                   address offset 0x18*/
	__vo uint32_t LCKR;     /* GPIO port configuration lock register              address offset 0x1C*/
	__vo uint32_t AFR[2];     /* GPIO alternate function low&high register               address offset 0x20*/
	//__vo uint32_t AFRH;     /* GPIO alternate function high register              address offset 0x24*/

}GPIO_RegDef_t;

typedef struct{
	__vo uint32_t CR;
	__vo uint32_t PLLCFGR;
	__vo uint32_t CFGR;
	__vo uint32_t CIR;
	__vo uint32_t AHB1RSTR;
	__vo uint32_t AHB2RSTR;
	__vo uint32_t AHB3RSTR;
	__vo uint32_t Res1;
	__vo uint32_t APB1RSTR;
	__vo uint32_t APB2RSTR;
	__vo uint32_t Res2;
	__vo uint32_t Res3;
	__vo uint32_t AHB1ENR;
	__vo uint32_t AHB2ENR;
	__vo uint32_t AHB3ENR;
	__vo uint32_t Res4;
	__vo uint32_t APB1ENR;
	__vo uint32_t APB2ENR;
	__vo uint32_t Res5;
	__vo uint32_t Res6;
	__vo uint32_t AHB1LPENR;
	__vo uint32_t AHB2LPENR;
	__vo uint32_t AHB3LPENR;
	__vo uint32_t Res7;
	__vo uint32_t APB1LPENR;
	__vo uint32_t APB2LPENR;
	__vo uint32_t Res8;
	__vo uint32_t Res9;
	__vo uint32_t BDCR;
	__vo uint32_t CSR;
	__vo uint32_t Res10;
	__vo uint32_t Res11;
	__vo uint32_t SSCGR;
	__vo uint32_t PLLI2SCFGR;
	__vo uint32_t PLLSAICFGR;
	__vo uint32_t DCKCFGR1;
	__vo uint32_t DCKCFGR2;
}RCC_RegDef_t;



/*
 * Peripheral definitions (peripheral base address typecasted to xxx_RegDef_t)
 */
#define GPIOA ((GPIO_RegDef_t*) GPIOA_BASEADDR)
#define GPIOB ((GPIO_RegDef_t*) GPIOB_BASEADDR)
#define GPIOC ((GPIO_RegDef_t*) GPIOC_BASEADDR)
#define GPIOD ((GPIO_RegDef_t*) GPIOD_BASEADDR)
#define GPIOE ((GPIO_RegDef_t*) GPIOE_BASEADDR)
#define GPIOF ((GPIO_RegDef_t*) GPIOF_BASEADDR)
#define GPIOG ((GPIO_RegDef_t*) GPIOG_BASEADDR)
#define GPIOH ((GPIO_RegDef_t*) GPIOH_BASEADDR)
#define GPIOI ((GPIO_RegDef_t*) GPIOI_BASEADDR)
#define GPIOJ ((GPIO_RegDef_t*) GPIOJ_BASEADDR)
#define GPIOK ((GPIO_RegDef_t*) GPIOK_BASEADDR)
#define RCC   ((RCC_RegDef_t*) RCC_BASEADDR)

/*
 * Clock enable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_EN() (RCC->AHB1ENR |= (1 <<  0))
#define GPIOB_PCLK_EN() (RCC->AHB1ENR |= (1 <<  1))
#define GPIOC_PCLK_EN() (RCC->AHB1ENR |= (1 <<  2))
#define GPIOD_PCLK_EN() (RCC->AHB1ENR |= (1 <<  3))
#define GPIOE_PCLK_EN() (RCC->AHB1ENR |= (1 <<  4))
#define GPIOF_PCLK_EN() (RCC->AHB1ENR |= (1 <<  5))
#define GPIOG_PCLK_EN() (RCC->AHB1ENR |= (1 <<  6))
#define GPIOH_PCLK_EN() (RCC->AHB1ENR |= (1 <<  7))
#define GPIOI_PCLK_EN() (RCC->AHB1ENR |= (1 <<  8))
#define GPIOJ_PCLK_EN() (RCC->AHB1ENR |= (1 <<  9))
#define GPIOK_PCLK_EN() (RCC->AHB1ENR |= (1 << 10))

/*
 * Clock enable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_EN() (RCC->APB1ENR |= (1<<21))
#define I2C2_PCLK_EN() (RCC->APB1ENR |= (1<<22))
#define I2C3_PCLK_EN() (RCC->APB1ENR |= (1<<23))

/*
 * Clock enable Macros for SPIx peripherals
 */
#define SPI1_PCLK_EN() (RCC->APB2ENR |= (1<<12))
#define SPI4_PCLK_EN() (RCC->APB2ENR |= (1<<13))
#define SPI5_PCLK_EN() (RCC->APB2ENR |= (1<<20))
#define SPI6_PCLK_EN() (RCC->APB2ENR |= (1<<21))

#define SPI2_PCLK_EN() (RCC->APB1ENR |= (1<<14))
#define SPI3_PCLK_EN() (RCC->APB1ENR |= (1<<15))

/*
 * Clock enable Macros for USARTx peripherals
 */
#define USART1_PCLK_EN() (RCC->APB2ENR |= (1<<4))
#define USART6_PCLK_EN() (RCC->APB2ENR |= (1<<5))

/*
 * Clock enable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_EN() (RCC->APB2ENR |= (1<<14))

/*
 * Clock Disable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  0))
#define GPIOB_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  1))
#define GPIOC_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  2))
#define GPIOD_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  3))
#define GPIOE_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  4))
#define GPIOF_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  5))
#define GPIOG_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  6))
#define GPIOH_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  7))
#define GPIOI_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  8))
#define GPIOJ_PCLK_DI() (RCC->AHB1ENR &= ~(1 <<  9))
#define GPIOK_PCLK_DI() (RCC->AHB1ENR &= ~(1 << 10))

/*
 * Clock Disable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_DI() (RCC->APB1ENR &= ~(1<<21))
#define I2C2_PCLK_DI() (RCC->APB1ENR &= ~(1<<22))
#define I2C3_PCLK_DI() (RCC->APB1ENR &= ~(1<<23))

/*
 * Clock Disable Macros for SPIx peripherals
 */
#define SPI1_PCLK_DI() (RCC->APB2ENR &= ~(1<<12))
#define SPI4_PCLK_DI() (RCC->APB2ENR &= ~(1<<13))
#define SPI5_PCLK_DI() (RCC->APB2ENR &= ~(1<<20))
#define SPI6_PCLK_DI() (RCC->APB2ENR &= ~(1<<21))

#define SPI2_PCLK_DI() (RCC->APB1ENR &= ~(1<<14))
#define SPI3_PCLK_DI() (RCC->APB1ENR &= ~(1<<15))

/*
 * Clock Disable Macros for USARTx peripherals
 */
#define USART1_PCLK_DI() (RCC->APB2ENR &= ~(1<<4))
#define USART6_PCLK_DI() (RCC->APB2ENR &= ~(1<<5))

/*
 * Clock Disable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_DI() (RCC->APB2ENR &= ~(1<<14))

/*
 * Macros to reset GPIOx peripherals
 */
#define GPIOA_REG_RESET()     do{ (RCC->AHB1RSTR |= (1<<0 )); (RCC->AHB1RSTR &= ~(1<<0 )); }while(0)
#define GPIOB_REG_RESET()     do{ (RCC->AHB1RSTR |= (1<<1 )); (RCC->AHB1RSTR &= ~(1<<1 )); }while(0)
#define GPIOC_REG_RESET()     do{ (RCC->AHB1RSTR |= (1<<2 )); (RCC->AHB1RSTR &= ~(1<<2 )); }while(0)
#define GPIOD_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<3 )); (RCC->AHB1RSTR &= ~(1<<3 )); }while(0)
#define GPIOE_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<4 )); (RCC->AHB1RSTR &= ~(1<<4 )); }while(0)
#define GPIOF_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<5 )); (RCC->AHB1RSTR &= ~(1<<5 )); }while(0)
#define GPIOG_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<6 )); (RCC->AHB1RSTR &= ~(1<<6 )); }while(0)
#define GPIOH_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<7 )); (RCC->AHB1RSTR &= ~(1<<7 )); }while(0)
#define GPIOI_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<8 )); (RCC->AHB1RSTR &= ~(1<<8 )); }while(0)
#define GPIOJ_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<9 )); (RCC->AHB1RSTR &= ~(1<<9 )); }while(0)
#define GPIOK_REG_RESET()	  do{ (RCC->AHB1RSTR |= (1<<10)); (RCC->AHB1RSTR &= ~(1<<10)); }while(0)

/*
 * some generic macros
 */
#define ENABLE 1
#define DISABLE 0
#define SET ENABLE
#define RESET DISABLE
#define GPIO_PIN_SET SET
#define GPIO_PIN_RESET RESET


#endif /* INC_STM32F767XX_H_ */

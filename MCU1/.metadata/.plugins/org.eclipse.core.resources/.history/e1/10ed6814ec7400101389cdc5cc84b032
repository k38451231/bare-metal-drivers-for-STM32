/*
 * stm32f767xx_gpio_driver.h
 *
 *  Created on: Aug 9, 2025
 *      Author: TUF
 */

#ifndef INC_STM32F767XX_GPIO_DRIVER_H_
#define INC_STM32F767XX_GPIO_DRIVER_H_

#include "stm32f767xx.h"

typedef struct{
	uint8_t GPIO_PinNumber;
	uint8_t GPIO_PinMode;
	uint8_t GPIO_PinSpeed;
	uint8_t GPIO_PinPuPdControl;
	uint8_t GPIO_PinOPType;
	uint8_t GPIO_PinAltFunMode;

}GPIO_PinConfig_t;

/*
 * this is a handle structure for a GPIO pin
 */

typedef struct{
	//pointer to hold the base address of the GPIO peripherals
	GPIO_RegDef_t *pGPIOx; /*this holds the base addr of the GPIO port to which the pin belongs*/
	GPIO_PinConfig_t GPIO_PinConfig; /*this holds GPIO pin configuration settings*/

}GPIO_Handle_t;


/***************************************************************************************
 * API SUPPORTED BY THIS DRIVER
 * CHECK FUNCTION DETAILS FOR MORE INFORMATIONS
 * ***************************************************************************************/
/*
 *  Peripheral Clock Setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi);
/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle);
void GPIO_DeInit(GPIO_RegDef_t *pGPIOx); //take base address of peripheral (reset register)

/*
 * Data read/write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber); //return 0/1, so use uint8_t
uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx);
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value); //take set or reset value
void GPIO_WriteToOutputPort(void);
void GPIO_ToggleOutputPin(void);
/*
 * IRQ Configuration and ISR handling
 */
void GPIO_IRQConfig(void);
void GPIO_IRQHandling(void);









#endif /* INC_STM32F767XX_GPIO_DRIVER_H_ */

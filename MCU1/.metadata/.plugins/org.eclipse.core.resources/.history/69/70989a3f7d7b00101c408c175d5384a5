/*
 * stm32f767xx_spi_driver.c
 *
 *  Created on: Aug 17, 2025
 *      Author: TUF
 */


#include "stm32f767xx.h"
#include "stm32f767xx_spi_driver.h"

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_EN();
		}
		else if(pSPIx == SPI5)
		{
			SPI5_PCLK_EN();
		}
		else if(pSPIx == SPI6)
		{
			SPI6_PCLK_EN();
		}

	}
	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}
		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}
		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_DI();
		}
		else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
		else if(pSPIx == SPI5)
		{
			SPI5_PCLK_DI();
		}
		else if(pSPIx == SPI6)
		{
			SPI6_PCLK_DI();
		}

	}

}

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	// First, configure SPI_CR1 register (configure "TempReg" as "CR1")
	uint32_t tempreg = 0;

	/* 1. configure the device mode (MSTR bit), initializing to 0 (slave configuration) */
	tempreg |=  pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	/* 2. configure the BusConfig */
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD) //full-duplex
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD) //half-duplex
	{
		//BIDI mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) //Simplex, Rx-Only
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
		//Rx-Only bit should be set
		tempreg |=  ( 1 << SPI_CR1_RXONLY);
	}

	/* 3. configure the SclkSpeed (BAUD RATE) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR);


	/* 4. configure the SPI_DFF (SPI_CRCL in f767xx) */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_CRCL);

	/* 5. configure the SPI_CPOL */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);

	/* 6. configure the SPI_CPHA */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);

	/* 7. configure the SPI_SSM */
	tempreg |=  ( pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_SSM);

	pSPIHandle->pSPIx->CR1 = tempreg;

}

void SPI_DeInit(SPI_RegDef_t *pSPIx); //take base address of peripheral (reset register)

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
	return FLAG_RESET; // reset = 0
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	while(Len > 0)
	{
		//1. wait until TXE is set (Transmit buffer is empty)
		while( ! ( pSPIx->SR & (1<<1) ) );
		{

		}
	}

}

